{"ast":null,"code":"export function getAllNodes(grid) {\n  const nodes = [];\n\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      console.log(\"command sucessful\");\n      nodes.push(grid[i][j]);\n    }\n  }\n\n  return nodes;\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nexport function updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["E:/minor project/Pathfinding-Algorithm-visualiser/Minor_project/src/Algorithms/AlgoTools.jsx"],"names":["getAllNodes","grid","nodes","i","length","j","console","log","push","getUnvisitedNeighbors","node","neighbors","col","row","filter","neighbor","isVisited","updateUnvisitedNeighbors","unvisitedNeighbors","distance","previousNode","getNodesInShortestPathOrder","finishNode","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"AACC,OAAO,SAASA,WAAT,CAAqBC,IAArB,EAA2B;AAC/B,QAAMC,KAAK,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAaA,CAAC,GAACF,IAAI,CAACG,MAApB,EAA2BD,CAAC,EAA5B,EAAgC;AAC9B,SAAK,IAAIE,CAAC,GAAC,CAAX,EAAaA,CAAC,GAAEJ,IAAI,CAACE,CAAD,CAAJ,CAAQC,MAAxB,EAAgCC,CAAC,EAAjC,EAAqC;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAL,MAAAA,KAAK,CAACM,IAAN,CAAWP,IAAI,CAACE,CAAD,CAAJ,CAAQE,CAAR,CAAX;AACD;AACF;;AACD,SAAOH,KAAP;AACD;;AACD,SAASO,qBAAT,CAA+BC,IAA/B,EAAqCT,IAArC,EAA2C;AACzC,QAAMU,SAAS,GAAG,EAAlB;AACA,QAAM;AAACC,IAAAA,GAAD;AAAMC,IAAAA;AAAN,MAAaH,IAAnB;AACA,MAAIG,GAAG,GAAG,CAAV,EAAaF,SAAS,CAACH,IAAV,CAAeP,IAAI,CAACY,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AACb,MAAIC,GAAG,GAAGZ,IAAI,CAACG,MAAL,GAAc,CAAxB,EAA2BO,SAAS,CAACH,IAAV,CAAeP,IAAI,CAACY,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AAC3B,MAAIA,GAAG,GAAG,CAAV,EAAaD,SAAS,CAACH,IAAV,CAAeP,IAAI,CAACY,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AACb,MAAIA,GAAG,GAAGX,IAAI,CAAC,CAAD,CAAJ,CAAQG,MAAR,GAAiB,CAA3B,EAA8BO,SAAS,CAACH,IAAV,CAAeP,IAAI,CAACY,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AAC9B,SAAOD,SAAS,CAACG,MAAV,CAAiBC,QAAQ,IAAI,CAACA,QAAQ,CAACC,SAAvC,CAAP;AACD;;AACD,OAAO,SAASC,wBAAT,CAAkCP,IAAlC,EAAwCT,IAAxC,EAA8C;AACnD,QAAMiB,kBAAkB,GAAGT,qBAAqB,CAACC,IAAD,EAAOT,IAAP,CAAhD;;AACA,OAAK,MAAMc,QAAX,IAAuBG,kBAAvB,EAA2C;AACzCH,IAAAA,QAAQ,CAACI,QAAT,GAAoBT,IAAI,CAACS,QAAL,GAAgB,CAApC;AACAJ,IAAAA,QAAQ,CAACK,YAAT,GAAwBV,IAAxB;AACD;AACF;AACD,OAAO,SAASW,2BAAT,CAAqCC,UAArC,EAAiD;AACtD,QAAMC,wBAAwB,GAAG,EAAjC;AACA,MAAIC,WAAW,GAAGF,UAAlB;;AACA,SAAOE,WAAW,KAAK,IAAvB,EAA6B;AAC3BD,IAAAA,wBAAwB,CAACE,OAAzB,CAAiCD,WAAjC;AACAA,IAAAA,WAAW,GAAGA,WAAW,CAACJ,YAA1B;AACD;;AACD,SAAOG,wBAAP;AACD","sourcesContent":[" \r\n export function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (var i=0;i<grid.length;i++) {\r\n      for (var j=0;j<(grid[i].length);j++) {\r\n        console.log(\"command sucessful\")\r\n        nodes.push(grid[i][j]);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n  function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n  export function updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n  export function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }  "]},"metadata":{},"sourceType":"module"}