{"ast":null,"code":"import { getAllNodes, sortNodesByDistance, updateUnvisitedNeighbors } from './AlgoTools';\nexport function bfs(grid, startNode, finishNode) {\n  const queue = [];\n  startNode.isvisited = true;\n  queue.push(startNode);\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (queue.length > 0) {\n    let current = queue.shift();\n\n    if (current == finishNode) {\n      console.log('found');\n      return queue;\n      updateUnvisitedNeighbors(closestNode, grid);\n    }\n\n    sortNodesByDistance(unvisitedNodes);\n    let edges = unvisitedNodes.shift();\n\n    for (let i = 0; i < edges.length; i++) {\n      let neighbor = edges[i];\n\n      if (!neighbor.isvisited) {\n        neighbor.isvisited = true;\n        neighbor.previousNode = current;\n        queue.push(neighbor);\n      }\n    }\n  }\n}","map":{"version":3,"sources":["E:/minor project/Pathfinding-Algorithm-visualiser/Minor_project/src/Algorithms/BFS.jsx"],"names":["getAllNodes","sortNodesByDistance","updateUnvisitedNeighbors","bfs","grid","startNode","finishNode","queue","isvisited","push","unvisitedNodes","length","current","shift","console","log","closestNode","edges","i","neighbor","previousNode"],"mappings":"AAAA,SAAQA,WAAR,EAAoBC,mBAApB,EAAwCC,wBAAxC,QAAuE,aAAvE;AAEA,OAAO,SAASC,GAAT,CAAaC,IAAb,EAAkBC,SAAlB,EAA4BC,UAA5B,EAAwC;AAE7C,QAAMC,KAAK,GAAG,EAAd;AACAF,EAAAA,SAAS,CAACG,SAAV,GAAsB,IAAtB;AACAD,EAAAA,KAAK,CAACE,IAAN,CAAWJ,SAAX;AACA,QAAMK,cAAc,GAAGV,WAAW,CAACI,IAAD,CAAlC;;AAEA,SAAMG,KAAK,CAACI,MAAN,GAAe,CAArB,EAAwB;AACtB,QAAIC,OAAO,GAAGL,KAAK,CAACM,KAAN,EAAd;;AACA,QAAGD,OAAO,IAAIN,UAAd,EAA0B;AACxBQ,MAAAA,OAAO,CAACC,GAAR,CAAa,OAAb;AACA,aAAOR,KAAP;AACAL,MAAAA,wBAAwB,CAACc,WAAD,EAAcZ,IAAd,CAAxB;AACD;;AACDH,IAAAA,mBAAmB,CAACS,cAAD,CAAnB;AACA,QAAIO,KAAK,GAAGP,cAAc,CAACG,KAAf,EAAZ;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACN,MAA1B,EAAkCO,CAAC,EAAnC,EAAsC;AACpC,UAAIC,QAAQ,GAAGF,KAAK,CAAEC,CAAF,CAApB;;AACA,UAAG,CAACC,QAAQ,CAACX,SAAb,EAAwB;AACtBW,QAAAA,QAAQ,CAACX,SAAT,GAAqB,IAArB;AACAW,QAAAA,QAAQ,CAACC,YAAT,GAAwBR,OAAxB;AACAL,QAAAA,KAAK,CAACE,IAAN,CAAWU,QAAX;AACD;AACF;AACF;AACF","sourcesContent":["import {getAllNodes,sortNodesByDistance,updateUnvisitedNeighbors} from './AlgoTools';\r\n\r\nexport function bfs(grid,startNode,finishNode) {\r\n\r\n  const queue = [];\r\n  startNode.isvisited = true;\r\n  queue.push(startNode);\r\n  const unvisitedNodes = getAllNodes(grid);\r\n\r\n  while(queue.length > 0) {\r\n    let current = queue.shift();\r\n    if(current == finishNode) {\r\n      console.log ('found');\r\n      return queue;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n    sortNodesByDistance(unvisitedNodes);\r\n    let edges = unvisitedNodes.shift();\r\n    for (let i = 0; i < edges.length; i++){\r\n      let neighbor = edges [i];\r\n      if(!neighbor.isvisited) {\r\n        neighbor.isvisited = true;\r\n        neighbor.previousNode = current;\r\n        queue.push(neighbor);\r\n      }\r\n    }\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}