{"ast":null,"code":"import { getAllNodes } from './AlgoTools';\nexport function bfs(grid, startNode, FinsihNode) {\n  const queue = [];\n  startNode.isvisited = true;\n  queue.push(startNode);\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (queue.length > 0) {\n    let current = queue.shift();\n\n    if (current == FinsihNode) {\n      console.log('found');\n      return queue;\n    }\n\n    var edges = unvisitedNodes.unshift();\n\n    for (let i = 0; i < edges.length; i++) {\n      var neighbor = edges[i];\n\n      if (!neighbor.isvisited) {\n        neighbor.isvisited = true;\n        neighbor.previousNode = current;\n        queue.push(neighbor);\n      }\n    }\n  }\n}","map":{"version":3,"sources":["E:/minor project/Pathfinding-Algorithm-visualiser/Minor_project/src/Algorithms/BFS.jsx"],"names":["getAllNodes","bfs","grid","startNode","FinsihNode","queue","isvisited","push","unvisitedNodes","length","current","shift","console","log","edges","unshift","i","neighbor","previousNode"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,aAA1B;AAEA,OAAO,SAASC,GAAT,CAAaC,IAAb,EAAkBC,SAAlB,EAA4BC,UAA5B,EAAwC;AAE7C,QAAMC,KAAK,GAAG,EAAd;AACAF,EAAAA,SAAS,CAACG,SAAV,GAAsB,IAAtB;AACAD,EAAAA,KAAK,CAACE,IAAN,CAAWJ,SAAX;AACA,QAAMK,cAAc,GAAGR,WAAW,CAACE,IAAD,CAAlC;;AAEA,SAAMG,KAAK,CAACI,MAAN,GAAe,CAArB,EAAwB;AACtB,QAAIC,OAAO,GAAGL,KAAK,CAACM,KAAN,EAAd;;AACA,QAAGD,OAAO,IAAIN,UAAd,EAA0B;AACxBQ,MAAAA,OAAO,CAACC,GAAR,CAAa,OAAb;AACA,aAAOR,KAAP;AACD;;AACD,QAAIS,KAAK,GAAGN,cAAc,CAACO,OAAf,EAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACL,MAA1B,EAAkCO,CAAC,EAAnC,EAAsC;AACpC,UAAIC,QAAQ,GAAGH,KAAK,CAAEE,CAAF,CAApB;;AACA,UAAG,CAACC,QAAQ,CAACX,SAAb,EAAwB;AACtBW,QAAAA,QAAQ,CAACX,SAAT,GAAqB,IAArB;AACAW,QAAAA,QAAQ,CAACC,YAAT,GAAwBR,OAAxB;AACAL,QAAAA,KAAK,CAACE,IAAN,CAAWU,QAAX;AACD;AACF;AACF;AACF","sourcesContent":["import {getAllNodes} from './AlgoTools';\r\n\r\nexport function bfs(grid,startNode,FinsihNode) {\r\n\r\n  const queue = [];\r\n  startNode.isvisited = true;\r\n  queue.push(startNode);\r\n  const unvisitedNodes = getAllNodes(grid);\r\n\r\n  while(queue.length > 0) {\r\n    let current = queue.shift();\r\n    if(current == FinsihNode) {\r\n      console.log ('found');\r\n      return queue;\r\n    }\r\n    var edges = unvisitedNodes.unshift();\r\n    for (let i = 0; i < edges.length; i++){\r\n      var neighbor = edges [i];\r\n      if(!neighbor.isvisited) {\r\n        neighbor.isvisited = true;\r\n        neighbor.previousNode = current;\r\n        queue.push(neighbor);\r\n      }\r\n    }\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}