{"ast":null,"code":"// export function dfs(grid,startNode,finishNode) {\n//     const queue = [];\n//     const visitedNodesInOrder = [];\n//     startNode.isVisited = true;\n//     queue.push(startNode);\n//     while(queue.length > 0) {\n//       let currentNode;\n//       currentNode = queue.pop();\n//       // currentNode.isVisited = true;\n//       // if(currentNode.isWall) continue;\n//       if(currentNode.isWall) continue;\n//       if(currentNode === finishNode) {\n//         return visitedNodesInOrder;\n//       }\n//       let edges = getUnvisitedNeighbors(grid,currentNode);\n//       for (let i = 0; i < edges.length; i++){\n//         let neighbor = edges[i];\n//         if(!neighbor.isVisited) {\n//           // neighbor.isVisited = true;\n//           if(neighbor.isWall) continue;\n//           neighbor.previousNode = currentNode;\n//           visitedNodesInOrder.push(neighbor);\n//           queue.push(neighbor);    \n//         }\n//       } \n//     }\n//     return visitedNodesInOrder;\n// }\nexport function dfs(grid, startNode, finishNode) {\n  const queue = [];\n  queue.push(startNode);\n\n  while (queue.length > 0) {\n    let currentNode;\n    currentNode = queue.pop(); //   if(currentNode.isWall) continue;\n    //  queue.push(currentNode);\n\n    currentNode.isVisited = true;\n    if (currentNode.isWall) continue;\n\n    if (currentNode === finishNode) {\n      return queue;\n    } // console.log('currentNode')\n    // console.log(currentNode)\n\n\n    let edges = getUnvisitedNeighbors(currentNode, grid); /////console.log('edges')\n    ////console.log(edges)\n\n    for (let i = 0; i < edges.length; i++) {\n      let neighbor = edges[i];\n\n      if (!neighbor.isVisited) {\n        //neighbor.isVisited = true;\n        if (neighbor.isWall) continue;\n        neighbor.previousNode = currentNode;\n        queue.push(neighbor);\n      }\n    }\n  }\n\n  return queue;\n} // export function dfs(grid, startNode, finishNode) {\n//   const stack = [];\n//   const visitedNodesInOrder = [];\n//   startNode.isVisited = true;\n//   stack.push(startNode);\n//   while (!!stack.length) {\n//       let node = stack.pop();\n//       if (finishNode === node)\n//           return visitedNodesInOrder;\n//       if (node.isWall) continue;\n//       const neighbors = getUnvisitedNeighbors(grid, node);\n//       for (const neighbor of neighbors) {\n//         if(!neighbor.isVisited){\n//           // neighbor.isVisited = true;\n//           neighbor.previousNode = node;\n//           visitedNodesInOrder.push(neighbor);\n//           stack.push(neighbor);\n//         }\n//       }\n//   }\n//   return visitedNodesInOrder;\n// }\n// function getUnvisitedNeighbors(grid, node) {\n//   const ROWS = grid.length;\n//   const COLS = grid[0].length;\n//   const { row, col } = node;\n//   const neighbors = [];\n//   if (\n//     row - 1 >= 0 &&\n//     row - 1 < ROWS &&\n//     col >= 0 &&\n//     col < COLS &&\n//     !grid[row - 1][col].isWall &&\n//     !grid[row - 1][col].isVisited\n//   ) {\n//         neighbors.unshift(grid[row - 1][col]);\n//   }\n//   if (\n//     row >= 0 &&\n//     row < ROWS &&\n//     col + 1 >= 0 &&\n//     col + 1 < COLS &&\n//     !grid[row][col + 1].isWall &&\n//     !grid[row][col + 1].isVisited\n//   ) {\n//     neighbors.unshift(grid[row][col + 1]);\n//   }\n//   if (\n//       row + 1 >= 0 &&\n//       row + 1 < ROWS &&\n//       col >= 0 &&\n//       col < COLS &&\n//       !grid[row + 1][col].isVisited &&\n//       !grid[row + 1][col].isWall\n//   ) {\n//       neighbors.unshift(grid[row + 1][col]);\n//   }\n//   if (\n//       row >= 0 &&\n//       row < ROWS &&\n//       col - 1 >= 0 &&\n//       col - 1 < COLS &&\n//       !grid[row][col - 1].isWall &&\n//       !grid[row][col - 1].isVisited\n//   ) {\n//       neighbors.unshift(grid[row][col - 1]);\n//   }\n//   return neighbors;\n// }\n\nfunction getUnvisitedNeighbors(grid, node) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n\n  if (row > 0) {\n    //console.log(0)\n    neighbors.unshift(grid[row - 1][col]);\n  } //up\n\n\n  if (col < grid[0].length - 1) {\n    //console.log(3)\n    neighbors.unshift(grid[row][col + 1]);\n  } //right\n\n\n  if (row < grid.length - 1) {\n    // console.log(1)\n    neighbors.unshift(grid[row + 1][col]);\n  } //down \n\n\n  if (col > 0) {\n    ////console.log(2)\n    neighbors.unshift(grid[row][col - 1]);\n  } //left \n\n\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}","map":{"version":3,"sources":["E:/Pathfinding-Algorithm-Visualiser/Minor_project/src/Algorithms/DFS.jsx"],"names":["dfs","grid","startNode","finishNode","queue","push","length","currentNode","pop","isVisited","isWall","edges","getUnvisitedNeighbors","i","neighbor","previousNode","node","neighbors","col","row","unshift","filter"],"mappings":"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","sourcesContent":["// export function dfs(grid,startNode,finishNode) {\r\n\r\n//     const queue = [];\r\n//     const visitedNodesInOrder = [];\r\n\r\n//     startNode.isVisited = true;\r\n//     queue.push(startNode);\r\n\r\n//     while(queue.length > 0) {\r\n//       let currentNode;\r\n//       currentNode = queue.pop();\r\n//       // currentNode.isVisited = true;\r\n//       // if(currentNode.isWall) continue;\r\n      \r\n      \r\n//       if(currentNode.isWall) continue;\r\n\r\n//       if(currentNode === finishNode) {\r\n//         return visitedNodesInOrder;\r\n//       }\r\n\r\n   \r\n//       let edges = getUnvisitedNeighbors(grid,currentNode);\r\n     \r\n//       for (let i = 0; i < edges.length; i++){\r\n//         let neighbor = edges[i];\r\n//         if(!neighbor.isVisited) {\r\n//           // neighbor.isVisited = true;\r\n//           if(neighbor.isWall) continue;\r\n//           neighbor.previousNode = currentNode;\r\n//           visitedNodesInOrder.push(neighbor);\r\n//           queue.push(neighbor);    \r\n//         }\r\n//       } \r\n//     }\r\n//     return visitedNodesInOrder;\r\n// }\r\n\r\nexport function dfs(grid,startNode,finishNode) {\r\n\r\n  const queue = [];\r\n  queue.push(startNode);\r\n  while(queue.length > 0) {\r\n    let currentNode;\r\n    currentNode = queue.pop();\r\n  //   if(currentNode.isWall) continue;\r\n  //  queue.push(currentNode);\r\n    currentNode.isVisited = true;\r\n    if(currentNode.isWall) continue;\r\n    if(currentNode === finishNode) {\r\n      return queue;\r\n    }\r\n   // console.log('currentNode')\r\n   // console.log(currentNode)\r\n    let edges = getUnvisitedNeighbors(currentNode, grid);\r\n    /////console.log('edges')\r\n    ////console.log(edges)\r\n    for (let i = 0; i < edges.length; i++){\r\n      let neighbor = edges[i];\r\n      if(!neighbor.isVisited) {\r\n      //neighbor.isVisited = true;\r\n        if(neighbor.isWall) continue;\r\n        neighbor.previousNode = currentNode;\r\n        queue.push(neighbor);    \r\n      }\r\n    } \r\n  }\r\n  return queue;\r\n}\r\n\r\n\r\n// export function dfs(grid, startNode, finishNode) {\r\n//   const stack = [];\r\n//   const visitedNodesInOrder = [];\r\n\r\n//   startNode.isVisited = true;\r\n//   stack.push(startNode);\r\n\r\n//   while (!!stack.length) {\r\n//       let node = stack.pop();\r\n\r\n//       if (finishNode === node)\r\n//           return visitedNodesInOrder;\r\n\r\n//       if (node.isWall) continue;\r\n\r\n//       const neighbors = getUnvisitedNeighbors(grid, node);\r\n\r\n//       for (const neighbor of neighbors) {\r\n//         if(!neighbor.isVisited){\r\n//           // neighbor.isVisited = true;\r\n//           neighbor.previousNode = node;\r\n//           visitedNodesInOrder.push(neighbor);\r\n//           stack.push(neighbor);\r\n//         }\r\n//       }\r\n//   }\r\n\r\n//   return visitedNodesInOrder;\r\n// }\r\n\r\n// function getUnvisitedNeighbors(grid, node) {\r\n//   const ROWS = grid.length;\r\n//   const COLS = grid[0].length;\r\n\r\n//   const { row, col } = node;\r\n//   const neighbors = [];\r\n\r\n//   if (\r\n//     row - 1 >= 0 &&\r\n//     row - 1 < ROWS &&\r\n//     col >= 0 &&\r\n//     col < COLS &&\r\n//     !grid[row - 1][col].isWall &&\r\n//     !grid[row - 1][col].isVisited\r\n//   ) {\r\n//         neighbors.unshift(grid[row - 1][col]);\r\n//   }\r\n  \r\n//   if (\r\n//     row >= 0 &&\r\n//     row < ROWS &&\r\n//     col + 1 >= 0 &&\r\n//     col + 1 < COLS &&\r\n//     !grid[row][col + 1].isWall &&\r\n//     !grid[row][col + 1].isVisited\r\n//   ) {\r\n//     neighbors.unshift(grid[row][col + 1]);\r\n//   }\r\n\r\n//   if (\r\n//       row + 1 >= 0 &&\r\n//       row + 1 < ROWS &&\r\n//       col >= 0 &&\r\n//       col < COLS &&\r\n//       !grid[row + 1][col].isVisited &&\r\n//       !grid[row + 1][col].isWall\r\n//   ) {\r\n//       neighbors.unshift(grid[row + 1][col]);\r\n//   }\r\n \r\n//   if (\r\n//       row >= 0 &&\r\n//       row < ROWS &&\r\n//       col - 1 >= 0 &&\r\n//       col - 1 < COLS &&\r\n//       !grid[row][col - 1].isWall &&\r\n//       !grid[row][col - 1].isVisited\r\n//   ) {\r\n//       neighbors.unshift(grid[row][col - 1]);\r\n//   }\r\n  \r\n\r\n//   return neighbors;\r\n// }\r\nfunction getUnvisitedNeighbors(grid, node) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n  \r\n    if (row > 0) {\r\n        //console.log(0)\r\n        neighbors.unshift(grid[row - 1][col]);\r\n    }//up\r\n    if (col < grid[0].length - 1) {\r\n        //console.log(3)\r\n        neighbors.unshift(grid[row][col + 1]);\r\n    }//right\r\n    if (row < grid.length - 1) {\r\n      // console.log(1)\r\n       neighbors.unshift(grid[row + 1][col]);\r\n    }//down \r\n    if (col > 0) {\r\n        ////console.log(2)\r\n        neighbors.unshift(grid[row][col - 1]);\r\n    }//left \r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n                          \r\n  "]},"metadata":{},"sourceType":"module"}