{"ast":null,"code":"import { getAllNodes, getUnvisitedNeighbors, sortNodesByDistance, findCost } from \"./AlgoTools\";\nexport function aStar(grid, startNode, finishNode) {\n  var unvisitedNodes = []; //step1\n\n  var visitedNodes = []; //step2\n\n  startNode.distance = 0;\n  startNode.cost = 0;\n  unvisitedNodes.push(startNode);\n  console.log(unvisitedNodes.length);\n  var cheapestIndex = 0,\n      cheapestNode = unvisitedNodes[0];\n\n  while (unvisitedNodes.length > 0) //step3\n  {\n    for (var i = 0; i < unvisitedNodes.length; i++) //step3a\n    {\n      if (unvisitedNodes[i].cost < cheapestNode.cost) {\n        cheapestIndex = i;\n      }\n    }\n\n    cheapestNode = unvisitedNodes[cheapestIndex];\n    unvisitedNodes.splice(cheapestIndex, 1); //step3b\n\n    console.log(cheapestNode);\n    console.log(unvisitedNodes);\n  }\n}","map":{"version":3,"sources":["C:/Users/Acer/Pathfinding-Algorithm-Visualiser/Minor_project/src/Algorithms/Astar.jsx"],"names":["getAllNodes","getUnvisitedNeighbors","sortNodesByDistance","findCost","aStar","grid","startNode","finishNode","unvisitedNodes","visitedNodes","distance","cost","push","console","log","length","cheapestIndex","cheapestNode","i","splice"],"mappings":"AAAA,SAAQA,WAAR,EAAoBC,qBAApB,EAA0CC,mBAA1C,EAA8DC,QAA9D,QAA8E,aAA9E;AAGA,OAAO,SAASC,KAAT,CAAeC,IAAf,EAAqBC,SAArB,EAAgCC,UAAhC,EACP;AACI,MAAIC,cAAc,GAAC,EAAnB,CADJ,CAC0B;;AAEtB,MAAIC,YAAY,GAAC,EAAjB,CAHJ,CAGwB;;AACpBH,EAAAA,SAAS,CAACI,QAAV,GAAqB,CAArB;AACAJ,EAAAA,SAAS,CAACK,IAAV,GAAiB,CAAjB;AACAH,EAAAA,cAAc,CAACI,IAAf,CAAoBN,SAApB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYN,cAAc,CAACO,MAA3B;AACA,MAAIC,aAAa,GAAC,CAAlB;AAAA,MAAoBC,YAAY,GAACT,cAAc,CAAC,CAAD,CAA/C;;AAEA,SAAMA,cAAc,CAACO,MAAf,GAAsB,CAA5B,EAA+B;AAC/B;AACI,SAAI,IAAIG,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACV,cAAc,CAACO,MAA7B,EAAoCG,CAAC,EAArC,EAAyC;AACzC;AACI,UAAGV,cAAc,CAACU,CAAD,CAAd,CAAkBP,IAAlB,GAAuBM,YAAY,CAACN,IAAvC,EACA;AAEIK,QAAAA,aAAa,GAACE,CAAd;AACH;AACJ;;AAEDD,IAAAA,YAAY,GAACT,cAAc,CAACQ,aAAD,CAA3B;AACAR,IAAAA,cAAc,CAACW,MAAf,CAAsBH,aAAtB,EAAoC,CAApC,EAXJ,CAW2C;;AACvCH,IAAAA,OAAO,CAACC,GAAR,CAAYG,YAAZ;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYN,cAAZ;AAIH;AACJ","sourcesContent":["import {getAllNodes,getUnvisitedNeighbors,sortNodesByDistance,findCost } from \"./AlgoTools\";\r\n\r\n\r\nexport function aStar(grid, startNode, finishNode)\r\n{    \r\n    var unvisitedNodes=[] //step1\r\n\r\n    var visitedNodes=[] //step2\r\n    startNode.distance = 0; \r\n    startNode.cost = 0\r\n    unvisitedNodes.push(startNode)\r\n    console.log(unvisitedNodes.length)\r\n    var cheapestIndex=0,cheapestNode=unvisitedNodes[0]\r\n\r\n    while(unvisitedNodes.length>0) //step3\r\n    {\r\n        for(var i=0;i<unvisitedNodes.length;i++) //step3a\r\n        { \r\n            if(unvisitedNodes[i].cost<cheapestNode.cost)\r\n            { \r\n                \r\n                cheapestIndex=i\r\n            }\r\n        }\r\n       \r\n        cheapestNode=unvisitedNodes[cheapestIndex]\r\n        unvisitedNodes.splice(cheapestIndex,1) //step3b\r\n        console.log(cheapestNode)\r\n        console.log(unvisitedNodes)\r\n\r\n\r\n\r\n    }   \r\n}\r\n"]},"metadata":{},"sourceType":"module"}