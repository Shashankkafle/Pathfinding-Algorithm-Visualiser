{"ast":null,"code":"// import {updateUnvisitedNeighbors,getUnvisitedNeighbors} from './AlgoTools';\n// export function bfs(grid,startNode,finishNode) {\n//   const queue = [];\n//   startNode.isVisited = true;\n//   queue.push(startNode);\n//   const unvisitedNodes = getAllNodes(grid);\n//   while(queue.length > 0) {\n//     let currentNode = queue.shift();\n//     queue.push(currentNode);\n//     currentNode.isVisited = true;\n//     if(currentNode == finishNode) {\n//       return queue;\n//     }\n//     sortNodesByDistance(unvisitedNodes);\n//     let edges = unvisitedNodes.shift();\n//     for (let i = 0; i < edges.length; i++){\n//       let neighbor = edges[i];\n//       if(!neighbor.isVisited) {\n//         neighbor.isVisited = true;\n//         neighbor.previousNode = current;\n//         queue.push(neighbor);\n//       }\n//     }\n//     updateUnvisitedNeighbors(edges, grid);\n//   }\n// }\nexport function unweightedSearchAlgorithm(nodes, startNode, finishNode, boardArray, queue, name) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n\n  let structure = startNode;\n  let exploredNodes = {\n    startNode: true\n  };\n\n  while (structure.length) {\n    let currentNode = name === \"bfs\" ? structure.shift() : structure.pop();\n    queue.push(currentNode);\n    if (name === \"dfs\") exploredNodes[currentNode.id] = true;\n    currentNode.isVisited = true;\n\n    if (currentNode.id === finishNode) {\n      return queue;\n    }\n\n    let currentNeighbors = getNeighbors(currentNode.id, nodes, boardArray, name);\n    currentNeighbors.forEach(neighbor => {\n      if (!exploredNodes[neighbor]) {\n        if (name === \"bfs\") exploredNodes[neighbor] = true;\n        neighbor.previousNode = currentNode.id;\n        structure.push(neighbor);\n      }\n    });\n  }\n\n  return false;\n}\n\nfunction getNeighbors(id, nodes, boardArray, name) {\n  let coordinates = id.split(\"-\");\n  let x = parseInt(coordinates[0]);\n  let y = parseInt(coordinates[1]);\n  let neighbors = [];\n  let potentialNeighbor;\n\n  if (boardArray[x - 1] && boardArray[x - 1][y]) {\n    potentialNeighbor = `${(x - 1).toString()}-${y.toString()}`;\n\n    if (nodes[potentialNeighbor].isWall = false) {\n      if (name === \"bfs\") {\n        neighbors.push(potentialNeighbor);\n      } else {\n        neighbors.unshift(potentialNeighbor);\n      }\n    }\n  }\n\n  if (boardArray[x][y + 1]) {\n    potentialNeighbor = `${x.toString()}-${(y + 1).toString()}`;\n\n    if (nodes[potentialNeighbor].isWall = false) {\n      if (name === \"bfs\") {\n        neighbors.push(potentialNeighbor);\n      } else {\n        neighbors.unshift(potentialNeighbor);\n      }\n    }\n  }\n\n  if (boardArray[x + 1] && boardArray[x + 1][y]) {\n    potentialNeighbor = `${(x + 1).toString()}-${y.toString()}`;\n\n    if (nodes[potentialNeighbor].isWall = false) {\n      if (name === \"bfs\") {\n        neighbors.push(potentialNeighbor);\n      } else {\n        neighbors.unshift(potentialNeighbor);\n      }\n    }\n  }\n\n  if (boardArray[x][y - 1]) {\n    potentialNeighbor = `${x.toString()}-${(y - 1).toString()}`;\n\n    if (nodes[potentialNeighbor].isWall = false) {\n      if (name === \"bfs\") {\n        neighbors.push(potentialNeighbor);\n      } else {\n        neighbors.unshift(potentialNeighbor);\n      }\n    }\n  }\n\n  return neighbors;\n}","map":{"version":3,"sources":["E:/minor project/Pathfinding-Algorithm-visualiser/Minor_project/src/Algorithms/BFS.jsx"],"names":["unweightedSearchAlgorithm","nodes","startNode","finishNode","boardArray","queue","name","structure","exploredNodes","length","currentNode","shift","pop","push","id","isVisited","currentNeighbors","getNeighbors","forEach","neighbor","previousNode","coordinates","split","x","parseInt","y","neighbors","potentialNeighbor","toString","isWall","unshift"],"mappings":"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","sourcesContent":["// import {updateUnvisitedNeighbors,getUnvisitedNeighbors} from './AlgoTools';\r\n\r\n// export function bfs(grid,startNode,finishNode) {\r\n\r\n//   const queue = [];\r\n//   startNode.isVisited = true;\r\n//   queue.push(startNode);\r\n//   const unvisitedNodes = getAllNodes(grid);\r\n\r\n//   while(queue.length > 0) {\r\n//     let currentNode = queue.shift();\r\n//     queue.push(currentNode);\r\n//     currentNode.isVisited = true;\r\n//     if(currentNode == finishNode) {\r\n//       return queue;\r\n//     }\r\n//     sortNodesByDistance(unvisitedNodes);\r\n//     let edges = unvisitedNodes.shift();\r\n//     for (let i = 0; i < edges.length; i++){\r\n//       let neighbor = edges[i];\r\n//       if(!neighbor.isVisited) {\r\n//         neighbor.isVisited = true;\r\n//         neighbor.previousNode = current;\r\n//         queue.push(neighbor);\r\n//       }\r\n//     }\r\n//     updateUnvisitedNeighbors(edges, grid);\r\n//   }\r\n// }\r\n\r\nexport function unweightedSearchAlgorithm(nodes, startNode, finishNode, boardArray, queue, name) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let structure = startNode;\r\n  let exploredNodes = {startNode: true};\r\n  while (structure.length) {\r\n    let currentNode = name === \"bfs\" ? structure.shift() : structure.pop();\r\n    queue.push(currentNode);\r\n    if (name === \"dfs\") exploredNodes[currentNode.id] = true;\r\n    currentNode.isVisited = true;\r\n    if (currentNode.id === finishNode) {\r\n      return queue;\r\n    }\r\n    let currentNeighbors = getNeighbors(currentNode.id, nodes, boardArray, name);\r\n    currentNeighbors.forEach(neighbor => {\r\n      if (!exploredNodes[neighbor]) {\r\n        if (name === \"bfs\") exploredNodes[neighbor] = true;\r\n        neighbor.previousNode = currentNode.id;\r\n        structure.push(neighbor);\r\n      }\r\n    });\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction getNeighbors(id, nodes, boardArray, name) {\r\n  let coordinates = id.split(\"-\");\r\n  let x = parseInt(coordinates[0]);\r\n  let y = parseInt(coordinates[1]);\r\n  let neighbors = [];\r\n  let potentialNeighbor;\r\n  if (boardArray[x - 1] && boardArray[x - 1][y]) {\r\n    potentialNeighbor = `${(x - 1).toString()}-${y.toString()}`\r\n    if (nodes[potentialNeighbor].isWall = false) {\r\n      if (name === \"bfs\") {\r\n        neighbors.push(potentialNeighbor);\r\n      } else {\r\n        neighbors.unshift(potentialNeighbor);\r\n      }\r\n    }\r\n  }\r\n  if (boardArray[x][y + 1]) {\r\n    potentialNeighbor = `${x.toString()}-${(y + 1).toString()}`\r\n    if (nodes[potentialNeighbor].isWall = false) {\r\n      if (name === \"bfs\") {\r\n        neighbors.push(potentialNeighbor);\r\n      } else {\r\n        neighbors.unshift(potentialNeighbor);\r\n      }\r\n    }\r\n  }\r\n  if (boardArray[x + 1] && boardArray[x + 1][y]) {\r\n    potentialNeighbor = `${(x + 1).toString()}-${y.toString()}`\r\n    if (nodes[potentialNeighbor].isWall = false) {\r\n      if (name === \"bfs\") {\r\n        neighbors.push(potentialNeighbor);\r\n      } else {\r\n        neighbors.unshift(potentialNeighbor);\r\n      }\r\n    }\r\n  }\r\n  if (boardArray[x][y - 1]) {\r\n    potentialNeighbor = `${x.toString()}-${(y - 1).toString()}`\r\n    if (nodes[potentialNeighbor].isWall = false) {\r\n      if (name === \"bfs\") {\r\n        neighbors.push(potentialNeighbor);\r\n      } else {\r\n        neighbors.unshift(potentialNeighbor);\r\n      }\r\n    }\r\n  }\r\n  return neighbors;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}