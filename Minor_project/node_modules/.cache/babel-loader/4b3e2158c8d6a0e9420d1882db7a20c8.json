{"ast":null,"code":"export function generateWall1(grid){var newGrid=grid;for(var i=0;i<newGrid.length;i++){for(var j=0;j<newGrid[i].length;j++){if(Math.random()<0.1){newGrid[i][j].isWall=true;}}}return newGrid;}export function generateWall2(grid){var newGrid=grid;for(var i=0;i<grid.length;i++){for(var j=0;j<newGrid[i].length;j++){if(Math.random()<0.2){newGrid[i][j].isWall=true;}}}return newGrid;}export function generateWall3(grid){var newGrid=grid;for(var i=0;i<newGrid.length;i++){for(var j=0;j<grid[i].length;j++){if(Math.random()<0.3){newGrid[i][j].isWall=true;}}}return newGrid;}","map":{"version":3,"sources":["C:/Users/Acer/Pathfinding-Algorithm-Visualiser/minor_project/src/obstacles/RandomWalls.jsx"],"names":["generateWall1","grid","newGrid","i","length","j","Math","random","isWall","generateWall2","generateWall3"],"mappings":"AAAE,MAAQ,SAASA,CAAAA,aAAT,CAAuBC,IAAvB,CACR,CACE,GAAMC,CAAAA,OAAO,CAACD,IAAd,CACA,IAAI,GAAIE,CAAAA,CAAC,CAAC,CAAV,CAAYA,CAAC,CAACD,OAAO,CAACE,MAAtB,CAA6BD,CAAC,EAA9B,CACA,CACE,IAAI,GAAIE,CAAAA,CAAC,CAAC,CAAV,CAAYA,CAAC,CAACH,OAAO,CAACC,CAAD,CAAP,CAAWC,MAAzB,CAAgCC,CAAC,EAAjC,CACA,CACE,GAAIC,IAAI,CAACC,MAAL,EAAD,CAAgB,GAAnB,CACA,CACEL,OAAO,CAACC,CAAD,CAAP,CAAWE,CAAX,EAAcG,MAAd,CAAsB,IAAtB,CACD,CAEF,CACF,CACF,MAAON,CAAAA,OAAP,CACA,CAED,MAAQ,SAASO,CAAAA,aAAT,CAAuBR,IAAvB,CACR,CACE,GAAMC,CAAAA,OAAO,CAACD,IAAd,CACA,IAAI,GAAIE,CAAAA,CAAC,CAAC,CAAV,CAAYA,CAAC,CAACF,IAAI,CAACG,MAAnB,CAA0BD,CAAC,EAA3B,CACA,CACE,IAAI,GAAIE,CAAAA,CAAC,CAAC,CAAV,CAAYA,CAAC,CAACH,OAAO,CAACC,CAAD,CAAP,CAAWC,MAAzB,CAAgCC,CAAC,EAAjC,CACA,CACE,GAAIC,IAAI,CAACC,MAAL,EAAD,CAAgB,GAAnB,CACA,CACEL,OAAO,CAACC,CAAD,CAAP,CAAWE,CAAX,EAAcG,MAAd,CAAsB,IAAtB,CACD,CACF,CACF,CACF,MAAON,CAAAA,OAAP,CACA,CAED,MAAQ,SAASQ,CAAAA,aAAT,CAAuBT,IAAvB,CACR,CACE,GAAMC,CAAAA,OAAO,CAACD,IAAd,CACA,IAAI,GAAIE,CAAAA,CAAC,CAAC,CAAV,CAAYA,CAAC,CAACD,OAAO,CAACE,MAAtB,CAA6BD,CAAC,EAA9B,CACA,CACE,IAAI,GAAIE,CAAAA,CAAC,CAAC,CAAV,CAAYA,CAAC,CAACJ,IAAI,CAACE,CAAD,CAAJ,CAAQC,MAAtB,CAA6BC,CAAC,EAA9B,CACA,CACE,GAAIC,IAAI,CAACC,MAAL,EAAD,CAAgB,GAAnB,CACA,CACEL,OAAO,CAACC,CAAD,CAAP,CAAWE,CAAX,EAAcG,MAAd,CAAsB,IAAtB,CACD,CACF,CACF,CACF,MAAON,CAAAA,OAAP,CACA","sourcesContent":["  export  function generateWall1(grid)\r\n  {\r\n    const newGrid=grid\r\n    for(var i=0;i<newGrid.length;i++)\r\n    {\r\n      for(var j=0;j<newGrid[i].length;j++)\r\n      {\r\n        if((Math.random())<0.1)\r\n        {\r\n          newGrid[i][j].isWall= true\r\n        }\r\n        \r\n      }\r\n    }\r\n   return newGrid\r\n  }\r\n  \r\n  export  function generateWall2(grid)\r\n  {\r\n    const newGrid=grid\r\n    for(var i=0;i<grid.length;i++)\r\n    {\r\n      for(var j=0;j<newGrid[i].length;j++)\r\n      {\r\n        if((Math.random())<0.2)\r\n        {\r\n          newGrid[i][j].isWall= true\r\n        }\r\n      }\r\n    }\r\n   return newGrid\r\n  }\r\n\r\n  export  function generateWall3(grid)\r\n  {\r\n    const newGrid=grid\r\n    for(var i=0;i<newGrid.length;i++)\r\n    {\r\n      for(var j=0;j<grid[i].length;j++)\r\n      {\r\n        if((Math.random())<0.3)\r\n        {\r\n          newGrid[i][j].isWall= true\r\n        }\r\n      }\r\n    }\r\n   return newGrid\r\n  }"]},"metadata":{},"sourceType":"module"}