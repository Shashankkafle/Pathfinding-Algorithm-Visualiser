{"ast":null,"code":"export function getAllNodes(grid) {\n  const nodes = [];\n\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      nodes.push(grid[i][j]);\n    }\n  }\n\n  return nodes;\n}\nexport function getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n\n  if (row > 0) {\n    neighbors.push(grid[row - 1][col]);\n  }\n\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\nexport function updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n    console.log('neighbor');\n    console.log(neighbor);\n    console.log('previousnode');\n    console.log(previousNode);\n  }\n}\nexport function updateUnvisitedNeighborsforastar(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.previousNode = node;\n  }\n\n  return unvisitedNeighbors;\n}\nexport function getNodesInShortestPathOrder(finishNode) {\n  console.log('get it bro');\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}\nexport function sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\nexport function findCost(node, finishNode) {\n  node.heruistic = getManhattan(node, finishNode);\n  node.cost = node.distance + node.heruistic;\n}\n\nfunction getManhattan(node, finishNode) {\n  return Math.abs(finishNode.col - node.col) + Math.abs(finishNode.row - node.row);\n}","map":{"version":3,"sources":["C:/Users/Acer/Pathfinding-Algorithm-Visualiser/Minor_project/src/Algorithms/AlgoTools.jsx"],"names":["getAllNodes","grid","nodes","i","length","j","push","getUnvisitedNeighbors","node","neighbors","col","row","filter","neighbor","isVisited","updateUnvisitedNeighbors","unvisitedNeighbors","distance","previousNode","console","log","updateUnvisitedNeighborsforastar","getNodesInShortestPathOrder","finishNode","nodesInShortestPathOrder","currentNode","unshift","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","findCost","heruistic","getManhattan","cost","Math","abs"],"mappings":"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","sourcesContent":[" \r\n  export function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (var i=0;i<grid.length;i++) {\r\n      for (var j=0;j<(grid[i].length);j++) {\r\n        nodes.push(grid[i][j]);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n  export function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) {neighbors.push(grid[row - 1][col]); }\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n \r\n  export function updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.previousNode = node;\r\n      console.log('neighbor')\r\n      console.log(neighbor)\r\n      console.log('previousnode')\r\n      console.log(previousNode)\r\n\r\n    }\r\n  }\r\n  export function updateUnvisitedNeighborsforastar(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      \r\n      neighbor.previousNode = node;\r\n    }\r\n    return unvisitedNeighbors\r\n  }\r\n  export function getNodesInShortestPathOrder(finishNode) {\r\n    console.log('get it bro')\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n  return nodesInShortestPathOrder;\r\n}\r\nexport function sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\nexport function findCost(node,finishNode)\r\n{\r\n  node.heruistic=getManhattan(node,finishNode)\r\n    node.cost=node.distance+ node.heruistic\r\n    \r\n  \r\n}\r\nfunction getManhattan(node,finishNode)\r\n{\r\n  return(Math.abs(finishNode.col-node.col)+Math.abs(finishNode.row-node.row))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}