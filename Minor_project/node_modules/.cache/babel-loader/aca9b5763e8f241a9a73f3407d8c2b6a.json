{"ast":null,"code":"export function dfs(grid, startNode, finishNode) {\n  const queue = [];\n  queue.push(startNode);\n\n  while (queue.length > 0) {\n    let currentNode;\n    currentNode = queue.pop(); //   if(currentNode.isWall) continue;\n    //  queue.push(currentNode);\n\n    currentNode.isVisited = true;\n    if (currentNode.isWall) continue;\n\n    if (currentNode === finishNode) {\n      return queue;\n    } // console.log('currentNode')\n    // console.log(currentNode)\n\n\n    let edges = getUnvisitedNeighbors(currentNode, grid); /////console.log('edges')\n    ////console.log(edges)\n\n    for (let i = 0; i < edges.length; i++) {\n      let neighbor = edges[i];\n\n      if (!neighbor.isVisited) {\n        //neighbor.isVisited = true;\n        if (neighbor.isWall) continue;\n        neighbor.previousNode = currentNode;\n        queue.push(neighbor);\n      }\n    }\n  }\n\n  return queue;\n}\n\nfunction getUnvisitedNeighbors(grid, node) {\n  const ROWS = grid.length;\n  const COLS = grid[0].length;\n  const {\n    row,\n    col\n  } = node;\n  const neighbors = [];\n\n  if (row + 1 >= 0 && row + 1 < ROWS && col >= 0 && col < COLS && !grid[row + 1][col].isVisited && !grid[row + 1][col].isWall) {\n    neighbors.push(grid[row + 1][col]);\n  }\n\n  if (row - 1 >= 0 && row - 1 < ROWS && col >= 0 && col < COLS && !grid[row - 1][col].isWall && !grid[row - 1][col].isVisited) {\n    neighbors.push(grid[row - 1][col]);\n  }\n\n  if (row >= 0 && row < ROWS && col - 1 >= 0 && col - 1 < COLS && !grid[row][col - 1].isWall && !grid[row][col - 1].isVisited) {\n    neighbors.push(grid[row][col - 1]);\n  }\n\n  if (row >= 0 && row < ROWS && col + 1 >= 0 && col + 1 < COLS && !grid[row][col + 1].isWall && !grid[row][col + 1].isVisited) {\n    neighbors.push(grid[row][col + 1]);\n  }\n\n  return neighbors;\n} // function getUnvisitedNeighbors(node, grid) {\n//     const neighbors = [];\n//     const {col, row} = node;\n//     if (row > 0) {\n//         //console.log(0)\n//         neighbors.unshift(grid[row - 1][col]);\n//     }//up\n//     if (col < grid[0].length - 1) {\n//         //console.log(3)\n//         neighbors.unshift(grid[row][col + 1]);\n//     }//right\n//     if (row < grid.length - 1) {\n//       // console.log(1)\n//        neighbors.unshift(grid[row + 1][col]);\n//     }//down \n//     if (col > 0) {\n//         ////console.log(2)\n//         neighbors.unshift(grid[row][col - 1]);\n//     }//left \n//     return neighbors.filter(neighbor => !neighbor.isVisited);\n// }","map":{"version":3,"sources":["E:/Pathfinding-Algorithm-Visualiser/Minor_project/src/Algorithms/DFS.jsx"],"names":["dfs","grid","startNode","finishNode","queue","push","length","currentNode","pop","isVisited","isWall","edges","getUnvisitedNeighbors","i","neighbor","previousNode","node","ROWS","COLS","row","col","neighbors"],"mappings":"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","sourcesContent":["export function dfs(grid,startNode,finishNode) {\r\n\r\n    const queue = [];\r\n    queue.push(startNode);\r\n    while(queue.length > 0) {\r\n      let currentNode;\r\n      currentNode = queue.pop();\r\n    //   if(currentNode.isWall) continue;\r\n    //  queue.push(currentNode);\r\n      currentNode.isVisited = true;\r\n      if(currentNode.isWall) continue;\r\n      if(currentNode === finishNode) {\r\n        return queue;\r\n      }\r\n     // console.log('currentNode')\r\n     // console.log(currentNode)\r\n      let edges = getUnvisitedNeighbors(currentNode, grid);\r\n      /////console.log('edges')\r\n      ////console.log(edges)\r\n      for (let i = 0; i < edges.length; i++){\r\n        let neighbor = edges[i];\r\n        if(!neighbor.isVisited) {\r\n        //neighbor.isVisited = true;\r\n          if(neighbor.isWall) continue;\r\n          neighbor.previousNode = currentNode;\r\n          queue.push(neighbor);    \r\n        }\r\n      } \r\n    }\r\n    return queue;\r\n}\r\nfunction getUnvisitedNeighbors(grid, node) {\r\n  const ROWS = grid.length;\r\n  const COLS = grid[0].length;\r\n\r\n  const { row, col } = node;\r\n  const neighbors = [];\r\n\r\n  if (\r\n      row + 1 >= 0 &&\r\n      row + 1 < ROWS &&\r\n      col >= 0 &&\r\n      col < COLS &&\r\n      !grid[row + 1][col].isVisited &&\r\n      !grid[row + 1][col].isWall\r\n  ) {\r\n      neighbors.push(grid[row + 1][col]);\r\n  }\r\n  if (\r\n      row - 1 >= 0 &&\r\n      row - 1 < ROWS &&\r\n      col >= 0 &&\r\n      col < COLS &&\r\n      !grid[row - 1][col].isWall &&\r\n      !grid[row - 1][col].isVisited\r\n  ) {\r\n      neighbors.push(grid[row - 1][col]);\r\n  }\r\n  if (\r\n      row >= 0 &&\r\n      row < ROWS &&\r\n      col - 1 >= 0 &&\r\n      col - 1 < COLS &&\r\n      !grid[row][col - 1].isWall &&\r\n      !grid[row][col - 1].isVisited\r\n  ) {\r\n      neighbors.push(grid[row][col - 1]);\r\n  }\r\n  if (\r\n      row >= 0 &&\r\n      row < ROWS &&\r\n      col + 1 >= 0 &&\r\n      col + 1 < COLS &&\r\n      !grid[row][col + 1].isWall &&\r\n      !grid[row][col + 1].isVisited\r\n  ) {\r\n      neighbors.push(grid[row][col + 1]);\r\n  }\r\n\r\n  return neighbors;\r\n}\r\n// function getUnvisitedNeighbors(node, grid) {\r\n//     const neighbors = [];\r\n//     const {col, row} = node;\r\n  \r\n//     if (row > 0) {\r\n//         //console.log(0)\r\n//         neighbors.unshift(grid[row - 1][col]);\r\n//     }//up\r\n//     if (col < grid[0].length - 1) {\r\n//         //console.log(3)\r\n//         neighbors.unshift(grid[row][col + 1]);\r\n//     }//right\r\n//     if (row < grid.length - 1) {\r\n//       // console.log(1)\r\n//        neighbors.unshift(grid[row + 1][col]);\r\n//     }//down \r\n//     if (col > 0) {\r\n//         ////console.log(2)\r\n//         neighbors.unshift(grid[row][col - 1]);\r\n//     }//left \r\n//     return neighbors.filter(neighbor => !neighbor.isVisited);\r\n// }\r\n                          \r\n  "]},"metadata":{},"sourceType":"module"}