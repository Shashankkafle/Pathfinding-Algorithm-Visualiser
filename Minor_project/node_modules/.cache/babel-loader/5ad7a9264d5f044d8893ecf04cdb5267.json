{"ast":null,"code":"import { getAllNodes, updateUnvisitedNeighbors, sortNodesByDistance } from \"./AlgoTools\";\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}","map":{"version":3,"sources":["/Users/sankalpapokhrel/Documents/Pathfinding-Algorithm-Visualiser/Minor_project/src/Algorithms/Dijkstras.jsx"],"names":["getAllNodes","updateUnvisitedNeighbors","sortNodesByDistance","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","length","closestNode","shift","isWall","Infinity","isVisited","push"],"mappings":"AAAA,SACEA,WADF,EAEEC,wBAFF,EAGEC,mBAHF,QAIO,aAJP;AAMA,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,SAAxB,EAAmCC,UAAnC,EAA+C;AACpD,QAAMC,mBAAmB,GAAG,EAA5B;AACAF,EAAAA,SAAS,CAACG,QAAV,GAAqB,CAArB;AACA,QAAMC,cAAc,GAAGT,WAAW,CAACI,IAAD,CAAlC;;AACA,SAAO,CAAC,CAACK,cAAc,CAACC,MAAxB,EAAgC;AAC9BR,IAAAA,mBAAmB,CAACO,cAAD,CAAnB;AACA,UAAME,WAAW,GAAGF,cAAc,CAACG,KAAf,EAApB;AACA,QAAID,WAAW,CAACE,MAAhB,EAAwB;AACxB,QAAIF,WAAW,CAACH,QAAZ,KAAyBM,QAA7B,EAAuC,OAAOP,mBAAP;AACvCI,IAAAA,WAAW,CAACI,SAAZ,GAAwB,IAAxB;AACAR,IAAAA,mBAAmB,CAACS,IAApB,CAAyBL,WAAzB;AACA,QAAIA,WAAW,KAAKL,UAApB,EAAgC,OAAOC,mBAAP;AAChCN,IAAAA,wBAAwB,CAACU,WAAD,EAAcP,IAAd,CAAxB;AACD;AACF","sourcesContent":["import {\n  getAllNodes,\n  updateUnvisitedNeighbors,\n  sortNodesByDistance,\n} from \"./AlgoTools\";\n\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}