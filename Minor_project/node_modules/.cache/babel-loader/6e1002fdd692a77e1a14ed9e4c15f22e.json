{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Pathfinding-Algorithm-Visualiser\\\\Minor_project\\\\src\\\\Grid.jsx\";\nimport React from 'react';\nimport { Component } from 'react';\nimport Node from './Node.jsx';\nimport './grid.css';\nimport { getAllNodes, getNodesInShortestPathOrder } from './Algorithms/AlgoTools';\nimport { dijkstra } from './Algorithms/Dijkstras';\nimport { aStar } from './Algorithms/Astar';\nimport { generateWall1, generateWall2, generateWall3 } from './obstacles/RandomWalls';\nimport { createMaze } from './obstacles/Maze';\nimport { unweightedSearchAlgorithm } from './Algorithms/BFS';\nexport default class Grid extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      currentAlgorithm: []\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    getAllNodes(grid);\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  clearGrid() {\n    const {\n      grid\n    } = this.state;\n\n    for (var i = 0; i < grid.length; i++) {\n      for (var j = 0; j < grid[i].length; j++) {\n        grid[i][j].isVisited = false;\n        if (!grid[i][j].isStart && !grid[i][j].isFinish && !grid[i][j].isWall) document.getElementById(`node-${grid[i][j].row}-${grid[i][j].col}`).className = 'node ';\n      }\n    }\n  }\n\n  showPerofrmence(algo, time, numberOfVisited, lengthOfSHortestPath) {}\n\n  animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 20 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n\n        if (!(visitedNodesInOrder[i].isStart || visitedNodesInOrder[i].isFinish)) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n        }\n      }, 20 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    console.log(nodesInShortestPathOrder);\n\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n\n        if (!(nodesInShortestPathOrder[i].isStart || nodesInShortestPathOrder[i].isFinish)) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n        }\n      }, 30 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[10][15];\n    const finishNode = grid[10][35];\n    var t0 = performance.now();\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    var t1 = performance.now();\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    console.log(nodesInShortestPathOrder);\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    this.showPerofrmence('dijkstras', t1 - t0, visitedNodesInOrder.length, nodesInShortestPathOrder.length);\n  }\n\n  visualizeAstar() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[10][15];\n    const finishNode = grid[10][35];\n    var t0 = performance.now();\n    const visitedNodesInOrder = aStar(grid, startNode, finishNode);\n    var t1 = performance.now();\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    console.log(nodesInShortestPathOrder);\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    this.showPerofrmence('astar', t1 - t0, visitedNodesInOrder.length, nodesInShortestPathOrder.length);\n  }\n\n  visualizeBfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[10][15];\n    const finishNode = grid[10][35];\n    var t0 = performance.now();\n    const visitedNodesInOrder = unweightedSearchAlgorithm(grid, startNode, finishNode, 'bfs');\n    var t1 = performance.now();\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    console.log(nodesInShortestPathOrder);\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    this.showPerofrmence('bfs', t1 - t0, visitedNodesInOrder.length, nodesInShortestPathOrder.length);\n  }\n\n  selectionfunction(algo) {\n    const {\n      currentAlgorithm\n    } = this.state;\n\n    if (!currentAlgorithm.includes(algo)) {\n      currentAlgorithm.push(algo);\n    }\n\n    console.log(currentAlgorithm);\n  }\n\n  startVisualization() {\n    const {\n      currentAlgorithm\n    } = this.state;\n    console.log(currentAlgorithm);\n    let count = currentAlgorithm.length;\n\n    for (var i = 0; i < count; i++) {\n      var algo = currentAlgorithm.pop();\n\n      if (algo == 'dijsktras') {\n        console.log('dijkstras');\n        this.visualizeDijkstra();\n        setTimeout(() => {\n          this.clearGrid();\n        }, 20 * i);\n        this.clearGrid();\n      }\n\n      if (algo == 'astar') {\n        console.log('astar');\n        this.visualizeAstar();\n        this.clearGrid();\n      }\n\n      if (algo == 'bfs') {\n        console.log('bfs');\n        this.visualizeBfs();\n        this.clearGrid();\n      }\n    }\n  } // visualizeDfs() {\n  //   console.log('iwasclicked');\n  //   const {grid} = this.state;\n  //   const startNode = grid[10][15];\n  //   const finishNode = grid[10][35];\n  //   const visitedNodesInOrder =  unweightedSearchAlgorithm(grid, startNode, finishNode,'dfs');\n  //   const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n  //   this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);  \n  // }\n\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"navBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"http://localhost:3000/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }\n    }, \"  \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 44\n      }\n    }, \" Pathfinding Visualizer \")), /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }\n    }, \"  \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.startVisualization(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 14\n      }\n    }, \" Start Visualization \")), /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }\n    }, \"  \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.clearGrid(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 14\n      }\n    }, \" Clear Grid \")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dropDown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 2\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"dropBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 38\n      }\n    }, \" Algorithms \")), /*#__PURE__*/React.createElement(\"select\", {\n      className: \"dropdown-algo\",\n      id: \"dropdown-algo\",\n      multiple: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      onClick: () => this.selectionfunction('dijsktras'),\n      id: \"dijsktras\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }\n    }, \" Dijkstra's algorithm \"), /*#__PURE__*/React.createElement(\"option\", {\n      onClick: () => this.selectionfunction('astar'),\n      id: \"astar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }\n    }, \"  Astar algorithm  \"), /*#__PURE__*/React.createElement(\"option\", {\n      onClick: () => this.selectionfunction('bfs'),\n      id: \"bfs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }\n    }, \"  Bfs algorithm  \"), /*#__PURE__*/React.createElement(\"option\", {\n      onClick: () => this.selectionfunction('dfs'),\n      id: \"dfs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 11\n      }\n    }, \"  Dfs algorithm   \"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"wall\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"dropWall\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 35\n      }\n    }, \" Wall \"), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dropdown-wall\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => {\n        const {\n          grid\n        } = this.state;\n        const newGrid = generateWall1(grid);\n        this.setState({\n          grid: newGrid\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }\n    }, \"  \", /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 16\n      }\n    }, \" Level 1\"), \" \"), /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => {\n        const {\n          grid\n        } = this.state;\n        const newGrid = generateWall2(grid);\n        this.setState({\n          grid: newGrid\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 12\n      }\n    }, \"  \", /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 16\n      }\n    }, \" Level 2\"), \" \"), /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => {\n        const {\n          grid\n        } = this.state;\n        const newGrid = generateWall3(grid);\n        this.setState({\n          grid: newGrid\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 12\n      }\n    }, \"  \", /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 16\n      }\n    }, \" Level 3\"), \" \"), /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => {\n        const {\n          grid\n        } = this.state;\n        const newGrid = createMaze(grid);\n        this.setState({\n          grid: newGrid\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 13\n      }\n    }, \"  \", /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 16\n      }\n    }, \" Generate Maze\"), \" \"))), /*#__PURE__*/React.createElement(\"a\", {\n      href: \"http://localhost:3000/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 8\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 42\n      }\n    }, \" Reset\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 7\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isFinish,\n          isStart,\n          isWall\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 19\n          }\n        });\n      }));\n    })));\n  }\n\n}\n;\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const temp = [];\n\n    for (let col = 0; col < 50; col++) {\n      temp.push(createNode(col, row));\n    }\n\n    grid.push(temp);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === 10 && col === 15,\n    isFinish: row === 10 && col === 35,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["C:/Users/Acer/Pathfinding-Algorithm-Visualiser/Minor_project/src/Grid.jsx"],"names":["React","Component","Node","getAllNodes","getNodesInShortestPathOrder","dijkstra","aStar","generateWall1","generateWall2","generateWall3","createMaze","unweightedSearchAlgorithm","Grid","constructor","state","grid","mouseIsPressed","currentAlgorithm","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","clearGrid","i","length","j","isVisited","isStart","isFinish","isWall","document","getElementById","className","showPerofrmence","algo","time","numberOfVisited","lengthOfSHortestPath","animateAlgorithm","visitedNodesInOrder","nodesInShortestPathOrder","setTimeout","animateShortestPath","node","console","log","visualizeDijkstra","startNode","finishNode","t0","performance","now","t1","visualizeAstar","visualizeBfs","selectionfunction","includes","push","startVisualization","count","pop","render","map","rowIdx","nodeIdx","temp","createNode","distance","Infinity","previousNode","slice","newNode"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Component } from 'react'\r\nimport Node from './Node.jsx'\r\nimport './grid.css'\r\nimport {getAllNodes, getNodesInShortestPathOrder} from './Algorithms/AlgoTools'\r\nimport {dijkstra} from './Algorithms/Dijkstras';\r\nimport {aStar} from './Algorithms/Astar';\r\nimport {generateWall1,generateWall2,generateWall3} from './obstacles/RandomWalls'\r\nimport {createMaze} from './obstacles/Maze'\r\nimport {unweightedSearchAlgorithm} from './Algorithms/BFS';\r\n\r\nexport default class Grid extends Component\r\n{\r\n  constructor() \r\n    {\r\n        super();\r\n        this.state = {\r\n          grid: [],\r\n          mouseIsPressed: false,\r\n          currentAlgorithm: [],\r\n        };\r\n    } \r\n   \r\n   \r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    getAllNodes(grid)\r\n    this.setState({grid});\r\n  }\r\n    \r\n    \r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n  clearGrid(){\r\n    const {grid}=this.state    \r\n    for(var i=0;i<grid.length;i++){\r\n      for(var j=0;j<grid[i].length;j++){\r\n            \r\n        grid[i][j].isVisited=false\r\n        if((!grid[i][j].isStart)&&(!grid[i][j].isFinish)&&(!grid[i][j].isWall))\r\n        document.getElementById(`node-${grid[i][j].row}-${grid[i][j].col}`).className =\r\n        'node ';\r\n      }\r\n    }\r\n  }\r\n  showPerofrmence(algo,time,numberOfVisited,lengthOfSHortestPath){\r\n\r\n  }\r\n\r\n  animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    \r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 20 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        if(!(visitedNodesInOrder[i].isStart||visitedNodesInOrder[i].isFinish))\r\n        {\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n        }\r\n      }, 20 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {console.log(nodesInShortestPathOrder)\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) \r\n    {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        if(!(nodesInShortestPathOrder[i].isStart||nodesInShortestPathOrder[i].isFinish))\r\n        {\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n        } \r\n      }, 30 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n   \r\n    const {grid} = this.state;\r\n    const startNode = grid[10][15];\r\n    const finishNode = grid[10][35];\r\n    var t0=performance.now()\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    var t1=performance.now()\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    console.log(nodesInShortestPathOrder)\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    this.showPerofrmence('dijkstras',t1-t0,visitedNodesInOrder.length,nodesInShortestPathOrder.length)\r\n  }\r\n  visualizeAstar() {\r\n   \r\n    const {grid} = this.state;\r\n    const startNode = grid[10][15];\r\n    const finishNode = grid[10][35];\r\n    var t0=performance.now()\r\n    const visitedNodesInOrder = aStar(grid, startNode, finishNode);\r\n    var t1=performance.now()\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    console.log(nodesInShortestPathOrder)\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    this.showPerofrmence('astar',t1-t0,visitedNodesInOrder.length,nodesInShortestPathOrder.length)\r\n  }\r\n\r\n\r\n  visualizeBfs() {\r\n    \r\n    const {grid} = this.state;\r\n    const startNode = grid[10][15];\r\n    const finishNode = grid[10][35];\r\n    var t0=performance.now()\r\n    const visitedNodesInOrder =  unweightedSearchAlgorithm(grid, startNode, finishNode,'bfs');\r\n    var t1=performance.now()\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    console.log(nodesInShortestPathOrder)\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);  \r\n    this.showPerofrmence('bfs',t1-t0,visitedNodesInOrder.length,nodesInShortestPathOrder.length)\r\n  }\r\n  selectionfunction(algo){\r\n    const {currentAlgorithm}= this.state\r\n    if(!currentAlgorithm.includes(algo)){\r\n    currentAlgorithm.push(algo)\r\n   }\r\n    console.log(currentAlgorithm)\r\n  }\r\n  startVisualization(){\r\n    const {currentAlgorithm}= this.state\r\n    console.log(currentAlgorithm)\r\n    let count=currentAlgorithm.length\r\n    for(var i=0;i<count;i++){\r\n      var algo=currentAlgorithm.pop()\r\n      \r\n     \r\n      if(algo=='dijsktras'){\r\n        console.log('dijkstras')\r\n        this.visualizeDijkstra()\r\n        setTimeout(() => {\r\n          this.clearGrid()\r\n        }, 20 * i);\r\n        this.clearGrid()\r\n      }\r\n      if(algo=='astar'){\r\n        console.log('astar')\r\n        this.visualizeAstar()\r\n        this.clearGrid()\r\n      }\r\n      if(algo=='bfs'){\r\n        console.log('bfs')\r\n        this.visualizeBfs()\r\n        this.clearGrid()\r\n      }\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n  // visualizeDfs() {\r\n  //   console.log('iwasclicked');\r\n  //   const {grid} = this.state;\r\n  //   const startNode = grid[10][15];\r\n  //   const finishNode = grid[10][35];\r\n  //   const visitedNodesInOrder =  unweightedSearchAlgorithm(grid, startNode, finishNode,'dfs');\r\n  //   const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n  //   this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);  \r\n  // }\r\n\r\n  render() {\r\n    \r\n    const {grid, mouseIsPressed} = this.state;\r\n    \r\n    return (\r\n      <>\r\n      <div className=\"navBar\">\r\n        <a href=\"http://localhost:3000/\">  <b> Pathfinding Visualizer </b></a>\r\n        <a>  <button onClick={()=>this.startVisualization()}> Start Visualization </button></a>\r\n        <a>  <button onClick={()=>this.clearGrid()}> Clear Grid </button></a>\r\n        \r\n        {/* <div className=\"dropDown\"> \r\n          <a className=\"dropBtn\"><b> Algorithms </b></a>\r\n          <div className=\"dropdown-algo\">\r\n          <a onClick={() => this.visualizeDijkstra()}> <a> Dijkstra's algorithm</a> </a>\r\n          <a onClick={() => this.visualizeAstar()}> <a> Astar algorithm</a> </a>\r\n          <a onClick={() => this.visualizeBfs()}> <a> Bfs algorithm</a> </a>\r\n          <a onClick={() => this.visualizeDfs()}> <a> Dfs algorithm</a> </a>\r\n          </div> \r\n        </div> \r\n     */}\r\n\r\n      \r\n\r\n\t<div className=\"dropDown\"> \r\n          <label className=\"dropBtn\"><b> Algorithms </b></label>\r\n          \r\n          \r\n          <select className=\"dropdown-algo\" id=\"dropdown-algo\" multiple>\r\n          <option onClick={()=>this.selectionfunction('dijsktras')} id='dijsktras'> Dijkstra's algorithm </option> \r\n          <option  onClick={()=>this.selectionfunction('astar')} id='astar'>  Astar algorithm  </option>\r\n          <option  onClick={()=>this.selectionfunction('bfs') }id='bfs'>  Bfs algorithm  </option>\r\n          <option  onClick={()=>this.selectionfunction('dfs')} id='dfs'>  Dfs algorithm   </option>\r\n          </select> \r\n        </div>\r\n\r\n\r\n\r\n      \r\n        <div className=\"wall\"> \r\n          <a className=\"dropWall\"><b> Wall </b> </a>\r\n          <div className=\"dropdown-wall\">\r\n            <a onClick=\r\n                        {() => \r\n                              { const {grid} = this.state;\r\n                                const newGrid=generateWall1(grid)\r\n                                this.setState({grid: newGrid})\r\n                              }\r\n                        }\r\n            >  <a> Level 1</a> </a> \r\n           <a onClick=\r\n                        {() => \r\n                              {\r\n                                const {grid} = this.state;\r\n                                const newGrid=generateWall2(grid)\r\n                                this.setState({grid: newGrid})\r\n                              }\r\n                        }\r\n            >  <a> Level 2</a> </a> \r\n           <a onClick=\r\n                        {() => \r\n                              {\r\n                                const {grid} = this.state;\r\n                                const newGrid=generateWall3(grid)\r\n                                this.setState({grid: newGrid})\r\n                              }\r\n                        }\r\n            >  <a> Level 3</a> </a> \r\n            <a onClick=\r\n              {()=>\r\n                  {const {grid} = this.state;\r\n                  const newGrid=createMaze(grid)\r\n                  this.setState({grid: newGrid})\r\n                  \r\n                  }\r\n              }\r\n            >  <a> Generate Maze</a> </a>\r\n          </div> \r\n        </div>\r\n       <a href=\"http://localhost:3000/\"> <b> Reset</b></a>\r\n      </div>\r\n\r\n      <div className=\"grid\"> \r\n        {grid.map((row, rowIdx) => { \r\n          return (\r\n            <div key={rowIdx}>\r\n              {row.map((node, nodeIdx) => {\r\n                const {row, col, isFinish, isStart, isWall} = node;\r\n                return (\r\n                  <Node\r\n                    key={nodeIdx}\r\n                    col={col}\r\n                    isFinish={isFinish}\r\n                    isStart={isStart}\r\n                    isWall={isWall}\r\n                    mouseIsPressed={mouseIsPressed}\r\n                    onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                    onMouseEnter={(row, col) =>\r\n                      this.handleMouseEnter(row, col)\r\n                    }\r\n                    onMouseUp={() => this.handleMouseUp()}\r\n                    row={row}></Node>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </> \r\n    );     \r\n  }\r\n};\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = []\r\n  for (let row = 0; row < 20; row++) {\r\n    const temp = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      temp.push(createNode(col, row));\r\n    }\r\n    grid.push(temp);\r\n  }\r\n  return grid;\r\n};\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === 10 && col === 15,\r\n    isFinish: row === 10 && col === 35,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}