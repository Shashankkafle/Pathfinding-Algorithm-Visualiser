{"ast":null,"code":"import { getAllNodes, sortNodesByDistance } from './AlgoTools';\nexport function bfs(grid, startNode, finishNode) {\n  const queue = [];\n  startNode.isvisited = true;\n  queue.push(startNode);\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (queue.length > 0) {\n    let current = queue.shift();\n\n    if (current == finishNode) {\n      console.log('found');\n      return queue;\n    }\n\n    sortNodesByDistance(unvisitedNodes);\n    let neighbor = unvisitedNodes.shift();\n\n    if (!neighbor.isvisited) {\n      neighbor.isvisited = true;\n      neighbor.previousNode = current;\n      queue.push(neighbor);\n    }\n  }\n}","map":{"version":3,"sources":["E:/minor project/Pathfinding-Algorithm-visualiser/Minor_project/src/Algorithms/BFS.jsx"],"names":["getAllNodes","sortNodesByDistance","bfs","grid","startNode","finishNode","queue","isvisited","push","unvisitedNodes","length","current","shift","console","log","neighbor","previousNode"],"mappings":"AAAA,SAAQA,WAAR,EAAoBC,mBAApB,QAA8C,aAA9C;AAEA,OAAO,SAASC,GAAT,CAAaC,IAAb,EAAkBC,SAAlB,EAA4BC,UAA5B,EAAwC;AAE7C,QAAMC,KAAK,GAAG,EAAd;AACAF,EAAAA,SAAS,CAACG,SAAV,GAAsB,IAAtB;AACAD,EAAAA,KAAK,CAACE,IAAN,CAAWJ,SAAX;AACA,QAAMK,cAAc,GAAGT,WAAW,CAACG,IAAD,CAAlC;;AAEA,SAAMG,KAAK,CAACI,MAAN,GAAe,CAArB,EAAwB;AACtB,QAAIC,OAAO,GAAGL,KAAK,CAACM,KAAN,EAAd;;AACA,QAAGD,OAAO,IAAIN,UAAd,EAA0B;AACxBQ,MAAAA,OAAO,CAACC,GAAR,CAAa,OAAb;AACA,aAAOR,KAAP;AACD;;AACDL,IAAAA,mBAAmB,CAACQ,cAAD,CAAnB;AACA,QAAIM,QAAQ,GAAGN,cAAc,CAACG,KAAf,EAAf;;AACA,QAAG,CAACG,QAAQ,CAACR,SAAb,EAAwB;AACpBQ,MAAAA,QAAQ,CAACR,SAAT,GAAqB,IAArB;AACAQ,MAAAA,QAAQ,CAACC,YAAT,GAAwBL,OAAxB;AACAL,MAAAA,KAAK,CAACE,IAAN,CAAWO,QAAX;AACH;AACF;AACF","sourcesContent":["import {getAllNodes,sortNodesByDistance} from './AlgoTools';\r\n\r\nexport function bfs(grid,startNode,finishNode) {\r\n\r\n  const queue = [];\r\n  startNode.isvisited = true;\r\n  queue.push(startNode);\r\n  const unvisitedNodes = getAllNodes(grid);\r\n\r\n  while(queue.length > 0) {\r\n    let current = queue.shift();\r\n    if(current == finishNode) {\r\n      console.log ('found');\r\n      return queue;\r\n    }\r\n    sortNodesByDistance(unvisitedNodes);\r\n    let neighbor = unvisitedNodes.shift();\r\n    if(!neighbor.isvisited) {\r\n        neighbor.isvisited = true;\r\n        neighbor.previousNode = current;\r\n        queue.push(neighbor);\r\n    }\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}