{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Pathfinding-Algorithm-Visualiser\\\\Minor_project\\\\src\\\\Grid.jsx\";\nimport React from 'react';\nimport { Component } from 'react';\nimport Node from './Node.jsx';\nimport './grid.css';\nimport { getAllNodes, getNodesInShortestPathOrder } from './Algorithms/AlgoTools';\nimport { dijkstra } from './Algorithms/Dijkstras';\nimport { aStar } from './Algorithms/Astar';\nimport { generateWall1, generateWall2, generateWall3 } from './obstacles/RandomWalls';\nimport { createMaze } from './obstacles/Maze';\nimport { unweightedSearchAlgorithm } from './Algorithms/BFS';\nimport { dfs } from './Algorithms/DFS';\nimport { Table } from 'react-bootstrap';\nexport default class Grid extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      currentAlgorithm: [],\n      performance: [],\n      numberOfAlgos: 0\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    getAllNodes(grid);\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  clearGrid() {\n    const {\n      grid\n    } = this.state;\n\n    for (var i = 0; i < grid.length; i++) {\n      for (var j = 0; j < grid[i].length; j++) {\n        grid[i][j].isVisited = false;\n        if (!grid[i][j].isStart && !grid[i][j].isFinish && !grid[i][j].isWall) document.getElementById(`node-${grid[i][j].row}-${grid[i][j].col}`).className = 'node ';\n      }\n    }\n  }\n\n  clearWalls() {\n    const {\n      grid\n    } = this.state;\n\n    for (var i = 0; i < grid.length; i++) {\n      for (var j = 0; j < grid[i].length; j++) {\n        grid[i][j].isVisited = false;\n        if (!grid[i][j].isStart && !grid[i][j].isFinish) document.getElementById(`node-${grid[i][j].row}-${grid[i][j].col}`).className = 'node ';\n      }\n    }\n  }\n\n  recordPerofrmence(algo, time, numberOfVisited, lengthOfSHortestPath) {\n    const {\n      performance\n    } = this.state;\n    var tempPerformance = new Object();\n    tempPerformance.algorithm = algo;\n    tempPerformance.time = time;\n    tempPerformance.shortestPathLength = lengthOfSHortestPath;\n    tempPerformance.numberOfVisitedNodes = numberOfVisited;\n    performance.push(tempPerformance); // console.log('performance');\n    // console.log(performance);\n  }\n\n  displayPerformance() {\n    const {\n      performance\n    } = this.state;\n    const {\n      numberOfAlgos\n    } = this.state; // console.log(currentAlgorithm)\n    // console.log(currentAlgorithm.length);\n    // let time = performance[0].time.toString();\n    // let algorithm = performance[0].algorithm;\n    // let distance = performance[0].shortestPathLength.toString();\n\n    console.log(numberOfAlgos);\n    document.getElementById('algorithm').innerHTML = 'algorithm';\n    document.getElementById('time').innerHTML = 'time';\n    document.getElementById('distance').innerHTML = 'distance'; // document.getElementById('name0').innerHTML= algorithm ;\n    // document.getElementById('time0').innerHTML= time;\n    // document.getElementById('distance0').innerHTML = distance;\n\n    console.log(performance);\n\n    for (let i = 0; i < numberOfAlgos; i++) {\n      console.log(numberOfAlgos);\n      let time = performance[i].time.toString();\n      let algorithm = performance[i].algorithm;\n      let distance = performance[i].shortestPathLength.toString();\n      document.getElementById('name' + i).innerHTML = algorithm;\n      document.getElementById('time' + i).innerHTML = time;\n      document.getElementById('distance' + i).innerHTML = distance;\n    }\n  }\n\n  animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\n    // if(visitedNodesInOrder==null){\n    //   throw(noPathError)\n    //   this.clearWalls()\n    //   this.startVisualization()\n    // }\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 20 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n\n        if (!(visitedNodesInOrder[i].isStart || visitedNodesInOrder[i].isFinish)) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n        }\n      }, 20 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    let j = 0;\n\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n\n        if (!(nodesInShortestPathOrder[i].isStart || nodesInShortestPathOrder[i].isFinish)) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n        }\n      }, 30 * i);\n      j++;\n    }\n\n    setTimeout(() => {\n      this.clearGrid();\n    }, 20 * j * 2);\n    setTimeout(() => {\n      this.startVisualization();\n    }, 20 * j * 2);\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[10][15];\n    const finishNode = grid[10][35];\n    var t0 = performance.now();\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    var t1 = performance.now();\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode); // console.log(nodesInShortestPathOrder)\n\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    this.recordPerofrmence('dijkstras', t1 - t0, visitedNodesInOrder.length, nodesInShortestPathOrder.length);\n  }\n\n  visualizeAstar() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[10][15];\n    const finishNode = grid[10][35];\n    var t0 = performance.now();\n    const visitedNodesInOrder = aStar(grid, startNode, finishNode);\n    var t1 = performance.now(); // console.log(visitedNodesInOrder)\n\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode); // console.log(nodesInShortestPathOrder)\n\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    this.recordPerofrmence('astar', t1 - t0, visitedNodesInOrder.length, nodesInShortestPathOrder.length);\n  }\n\n  visualizeBfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[10][15];\n    const finishNode = grid[10][35];\n    var t0 = performance.now();\n    const visitedNodesInOrder = unweightedSearchAlgorithm(grid, startNode, finishNode, 'bfs');\n    var t1 = performance.now();\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode); // console.log(nodesInShortestPathOrder)\n\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    this.recordPerofrmence('bfs', t1 - t0, visitedNodesInOrder.length, nodesInShortestPathOrder.length);\n  }\n\n  visualizeDfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[10][15];\n    const finishNode = grid[10][35];\n    var t0 = performance.now();\n    const visitedNodesInOrder = dfs(grid, startNode, finishNode);\n    var t1 = performance.now();\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode); // console.log(nodesInShortestPathOrder)\n\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    this.recordPerofrmence('dfs', t1 - t0, visitedNodesInOrder.length, nodesInShortestPathOrder.length);\n  }\n\n  selectionfunction(algo) {\n    const {\n      currentAlgorithm\n    } = this.state;\n\n    if (!currentAlgorithm.includes(algo)) {\n      currentAlgorithm.push(algo);\n    } // console.log(currentAlgorithm)\n\n  }\n\n  startVisualization() {\n    const {\n      currentAlgorithm\n    } = this.state;\n    var {\n      numberOfAlgos\n    } = this.state; // console.log('hu na bhai');\n    // console.log(currentAlgorithm)\n    // console.log(currentAlgorithm.length);\n\n    var algo = currentAlgorithm.pop();\n    numberOfAlgos = numberOfAlgos + 1;\n    console.log(numberOfAlgos);\n\n    if (algo == 'dijsktras') {\n      // console.log('dijkstras')\n      this.visualizeDijkstra(); // setTimeout(() => {\n      //   this.clearGrid()\n      // },50 * 3);\n    }\n\n    if (algo == 'astar') {\n      // console.log('astar')\n      this.visualizeAstar(); // setTimeout(() => {\n      //   this.clearGrid()\n      // },50 * 3);\n    }\n\n    if (algo == 'bfs') {\n      // console.log('bfs')\n      this.visualizeBfs(); // setTimeout(() => {\n      //   this.clearGrid()\n      // },50 * 3);\n    }\n\n    if (algo == 'dfs') {\n      // console.log('dfs')\n      this.visualizeDfs(); // setTimeout(() => {\n      //   this.clearGrid()\n      // },50 * 3);\n    }\n\n    if (currentAlgorithm.length === 0) {\n      this.displayPerformance();\n    }\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"navBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"http://localhost:3000/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }\n    }, \"  \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 44\n      }\n    }, \" Pathfinding Visualizer \")), /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }\n    }, \"  \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.startVisualization(),\n      className: \"newTools\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 14\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 84\n      }\n    }, \"Start Visualization \"), \" \")), /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }\n    }, \"  \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.clearGrid(),\n      className: \"newTools\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 14\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 75\n      }\n    }, \"Clear Grid \"), \" \")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dropDown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"dropBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 38\n      }\n    }, \" Algorithms \")), /*#__PURE__*/React.createElement(\"select\", {\n      className: \"dropdown-algo\",\n      id: \"dropdown-algo\",\n      multiple: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      onClick: () => this.selectionfunction('dijsktras'),\n      id: \"dijsktras\",\n      className: \"algoBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }\n    }, \" Dijkstra's algorithm \"), /*#__PURE__*/React.createElement(\"option\", {\n      onClick: () => this.selectionfunction('astar'),\n      id: \"astar\",\n      className: \"algoBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }\n    }, \"  Astar algorithm  \"), /*#__PURE__*/React.createElement(\"option\", {\n      onClick: () => this.selectionfunction('bfs'),\n      id: \"bfs\",\n      className: \"algoBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }\n    }, \"  Bfs algorithm  \"), /*#__PURE__*/React.createElement(\"option\", {\n      onClick: () => this.selectionfunction('dfs'),\n      id: \"dfs\",\n      className: \"algoBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }\n    }, \"  Dfs algorithm   \"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"wall\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"dropWall\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 35\n      }\n    }, \" Wall \"), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dropdown-wall\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => {\n        const {\n          grid\n        } = this.state;\n        const newGrid = generateWall1(grid);\n        this.setState({\n          grid: newGrid\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 13\n      }\n    }, \"  \", /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 16\n      }\n    }, \" Level 1\"), \" \"), /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => {\n        const {\n          grid\n        } = this.state;\n        const newGrid = generateWall2(grid);\n        this.setState({\n          grid: newGrid\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 12\n      }\n    }, \"  \", /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 16\n      }\n    }, \" Level 2\"), \" \"), /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => {\n        const {\n          grid\n        } = this.state;\n        const newGrid = generateWall3(grid);\n        this.setState({\n          grid: newGrid\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 12\n      }\n    }, \"  \", /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 16\n      }\n    }, \" Level 3\"), \" \"), /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => {\n        const {\n          grid\n        } = this.state;\n        const newGrid = createMaze(grid);\n        this.setState({\n          grid: newGrid\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 13\n      }\n    }, \"  \", /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 16\n      }\n    }, \" Generate Maze\"), \" \"))), /*#__PURE__*/React.createElement(\"a\", {\n      href: \"http://localhost:3000/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 8\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 42\n      }\n    }, \" Reset\"))), /*#__PURE__*/React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      id: \"algorithm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"th\", {\n      id: \"time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"th\", {\n      id: \"distance\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      id: \"name0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      id: \"time0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      id: \"distance0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      id: \"name1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      id: \"time1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      id: \"distance1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      id: \"name2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      id: \"time2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      id: \"distance2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      id: \"name3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      id: \"time3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      id: \"distance3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 13\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 7\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 13\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isFinish,\n          isStart,\n          isWall\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 19\n          }\n        });\n      }));\n    })));\n  }\n\n}\n;\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const temp = [];\n\n    for (let col = 0; col < 50; col++) {\n      temp.push(createNode(col, row));\n    }\n\n    grid.push(temp);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === 10 && col === 15,\n    isFinish: row === 10 && col === 35,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nfunction sleep(milliseconds) {\n  var start = new Date().getTime();\n\n  for (var i = 0; i < 1e7; i++) {\n    if (new Date().getTime() - start > milliseconds) {\n      break;\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/Acer/Pathfinding-Algorithm-Visualiser/Minor_project/src/Grid.jsx"],"names":["React","Component","Node","getAllNodes","getNodesInShortestPathOrder","dijkstra","aStar","generateWall1","generateWall2","generateWall3","createMaze","unweightedSearchAlgorithm","dfs","Table","Grid","constructor","state","grid","mouseIsPressed","currentAlgorithm","performance","numberOfAlgos","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","clearGrid","i","length","j","isVisited","isStart","isFinish","isWall","document","getElementById","className","clearWalls","recordPerofrmence","algo","time","numberOfVisited","lengthOfSHortestPath","tempPerformance","Object","algorithm","shortestPathLength","numberOfVisitedNodes","push","displayPerformance","console","log","innerHTML","toString","distance","animateAlgorithm","visitedNodesInOrder","nodesInShortestPathOrder","setTimeout","animateShortestPath","node","startVisualization","visualizeDijkstra","startNode","finishNode","t0","now","t1","visualizeAstar","visualizeBfs","visualizeDfs","selectionfunction","includes","pop","render","map","rowIdx","nodeIdx","temp","createNode","Infinity","previousNode","slice","newNode","sleep","milliseconds","start","Date","getTime"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAO,YAAP;AACA,SAAQC,WAAR,EAAqBC,2BAArB,QAAuD,wBAAvD;AACA,SAAQC,QAAR,QAAuB,wBAAvB;AACA,SAAQC,KAAR,QAAoB,oBAApB;AACA,SAAQC,aAAR,EAAsBC,aAAtB,EAAoCC,aAApC,QAAwD,yBAAxD;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAAQC,yBAAR,QAAwC,kBAAxC;AACA,SAAQC,GAAR,QAAkB,kBAAlB;AACA,SAAQC,KAAR,QAAoB,iBAApB;AAEA,eAAe,MAAMC,IAAN,SAAmBb,SAAnB,CACf;AACEc,EAAAA,WAAW,GACT;AACI;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,cAAc,EAAE,KAFL;AAGXC,MAAAA,gBAAgB,EAAE,EAHP;AAIXC,MAAAA,WAAW,EAAC,EAJD;AAKXC,MAAAA,aAAa,EAAC;AALH,KAAb;AAOH;;AAGHC,EAAAA,iBAAiB,GAAG;AAClB,UAAML,IAAI,GAAGM,cAAc,EAA3B;AACApB,IAAAA,WAAW,CAACc,IAAD,CAAX;AACA,SAAKO,QAAL,CAAc;AAACP,MAAAA;AAAD,KAAd;AACD;;AAGDQ,EAAAA,eAAe,CAACC,GAAD,EAAMC,GAAN,EAAW;AACxB,UAAMC,OAAO,GAAGC,yBAAyB,CAAC,KAAKb,KAAL,CAAWC,IAAZ,EAAkBS,GAAlB,EAAuBC,GAAvB,CAAzC;AACA,SAAKH,QAAL,CAAc;AAACP,MAAAA,IAAI,EAAEW,OAAP;AAAgBV,MAAAA,cAAc,EAAE;AAAhC,KAAd;AACD;;AAEDY,EAAAA,gBAAgB,CAACJ,GAAD,EAAMC,GAAN,EAAW;AACzB,QAAI,CAAC,KAAKX,KAAL,CAAWE,cAAhB,EAAgC;AAChC,UAAMU,OAAO,GAAGC,yBAAyB,CAAC,KAAKb,KAAL,CAAWC,IAAZ,EAAkBS,GAAlB,EAAuBC,GAAvB,CAAzC;AACA,SAAKH,QAAL,CAAc;AAACP,MAAAA,IAAI,EAAEW;AAAP,KAAd;AACD;;AAEDG,EAAAA,aAAa,GAAG;AACd,SAAKP,QAAL,CAAc;AAACN,MAAAA,cAAc,EAAE;AAAjB,KAAd;AACD;;AACDc,EAAAA,SAAS,GAAE;AACT,UAAM;AAACf,MAAAA;AAAD,QAAO,KAAKD,KAAlB;;AACA,SAAI,IAAIiB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAChB,IAAI,CAACiB,MAAnB,EAA0BD,CAAC,EAA3B,EAA8B;AAC5B,WAAI,IAAIE,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAClB,IAAI,CAACgB,CAAD,CAAJ,CAAQC,MAAtB,EAA6BC,CAAC,EAA9B,EAAiC;AAE/BlB,QAAAA,IAAI,CAACgB,CAAD,CAAJ,CAAQE,CAAR,EAAWC,SAAX,GAAqB,KAArB;AACA,YAAI,CAACnB,IAAI,CAACgB,CAAD,CAAJ,CAAQE,CAAR,EAAWE,OAAb,IAAwB,CAACpB,IAAI,CAACgB,CAAD,CAAJ,CAAQE,CAAR,EAAWG,QAApC,IAAgD,CAACrB,IAAI,CAACgB,CAAD,CAAJ,CAAQE,CAAR,EAAWI,MAA/D,EACAC,QAAQ,CAACC,cAAT,CAAyB,QAAOxB,IAAI,CAACgB,CAAD,CAAJ,CAAQE,CAAR,EAAWT,GAAI,IAAGT,IAAI,CAACgB,CAAD,CAAJ,CAAQE,CAAR,EAAWR,GAAI,EAAjE,EAAoEe,SAApE,GACA,OADA;AAED;AACF;AACF;;AACDC,EAAAA,UAAU,GAAE;AACV,UAAM;AAAC1B,MAAAA;AAAD,QAAO,KAAKD,KAAlB;;AACA,SAAI,IAAIiB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAChB,IAAI,CAACiB,MAAnB,EAA0BD,CAAC,EAA3B,EAA8B;AAC5B,WAAI,IAAIE,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAClB,IAAI,CAACgB,CAAD,CAAJ,CAAQC,MAAtB,EAA6BC,CAAC,EAA9B,EAAiC;AAE/BlB,QAAAA,IAAI,CAACgB,CAAD,CAAJ,CAAQE,CAAR,EAAWC,SAAX,GAAqB,KAArB;AACA,YAAI,CAACnB,IAAI,CAACgB,CAAD,CAAJ,CAAQE,CAAR,EAAWE,OAAb,IAAwB,CAACpB,IAAI,CAACgB,CAAD,CAAJ,CAAQE,CAAR,EAAWG,QAAvC,EACAE,QAAQ,CAACC,cAAT,CAAyB,QAAOxB,IAAI,CAACgB,CAAD,CAAJ,CAAQE,CAAR,EAAWT,GAAI,IAAGT,IAAI,CAACgB,CAAD,CAAJ,CAAQE,CAAR,EAAWR,GAAI,EAAjE,EAAoEe,SAApE,GACA,OADA;AAED;AACF;AACF;;AACDE,EAAAA,iBAAiB,CAACC,IAAD,EAAMC,IAAN,EAAWC,eAAX,EAA2BC,oBAA3B,EAAgD;AAC/D,UAAM;AAAC5B,MAAAA;AAAD,QAAc,KAAKJ,KAAzB;AACA,QAAIiC,eAAe,GAAG,IAAIC,MAAJ,EAAtB;AACAD,IAAAA,eAAe,CAACE,SAAhB,GAA0BN,IAA1B;AACAI,IAAAA,eAAe,CAACH,IAAhB,GAAqBA,IAArB;AACAG,IAAAA,eAAe,CAACG,kBAAhB,GAAmCJ,oBAAnC;AACAC,IAAAA,eAAe,CAACI,oBAAhB,GAAqCN,eAArC;AACA3B,IAAAA,WAAW,CAACkC,IAAZ,CAAiBL,eAAjB,EAP+D,CAQ/D;AACA;AACD;;AAEDM,EAAAA,kBAAkB,GAAE;AAClB,UAAM;AAACnC,MAAAA;AAAD,QAAgB,KAAKJ,KAA3B;AACA,UAAM;AAACK,MAAAA;AAAD,QAAiB,KAAKL,KAA5B,CAFkB,CAGlB;AACA;AAEA;AACA;AACA;;AACAwC,IAAAA,OAAO,CAACC,GAAR,CAAYpC,aAAZ;AAEAmB,IAAAA,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCiB,SAArC,GAAgD,WAAhD;AACAlB,IAAAA,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCiB,SAAhC,GAA2C,MAA3C;AACAlB,IAAAA,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCiB,SAApC,GAAgD,UAAhD,CAbkB,CAelB;AACA;AACA;;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYrC,WAAZ;;AACA,SAAI,IAAIa,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACZ,aAAd,EAA4BY,CAAC,EAA7B,EAAgC;AAC9BuB,MAAAA,OAAO,CAACC,GAAR,CAAYpC,aAAZ;AAEA,UAAIyB,IAAI,GAAG1B,WAAW,CAACa,CAAD,CAAX,CAAea,IAAf,CAAoBa,QAApB,EAAX;AACA,UAAIR,SAAS,GAAG/B,WAAW,CAACa,CAAD,CAAX,CAAekB,SAA/B;AACA,UAAIS,QAAQ,GAAGxC,WAAW,CAACa,CAAD,CAAX,CAAemB,kBAAf,CAAkCO,QAAlC,EAAf;AAEAnB,MAAAA,QAAQ,CAACC,cAAT,CAAwB,SAAOR,CAA/B,EAAkCyB,SAAlC,GAA6CP,SAA7C;AACAX,MAAAA,QAAQ,CAACC,cAAT,CAAwB,SAAOR,CAA/B,EAAkCyB,SAAlC,GAA6CZ,IAA7C;AACAN,MAAAA,QAAQ,CAACC,cAAT,CAAwB,aAAWR,CAAnC,EAAsCyB,SAAtC,GAAkDE,QAAlD;AAED;AACF;;AAEDC,EAAAA,gBAAgB,CAACC,mBAAD,EAAsBC,wBAAtB,EAAgD;AAC9D;AACA;AACA;AACA;AACA;AACA,SAAK,IAAI9B,CAAC,GAAC,CAAX,EAAcA,CAAC,IAAI6B,mBAAmB,CAAC5B,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAClD,UAAIA,CAAC,KAAK6B,mBAAmB,CAAC5B,MAA9B,EAAsC;AACpC8B,QAAAA,UAAU,CAAC,MAAM;AACf,eAAKC,mBAAL,CAAyBF,wBAAzB;AACD,SAFS,EAEP,KAAK9B,CAFE,CAAV;AAGA;AACD;;AACD+B,MAAAA,UAAU,CAAC,MAAM;AACf,cAAME,IAAI,GAAGJ,mBAAmB,CAAC7B,CAAD,CAAhC;;AACA,YAAG,EAAE6B,mBAAmB,CAAC7B,CAAD,CAAnB,CAAuBI,OAAvB,IAAgCyB,mBAAmB,CAAC7B,CAAD,CAAnB,CAAuBK,QAAzD,CAAH,EACA;AACAE,UAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOyB,IAAI,CAACxC,GAAI,IAAGwC,IAAI,CAACvC,GAAI,EAArD,EAAwDe,SAAxD,GACE,mBADF;AAEC;AACF,OAPS,EAOP,KAAKT,CAPE,CAAV;AAQD;AACF;;AAEDgC,EAAAA,mBAAmB,CAACF,wBAAD,EAA2B;AAC5C,QAAI5B,CAAC,GAAG,CAAR;;AACA,SAAK,IAAIF,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAG8B,wBAAwB,CAAC7B,MAA3C,EAAmDD,CAAC,EAApD,EACA;AACE+B,MAAAA,UAAU,CAAC,MAAM;AACf,cAAME,IAAI,GAAGH,wBAAwB,CAAC9B,CAAD,CAArC;;AACA,YAAG,EAAE8B,wBAAwB,CAAC9B,CAAD,CAAxB,CAA4BI,OAA5B,IAAqC0B,wBAAwB,CAAC9B,CAAD,CAAxB,CAA4BK,QAAnE,CAAH,EACA;AACAE,UAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOyB,IAAI,CAACxC,GAAI,IAAGwC,IAAI,CAACvC,GAAI,EAArD,EAAwDe,SAAxD,GACE,yBADF;AAEC;AACF,OAPS,EAOP,KAAKT,CAPE,CAAV;AAQAE,MAAAA,CAAC;AACF;;AACD6B,IAAAA,UAAU,CAAC,MAAM;AAChB,WAAKhC,SAAL;AACA,KAFS,EAEP,KAAKG,CAAL,GAAO,CAFA,CAAV;AAGA6B,IAAAA,UAAU,CAAC,MAAM;AACf,WAAKG,kBAAL;AACG,KAFK,EAEH,KAAKhC,CAAL,GAAO,CAFJ,CAAV;AAID;;AAEDiC,EAAAA,iBAAiB,GAAG;AAElB,UAAM;AAACnD,MAAAA;AAAD,QAAS,KAAKD,KAApB;AACA,UAAMqD,SAAS,GAAGpD,IAAI,CAAC,EAAD,CAAJ,CAAS,EAAT,CAAlB;AACA,UAAMqD,UAAU,GAAGrD,IAAI,CAAC,EAAD,CAAJ,CAAS,EAAT,CAAnB;AACA,QAAIsD,EAAE,GAACnD,WAAW,CAACoD,GAAZ,EAAP;AACA,UAAMV,mBAAmB,GAAGzD,QAAQ,CAACY,IAAD,EAAOoD,SAAP,EAAkBC,UAAlB,CAApC;AACA,QAAIG,EAAE,GAACrD,WAAW,CAACoD,GAAZ,EAAP;AACA,UAAMT,wBAAwB,GAAG3D,2BAA2B,CAACkE,UAAD,CAA5D,CARkB,CASlB;;AACA,SAAKT,gBAAL,CAAsBC,mBAAtB,EAA2CC,wBAA3C;AACA,SAAKnB,iBAAL,CAAuB,WAAvB,EAAmC6B,EAAE,GAACF,EAAtC,EAAyCT,mBAAmB,CAAC5B,MAA7D,EAAoE6B,wBAAwB,CAAC7B,MAA7F;AACD;;AACDwC,EAAAA,cAAc,GAAG;AAEf,UAAM;AAACzD,MAAAA;AAAD,QAAS,KAAKD,KAApB;AACA,UAAMqD,SAAS,GAAGpD,IAAI,CAAC,EAAD,CAAJ,CAAS,EAAT,CAAlB;AACA,UAAMqD,UAAU,GAAGrD,IAAI,CAAC,EAAD,CAAJ,CAAS,EAAT,CAAnB;AACA,QAAIsD,EAAE,GAACnD,WAAW,CAACoD,GAAZ,EAAP;AACA,UAAMV,mBAAmB,GAAGxD,KAAK,CAACW,IAAD,EAAOoD,SAAP,EAAkBC,UAAlB,CAAjC;AACA,QAAIG,EAAE,GAACrD,WAAW,CAACoD,GAAZ,EAAP,CAPe,CAQf;;AACA,UAAMT,wBAAwB,GAAG3D,2BAA2B,CAACkE,UAAD,CAA5D,CATe,CAUf;;AACA,SAAKT,gBAAL,CAAsBC,mBAAtB,EAA2CC,wBAA3C;AACA,SAAKnB,iBAAL,CAAuB,OAAvB,EAA+B6B,EAAE,GAACF,EAAlC,EAAqCT,mBAAmB,CAAC5B,MAAzD,EAAgE6B,wBAAwB,CAAC7B,MAAzF;AACD;;AAGDyC,EAAAA,YAAY,GAAG;AAEb,UAAM;AAAC1D,MAAAA;AAAD,QAAS,KAAKD,KAApB;AACA,UAAMqD,SAAS,GAAGpD,IAAI,CAAC,EAAD,CAAJ,CAAS,EAAT,CAAlB;AACA,UAAMqD,UAAU,GAAGrD,IAAI,CAAC,EAAD,CAAJ,CAAS,EAAT,CAAnB;AACA,QAAIsD,EAAE,GAACnD,WAAW,CAACoD,GAAZ,EAAP;AACA,UAAMV,mBAAmB,GAAInD,yBAAyB,CAACM,IAAD,EAAOoD,SAAP,EAAkBC,UAAlB,EAA6B,KAA7B,CAAtD;AACA,QAAIG,EAAE,GAACrD,WAAW,CAACoD,GAAZ,EAAP;AAEA,UAAMT,wBAAwB,GAAG3D,2BAA2B,CAACkE,UAAD,CAA5D,CATa,CAUb;;AACA,SAAKT,gBAAL,CAAsBC,mBAAtB,EAA2CC,wBAA3C;AACA,SAAKnB,iBAAL,CAAuB,KAAvB,EAA6B6B,EAAE,GAACF,EAAhC,EAAmCT,mBAAmB,CAAC5B,MAAvD,EAA8D6B,wBAAwB,CAAC7B,MAAvF;AACD;;AAED0C,EAAAA,YAAY,GAAG;AACb,UAAM;AAAC3D,MAAAA;AAAD,QAAS,KAAKD,KAApB;AACA,UAAMqD,SAAS,GAAGpD,IAAI,CAAC,EAAD,CAAJ,CAAS,EAAT,CAAlB;AACA,UAAMqD,UAAU,GAAGrD,IAAI,CAAC,EAAD,CAAJ,CAAS,EAAT,CAAnB;AACA,QAAIsD,EAAE,GAACnD,WAAW,CAACoD,GAAZ,EAAP;AACA,UAAMV,mBAAmB,GAAIlD,GAAG,CAACK,IAAD,EAAOoD,SAAP,EAAkBC,UAAlB,CAAhC;AACA,QAAIG,EAAE,GAACrD,WAAW,CAACoD,GAAZ,EAAP;AACA,UAAMT,wBAAwB,GAAG3D,2BAA2B,CAACkE,UAAD,CAA5D,CAPa,CAQb;;AACA,SAAKT,gBAAL,CAAsBC,mBAAtB,EAA2CC,wBAA3C;AACA,SAAKnB,iBAAL,CAAuB,KAAvB,EAA6B6B,EAAE,GAACF,EAAhC,EAAmCT,mBAAmB,CAAC5B,MAAvD,EAA8D6B,wBAAwB,CAAC7B,MAAvF;AACD;;AAED2C,EAAAA,iBAAiB,CAAChC,IAAD,EAAM;AACrB,UAAM;AAAC1B,MAAAA;AAAD,QAAoB,KAAKH,KAA/B;;AACA,QAAG,CAACG,gBAAgB,CAAC2D,QAAjB,CAA0BjC,IAA1B,CAAJ,EAAoC;AACpC1B,MAAAA,gBAAgB,CAACmC,IAAjB,CAAsBT,IAAtB;AACA,KAJqB,CAKrB;;AACD;;AAEDsB,EAAAA,kBAAkB,GAAE;AAChB,UAAM;AAAChD,MAAAA;AAAD,QAAoB,KAAKH,KAA/B;AACA,QAAI;AAACK,MAAAA;AAAD,QAAiB,KAAKL,KAA1B,CAFgB,CAIhB;AACA;AACA;;AACA,QAAI6B,IAAI,GAAC1B,gBAAgB,CAAC4D,GAAjB,EAAT;AACA1D,IAAAA,aAAa,GAACA,aAAa,GAAC,CAA5B;AACAmC,IAAAA,OAAO,CAACC,GAAR,CAAYpC,aAAZ;;AACA,QAAGwB,IAAI,IAAE,WAAT,EAAqB;AACnB;AACA,WAAKuB,iBAAL,GAFmB,CAGnB;AACA;AACA;AAED;;AACD,QAAGvB,IAAI,IAAE,OAAT,EAAiB;AACf;AACA,WAAK6B,cAAL,GAFe,CAGf;AACA;AACA;AACD;;AACD,QAAG7B,IAAI,IAAE,KAAT,EAAe;AACb;AACA,WAAK8B,YAAL,GAFa,CAGb;AACA;AACA;AACD;;AAED,QAAG9B,IAAI,IAAE,KAAT,EAAe;AACb;AACA,WAAK+B,YAAL,GAFa,CAGb;AACA;AACA;AACD;;AAED,QAAGzD,gBAAgB,CAACe,MAAjB,KAA4B,CAA/B,EAAiC;AAC/B,WAAKqB,kBAAL;AACD;AAEJ;;AAEDyB,EAAAA,MAAM,GAAG;AAEP,UAAM;AAAC/D,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAyB,KAAKF,KAApC;AAEA,wBACE,uDACA;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAG,MAAA,IAAI,EAAC,wBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAnC,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAK;AAAQ,MAAA,OAAO,EAAE,MAAI,KAAKmD,kBAAL,EAArB;AAAgD,MAAA,SAAS,EAAC,UAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAsE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAtE,MAAL,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAK;AAAQ,MAAA,OAAO,EAAE,MAAI,KAAKnC,SAAL,EAArB;AAAuC,MAAA,SAAS,EAAC,UAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA6D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA7D,MAAL,CAHF,eAgBC;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG;AAAO,MAAA,SAAS,EAAC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA3B,CADH,eAIG;AAAQ,MAAA,SAAS,EAAC,eAAlB;AAAkC,MAAA,EAAE,EAAC,eAArC;AAAqD,MAAA,QAAQ,MAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAQ,MAAA,OAAO,EAAE,MAAI,KAAK6C,iBAAL,CAAuB,WAAvB,CAArB;AAA0D,MAAA,EAAE,EAAC,WAA7D;AAAyE,MAAA,SAAS,EAAC,SAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADA,eAEA;AAAS,MAAA,OAAO,EAAE,MAAI,KAAKA,iBAAL,CAAuB,OAAvB,CAAtB;AAAuD,MAAA,EAAE,EAAC,OAA1D;AAAkE,MAAA,SAAS,EAAC,SAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAFA,eAGA;AAAS,MAAA,OAAO,EAAE,MAAI,KAAKA,iBAAL,CAAuB,KAAvB,CAAtB;AAAqD,MAAA,EAAE,EAAC,KAAxD;AAA8D,MAAA,SAAS,EAAC,SAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAHA,eAIA;AAAS,MAAA,OAAO,EAAE,MAAI,KAAKA,iBAAL,CAAuB,KAAvB,CAAtB;AAAqD,MAAA,EAAE,EAAC,KAAxD;AAA6D,MAAA,SAAS,EAAC,SAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAJA,CAJH,CAhBD,eA+BE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAxB,MADF,eAEE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAG,MAAA,OAAO,EACG,MACK;AAAE,cAAM;AAAC5D,UAAAA;AAAD,YAAS,KAAKD,KAApB;AACA,cAAMY,OAAO,GAACrB,aAAa,CAACU,IAAD,CAA3B;AACA,aAAKO,QAAL,CAAc;AAACP,UAAAA,IAAI,EAAEW;AAAP,SAAd;AACD,OALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAOG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPH,MADF,eASC;AAAG,MAAA,OAAO,EACI,MACK;AACE,cAAM;AAACX,UAAAA;AAAD,YAAS,KAAKD,KAApB;AACA,cAAMY,OAAO,GAACpB,aAAa,CAACS,IAAD,CAA3B;AACA,aAAKO,QAAL,CAAc;AAACP,UAAAA,IAAI,EAAEW;AAAP,SAAd;AACD,OANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBARJ,MATD,eAkBC;AAAG,MAAA,OAAO,EACI,MACK;AACE,cAAM;AAACX,UAAAA;AAAD,YAAS,KAAKD,KAApB;AACA,cAAMY,OAAO,GAACnB,aAAa,CAACQ,IAAD,CAA3B;AACA,aAAKO,QAAL,CAAc;AAACP,UAAAA,IAAI,EAAEW;AAAP,SAAd;AACD,OANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBARJ,MAlBD,eA2BE;AAAG,MAAA,OAAO,EACP,MACG;AAAC,cAAM;AAACX,UAAAA;AAAD,YAAS,KAAKD,KAApB;AACD,cAAMY,OAAO,GAAClB,UAAU,CAACO,IAAD,CAAxB;AACA,aAAKO,QAAL,CAAc;AAACP,UAAAA,IAAI,EAAEW;AAAP,SAAd;AAEC,OANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAQG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBARH,MA3BF,CAFF,CA/BF,eAuEC;AAAG,MAAA,IAAI,EAAC,wBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAlC,CAvED,CADA,eA2EA,oBAAC,KAAD;AAAO,MAAA,OAAO,MAAd;AAAe,MAAA,QAAQ,MAAvB;AAAwB,MAAA,KAAK,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,EAAE,EAAC,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAI,MAAA,EAAE,EAAC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE;AAAI,MAAA,EAAE,EAAC,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF,CADF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,EAAE,EAAC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAI,MAAA,EAAE,EAAC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE;AAAI,MAAA,EAAE,EAAC,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,EAAE,EAAC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAI,MAAA,EAAE,EAAC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE;AAAI,MAAA,EAAE,EAAC,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CANF,eAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,EAAE,EAAC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAI,MAAA,EAAE,EAAC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE;AAAI,MAAA,EAAE,EAAC,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CAXF,eAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,EAAE,EAAC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAI,MAAA,EAAE,EAAC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE;AAAI,MAAA,EAAE,EAAC,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CAhBF,CARF,CA3EA,eA2GA;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGX,IAAI,CAACgE,GAAL,CAAS,CAACvD,GAAD,EAAMwD,MAAN,KAAiB;AACzB,0BACE;AAAK,QAAA,GAAG,EAAEA,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGxD,GAAG,CAACuD,GAAJ,CAAQ,CAACf,IAAD,EAAOiB,OAAP,KAAmB;AAC1B,cAAM;AAACzD,UAAAA,GAAD;AAAMC,UAAAA,GAAN;AAAWW,UAAAA,QAAX;AAAqBD,UAAAA,OAArB;AAA8BE,UAAAA;AAA9B,YAAwC2B,IAA9C;AACA,4BACE,oBAAC,IAAD;AACE,UAAA,GAAG,EAAEiB,OADP;AAEE,UAAA,GAAG,EAAExD,GAFP;AAGE,UAAA,QAAQ,EAAEW,QAHZ;AAIE,UAAA,OAAO,EAAED,OAJX;AAKE,UAAA,MAAM,EAAEE,MALV;AAME,UAAA,cAAc,EAAErB,cANlB;AAOE,UAAA,WAAW,EAAE,CAACQ,GAAD,EAAMC,GAAN,KAAc,KAAKF,eAAL,CAAqBC,GAArB,EAA0BC,GAA1B,CAP7B;AAQE,UAAA,YAAY,EAAE,CAACD,GAAD,EAAMC,GAAN,KACZ,KAAKG,gBAAL,CAAsBJ,GAAtB,EAA2BC,GAA3B,CATJ;AAWE,UAAA,SAAS,EAAE,MAAM,KAAKI,aAAL,EAXnB;AAYE,UAAA,GAAG,EAAEL,GAZP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,OAjBA,CADH,CADF;AAsBD,KAvBA,CADH,CA3GA,CADF;AAwID;;AAnZH;AAoZC;;AAED,MAAMH,cAAc,GAAG,MAAM;AAC3B,QAAMN,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIS,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AACjC,UAAM0D,IAAI,GAAG,EAAb;;AACA,SAAK,IAAIzD,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AACjCyD,MAAAA,IAAI,CAAC9B,IAAL,CAAU+B,UAAU,CAAC1D,GAAD,EAAMD,GAAN,CAApB;AACD;;AACDT,IAAAA,IAAI,CAACqC,IAAL,CAAU8B,IAAV;AACD;;AACD,SAAOnE,IAAP;AACD,CAVD;;AAWA,MAAMoE,UAAU,GAAG,CAAC1D,GAAD,EAAMD,GAAN,KAAc;AAC/B,SAAO;AACLC,IAAAA,GADK;AAELD,IAAAA,GAFK;AAGLW,IAAAA,OAAO,EAAEX,GAAG,KAAK,EAAR,IAAcC,GAAG,KAAK,EAH1B;AAILW,IAAAA,QAAQ,EAAEZ,GAAG,KAAK,EAAR,IAAaC,GAAG,KAAK,EAJ1B;AAKLiC,IAAAA,QAAQ,EAAE0B,QALL;AAMLlD,IAAAA,SAAS,EAAE,KANN;AAOLG,IAAAA,MAAM,EAAE,KAPH;AAQLgD,IAAAA,YAAY,EAAE;AART,GAAP;AAUD,CAXD;;AAaA,MAAM1D,yBAAyB,GAAG,CAACZ,IAAD,EAAOS,GAAP,EAAYC,GAAZ,KAAoB;AACpD,QAAMC,OAAO,GAAGX,IAAI,CAACuE,KAAL,EAAhB;AACA,QAAMtB,IAAI,GAAGtC,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,CAAb;AACA,QAAM8D,OAAO,GAAG,EACd,GAAGvB,IADW;AAEd3B,IAAAA,MAAM,EAAE,CAAC2B,IAAI,CAAC3B;AAFA,GAAhB;AAIAX,EAAAA,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,IAAoB8D,OAApB;AACA,SAAO7D,OAAP;AACD,CATD;;AAUA,SAAS8D,KAAT,CAAeC,YAAf,EAA6B;AAC3B,MAAIC,KAAK,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;;AACA,OAAK,IAAI7D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5B,QAAK,IAAI4D,IAAJ,GAAWC,OAAX,KAAuBF,KAAxB,GAAiCD,YAArC,EAAkD;AAChD;AACD;AACF;AACF","sourcesContent":["import React from 'react'\r\nimport { Component } from 'react'\r\nimport Node from './Node.jsx'\r\nimport './grid.css'\r\nimport {getAllNodes, getNodesInShortestPathOrder} from './Algorithms/AlgoTools'\r\nimport {dijkstra} from './Algorithms/Dijkstras';\r\nimport {aStar} from './Algorithms/Astar';\r\nimport {generateWall1,generateWall2,generateWall3} from './obstacles/RandomWalls'\r\nimport {createMaze} from './obstacles/Maze'\r\nimport {unweightedSearchAlgorithm} from './Algorithms/BFS';\r\nimport {dfs} from './Algorithms/DFS';\r\nimport {Table} from 'react-bootstrap';\r\n\r\nexport default class Grid extends Component\r\n{\r\n  constructor() \r\n    {\r\n        super();\r\n        this.state = {\r\n          grid: [],\r\n          mouseIsPressed: false,\r\n          currentAlgorithm: [],\r\n          performance:[],\r\n          numberOfAlgos:0,\r\n        };\r\n    } \r\n   \r\n   \r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    getAllNodes(grid)\r\n    this.setState({grid});\r\n  }\r\n    \r\n  \r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n  clearGrid(){ \r\n    const {grid}=this.state    \r\n    for(var i=0;i<grid.length;i++){\r\n      for(var j=0;j<grid[i].length;j++){\r\n            \r\n        grid[i][j].isVisited=false\r\n        if((!grid[i][j].isStart)&&(!grid[i][j].isFinish)&&(!grid[i][j].isWall))\r\n        document.getElementById(`node-${grid[i][j].row}-${grid[i][j].col}`).className =\r\n        'node ';\r\n      }\r\n    }\r\n  }\r\n  clearWalls(){ \r\n    const {grid}=this.state    \r\n    for(var i=0;i<grid.length;i++){\r\n      for(var j=0;j<grid[i].length;j++){\r\n            \r\n        grid[i][j].isVisited=false\r\n        if((!grid[i][j].isStart)&&(!grid[i][j].isFinish))\r\n        document.getElementById(`node-${grid[i][j].row}-${grid[i][j].col}`).className =\r\n        'node ';\r\n      }\r\n    }\r\n  }\r\n  recordPerofrmence(algo,time,numberOfVisited,lengthOfSHortestPath){\r\n    const {performance}=this.state;\r\n    var tempPerformance = new Object();\r\n    tempPerformance.algorithm=algo;\r\n    tempPerformance.time=time;\r\n    tempPerformance.shortestPathLength=lengthOfSHortestPath;\r\n    tempPerformance.numberOfVisitedNodes=numberOfVisited;\r\n    performance.push(tempPerformance);\r\n    // console.log('performance');\r\n    // console.log(performance);\r\n  }\r\n\r\n  displayPerformance(){\r\n    const {performance} = this.state;\r\n    const {numberOfAlgos}= this.state\r\n    // console.log(currentAlgorithm)\r\n    // console.log(currentAlgorithm.length);\r\n \r\n    // let time = performance[0].time.toString();\r\n    // let algorithm = performance[0].algorithm;\r\n    // let distance = performance[0].shortestPathLength.toString();\r\n    console.log(numberOfAlgos)\r\n   \r\n    document.getElementById('algorithm').innerHTML= 'algorithm' ;\r\n    document.getElementById('time').innerHTML= 'time';\r\n    document.getElementById('distance').innerHTML = 'distance';\r\n\r\n    // document.getElementById('name0').innerHTML= algorithm ;\r\n    // document.getElementById('time0').innerHTML= time;\r\n    // document.getElementById('distance0').innerHTML = distance;\r\n    console.log(performance);\r\n    for(let i=0;i<numberOfAlgos;i++){\r\n      console.log(numberOfAlgos);\r\n\r\n      let time = performance[i].time.toString();\r\n      let algorithm = performance[i].algorithm;\r\n      let distance = performance[i].shortestPathLength.toString();\r\n      \r\n      document.getElementById('name'+i).innerHTML= algorithm ;\r\n      document.getElementById('time'+i).innerHTML= time;\r\n      document.getElementById('distance'+i).innerHTML = distance;\r\n      \r\n    }\r\n  }\r\n \r\n  animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    // if(visitedNodesInOrder==null){\r\n    //   throw(noPathError)\r\n    //   this.clearWalls()\r\n    //   this.startVisualization()\r\n    // }\r\n    for (let i=0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 20 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        if(!(visitedNodesInOrder[i].isStart||visitedNodesInOrder[i].isFinish))\r\n        {\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n        }\r\n      }, 20 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    let j = 0\r\n    for (let i=0; i < nodesInShortestPathOrder.length; i++) \r\n    {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        if(!(nodesInShortestPathOrder[i].isStart||nodesInShortestPathOrder[i].isFinish))\r\n        {\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n        } \r\n      }, 30 * i);\r\n      j++;\r\n    }\r\n    setTimeout(() => {\r\n     this.clearGrid()\r\n    }, 20 * j*2);\r\n    setTimeout(() => {\r\n      this.startVisualization()\r\n        }, 20 * j*2);\r\n    \r\n  }\r\n\r\n  visualizeDijkstra() {\r\n   \r\n    const {grid} = this.state;\r\n    const startNode = grid[10][15];\r\n    const finishNode = grid[10][35];\r\n    var t0=performance.now()\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    var t1=performance.now()\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    // console.log(nodesInShortestPathOrder)\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    this.recordPerofrmence('dijkstras',t1-t0,visitedNodesInOrder.length,nodesInShortestPathOrder.length)\r\n  }\r\n  visualizeAstar() {\r\n   \r\n    const {grid} = this.state;\r\n    const startNode = grid[10][15];\r\n    const finishNode = grid[10][35];\r\n    var t0=performance.now()\r\n    const visitedNodesInOrder = aStar(grid, startNode, finishNode);\r\n    var t1=performance.now()\r\n    // console.log(visitedNodesInOrder)\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    // console.log(nodesInShortestPathOrder)\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    this.recordPerofrmence('astar',t1-t0,visitedNodesInOrder.length,nodesInShortestPathOrder.length)\r\n  }\r\n\r\n\r\n  visualizeBfs() {\r\n    \r\n    const {grid} = this.state;\r\n    const startNode = grid[10][15];\r\n    const finishNode = grid[10][35];\r\n    var t0=performance.now()\r\n    const visitedNodesInOrder =  unweightedSearchAlgorithm(grid, startNode, finishNode,'bfs');\r\n    var t1=performance.now()\r\n    \r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    // console.log(nodesInShortestPathOrder)\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);  \r\n    this.recordPerofrmence('bfs',t1-t0,visitedNodesInOrder.length,nodesInShortestPathOrder.length)\r\n  }\r\n\r\n  visualizeDfs() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[10][15];\r\n    const finishNode = grid[10][35];\r\n    var t0=performance.now()\r\n    const visitedNodesInOrder =  dfs(grid, startNode, finishNode);\r\n    var t1=performance.now()\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    // console.log(nodesInShortestPathOrder)\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);  \r\n    this.recordPerofrmence('dfs',t1-t0,visitedNodesInOrder.length,nodesInShortestPathOrder.length)\r\n  }\r\n\r\n  selectionfunction(algo){\r\n    const {currentAlgorithm}= this.state\r\n    if(!currentAlgorithm.includes(algo)){\r\n    currentAlgorithm.push(algo)\r\n   }\r\n    // console.log(currentAlgorithm)\r\n  }\r\n\r\n  startVisualization(){\r\n      const {currentAlgorithm}= this.state\r\n      var {numberOfAlgos}= this.state\r\n\r\n      // console.log('hu na bhai');\r\n      // console.log(currentAlgorithm)\r\n      // console.log(currentAlgorithm.length);\r\n      var algo=currentAlgorithm.pop()\r\n      numberOfAlgos=numberOfAlgos+1\r\n      console.log(numberOfAlgos)\r\n      if(algo=='dijsktras'){\r\n        // console.log('dijkstras')\r\n        this.visualizeDijkstra()\r\n        // setTimeout(() => {\r\n        //   this.clearGrid()\r\n        // },50 * 3);\r\n        \r\n      }\r\n      if(algo=='astar'){\r\n        // console.log('astar')\r\n        this.visualizeAstar()\r\n        // setTimeout(() => {\r\n        //   this.clearGrid()\r\n        // },50 * 3);\r\n      }\r\n      if(algo=='bfs'){\r\n        // console.log('bfs')\r\n        this.visualizeBfs()\r\n        // setTimeout(() => {\r\n        //   this.clearGrid()\r\n        // },50 * 3);\r\n      }\r\n\r\n      if(algo=='dfs'){\r\n        // console.log('dfs')\r\n        this.visualizeDfs()\r\n        // setTimeout(() => {\r\n        //   this.clearGrid()\r\n        // },50 * 3);\r\n      }\r\n\r\n      if(currentAlgorithm.length === 0){\r\n        this.displayPerformance();\r\n      }\r\n\r\n  }\r\n\r\n  render() {\r\n    \r\n    const {grid, mouseIsPressed} = this.state;\r\n    \r\n    return (\r\n      <>\r\n      <div className=\"navBar\">\r\n        <a href=\"http://localhost:3000/\">  <b> Pathfinding Visualizer </b></a>\r\n        <a>  <button onClick={()=>this.startVisualization()} className=\"newTools\"> <b>Start Visualization </b> </button></a>\r\n        <a>  <button onClick={()=>this.clearGrid()} className=\"newTools\"> <b>Clear Grid </b> </button></a>\r\n        {/* <a>  <button onClick={()=>this.displayPerformance()} className=\"newTools\"> <b> performance </b> </button></a> */}\r\n        {/* <div className=\"dropDown\"> \r\n          <a className=\"dropBtn\"><b> Algorithms </b></a>\r\n          <div className=\"dropdown-algo\">\r\n          <a onClick={() => this.visualizeDijkstra()}> <a> Dijkstra's algorithm</a> </a>\r\n          <a onClick={() => this.visualizeAstar()}> <a> Astar algorithm</a> </a>\r\n          <a onClick={() => this.visualizeBfs()}> <a> Bfs algorithm</a> </a>\r\n          <a onClick={() => this.visualizeDfs()}> <a> Dfs algorithm</a> </a>\r\n          </div> \r\n        </div> \r\n     */}\r\n\r\n\t      <div className=\"dropDown\"> \r\n          <label className=\"dropBtn\"><b> Algorithms </b></label>\r\n          \r\n          \r\n          <select className=\"dropdown-algo\" id=\"dropdown-algo\" multiple>\r\n          <option onClick={()=>this.selectionfunction('dijsktras')} id='dijsktras' className=\"algoBar\"> Dijkstra's algorithm </option> \r\n          <option  onClick={()=>this.selectionfunction('astar')} id='astar' className=\"algoBar\">  Astar algorithm  </option>\r\n          <option  onClick={()=>this.selectionfunction('bfs') }id='bfs' className=\"algoBar\">  Bfs algorithm  </option>\r\n          <option  onClick={()=>this.selectionfunction('dfs')} id='dfs'className=\"algoBar\" >  Dfs algorithm   </option>\r\n          </select> \r\n        </div>\r\n\r\n\r\n\r\n      \r\n        <div className=\"wall\"> \r\n          <a className=\"dropWall\"><b> Wall </b> </a>\r\n          <div className=\"dropdown-wall\">\r\n            <a onClick=\r\n                        {() => \r\n                              { const {grid} = this.state;\r\n                                const newGrid=generateWall1(grid)\r\n                                this.setState({grid: newGrid})\r\n                              }\r\n                        }\r\n            >  <a> Level 1</a> </a> \r\n           <a onClick=\r\n                        {() => \r\n                              {\r\n                                const {grid} = this.state;\r\n                                const newGrid=generateWall2(grid)\r\n                                this.setState({grid: newGrid})\r\n                              }\r\n                        }\r\n            >  <a> Level 2</a> </a> \r\n           <a onClick=\r\n                        {() => \r\n                              {\r\n                                const {grid} = this.state;\r\n                                const newGrid=generateWall3(grid)\r\n                                this.setState({grid: newGrid})\r\n                              }\r\n                        }\r\n            >  <a> Level 3</a> </a> \r\n            <a onClick=\r\n              {()=>\r\n                  {const {grid} = this.state;\r\n                  const newGrid=createMaze(grid)\r\n                  this.setState({grid: newGrid})\r\n                  \r\n                  }\r\n              }\r\n            >  <a> Generate Maze</a> </a>\r\n          </div> \r\n        </div>\r\n       <a href=\"http://localhost:3000/\"> <b> Reset</b></a>\r\n      </div>\r\n\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th id='algorithm'></th>\r\n            <th id='time'></th>\r\n            <th id='distance'></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td id='name0'></td>\r\n            <td id='time0'></td>\r\n            <td id='distance0'></td>\r\n          </tr>\r\n          <tr>\r\n            <td id='name1'></td>\r\n            <td id='time1'></td>\r\n            <td id='distance1'></td>\r\n          </tr>\r\n          <tr>\r\n            <td id='name2'></td>\r\n            <td id='time2'></td>\r\n            <td id='distance2'></td>\r\n          </tr>\r\n          <tr>\r\n            <td id='name3'></td>\r\n            <td id='time3'></td>\r\n            <td id='distance3'></td>\r\n          </tr>\r\n        </tbody>\r\n      </Table>\r\n\r\n      <div className=\"grid\"> \r\n        {grid.map((row, rowIdx) => { \r\n          return (\r\n            <div key={rowIdx}>\r\n              {row.map((node, nodeIdx) => {\r\n                const {row, col, isFinish, isStart, isWall} = node;\r\n                return (\r\n                  <Node\r\n                    key={nodeIdx}\r\n                    col={col}\r\n                    isFinish={isFinish}\r\n                    isStart={isStart}\r\n                    isWall={isWall}\r\n                    mouseIsPressed={mouseIsPressed}\r\n                    onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                    onMouseEnter={(row, col) =>\r\n                      this.handleMouseEnter(row, col)\r\n                    }\r\n                    onMouseUp={() => this.handleMouseUp()}\r\n                    row={row}></Node>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </> \r\n    );     \r\n  }\r\n};\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = []\r\n  for (let row = 0; row < 20; row++) {\r\n    const temp = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      temp.push(createNode(col, row));\r\n    }\r\n    grid.push(temp);\r\n  }\r\n  return grid;\r\n};\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === 10 && col === 15,\r\n    isFinish: row === 10&& col === 35,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\nfunction sleep(milliseconds) {\r\n  var start = new Date().getTime();\r\n  for (var i = 0; i < 1e7; i++) {\r\n    if ((new Date().getTime() - start) > milliseconds){\r\n      break;\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}