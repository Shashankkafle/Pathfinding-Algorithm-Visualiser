{"ast":null,"code":"import { getUnvisitedNeighborsforAstar, findCost } from \"./AlgoTools\";\nexport function aStar(grid, startNode, finishNode) {\n  startNode.distance = 0;\n  startNode.cost = 0;\n  var unvisitedNodes = [];\n  var visitedNodes = [];\n  unvisitedNodes.push(startNode);\n\n  while (unvisitedNodes.length > 0) {\n    var cheapestIndex = 0,\n        cheapestNode = unvisitedNodes[0];\n\n    for (var i = 0; i < unvisitedNodes.length; i++) {\n      if (unvisitedNodes[i].cost < cheapestNode.cost) {\n        cheapestIndex = i;\n      }\n    }\n\n    cheapestNode = unvisitedNodes[cheapestIndex];\n\n    if (cheapestNode.isFinish) {\n      return visitedNodes;\n    }\n\n    unvisitedNodes.splice(cheapestIndex, 1);\n    visitedNodes.push(cheapestNode);\n    var unvisitedNeighbours = getUnvisitedNeighborsforAstar(cheapestNode, grid);\n    console.log('Node');\n    console.log(cheapestNode);\n    console.log('Neighbours');\n    console.log(unvisitedNeighbours);\n\n    for (var i = 0; i < unvisitedNeighbours.length; i++) {\n      if (!visitedNodes.includes(unvisitedNeighbours[i])) {\n        var tempdist = cheapestNode.distance + 1;\n        var newPath = false;\n\n        if (unvisitedNodes.includes(unvisitedNeighbours[i])) {\n          if (tempdist < unvisitedNeighbours[i].distance) {\n            unvisitedNeighbours[i].distance = tempdist;\n            newPath = true;\n          }\n        } else {\n          unvisitedNeighbours[i].distance = tempdist;\n          newPath = true;\n          unvisitedNodes.push(unvisitedNeighbours[i]);\n        }\n\n        if (newPath) {\n          findCost(unvisitedNeighbours[i], finishNode);\n          unvisitedNeighbours[i].previousNode = cheapestNode;\n        }\n\n        findCost(unvisitedNeighbours[i], finishNode);\n      }\n    }\n  }\n\n  console.log('no solution');\n  return null;\n}","map":{"version":3,"sources":["C:/Users/Acer/Pathfinding-Algorithm-Visualiser/Minor_project/src/Algorithms/Astar.jsx"],"names":["getUnvisitedNeighborsforAstar","findCost","aStar","grid","startNode","finishNode","distance","cost","unvisitedNodes","visitedNodes","push","length","cheapestIndex","cheapestNode","i","isFinish","splice","unvisitedNeighbours","console","log","includes","tempdist","newPath","previousNode"],"mappings":"AAAA,SAAQA,6BAAR,EAAsCC,QAAtC,QAAsD,aAAtD;AACA,OAAO,SAASC,KAAT,CAAeC,IAAf,EAAqBC,SAArB,EAAgCC,UAAhC,EACP;AAAID,EAAAA,SAAS,CAACE,QAAV,GAAqB,CAArB;AACAF,EAAAA,SAAS,CAACG,IAAV,GAAiB,CAAjB;AACA,MAAIC,cAAc,GAAC,EAAnB;AACA,MAAIC,YAAY,GAAC,EAAjB;AACAD,EAAAA,cAAc,CAACE,IAAf,CAAoBN,SAApB;;AACA,SAAMI,cAAc,CAACG,MAAf,GAAsB,CAA5B,EACA;AAAO,QAAIC,aAAa,GAAC,CAAlB;AAAA,QAAoBC,YAAY,GAACL,cAAc,CAAC,CAAD,CAA/C;;AACF,SAAI,IAAIM,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACN,cAAc,CAACG,MAA7B,EAAoCG,CAAC,EAArC,EACD;AACI,UAAGN,cAAc,CAACM,CAAD,CAAd,CAAkBP,IAAlB,GAAuBM,YAAY,CAACN,IAAvC,EACA;AACIK,QAAAA,aAAa,GAACE,CAAd;AACH;AACJ;;AACDD,IAAAA,YAAY,GAACL,cAAc,CAACI,aAAD,CAA3B;;AACA,QAAGC,YAAY,CAACE,QAAhB,EACA;AACI,aAAON,YAAP;AACH;;AACDD,IAAAA,cAAc,CAACQ,MAAf,CAAsBJ,aAAtB,EAAoC,CAApC;AACAH,IAAAA,YAAY,CAACC,IAAb,CAAkBG,YAAlB;AACA,QAAII,mBAAmB,GAACjB,6BAA6B,CAACa,YAAD,EAAcV,IAAd,CAArD;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYN,YAAZ;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,mBAAZ;;AACA,SAAI,IAAIH,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACG,mBAAmB,CAACN,MAAlC,EAAyCG,CAAC,EAA1C,EACA;AACI,UAAG,CAACL,YAAY,CAACW,QAAb,CAAsBH,mBAAmB,CAACH,CAAD,CAAzC,CAAJ,EACA;AACI,YAAIO,QAAQ,GAACR,YAAY,CAACP,QAAb,GAAsB,CAAnC;AACA,YAAIgB,OAAO,GAAG,KAAd;;AACA,YAAGd,cAAc,CAACY,QAAf,CAAwBH,mBAAmB,CAACH,CAAD,CAA3C,CAAH,EACA;AACI,cAAGO,QAAQ,GAACJ,mBAAmB,CAACH,CAAD,CAAnB,CAAuBR,QAAnC,EACA;AACIW,YAAAA,mBAAmB,CAACH,CAAD,CAAnB,CAAuBR,QAAvB,GAAgCe,QAAhC;AACAC,YAAAA,OAAO,GAAC,IAAR;AACH;AACJ,SAPD,MASA;AACIL,UAAAA,mBAAmB,CAACH,CAAD,CAAnB,CAAuBR,QAAvB,GAAgCe,QAAhC;AACAC,UAAAA,OAAO,GAAC,IAAR;AACAd,UAAAA,cAAc,CAACE,IAAf,CAAoBO,mBAAmB,CAACH,CAAD,CAAvC;AACH;;AACD,YAAGQ,OAAH,EAAW;AACRrB,UAAAA,QAAQ,CAACgB,mBAAmB,CAACH,CAAD,CAApB,EAAwBT,UAAxB,CAAR;AACAY,UAAAA,mBAAmB,CAACH,CAAD,CAAnB,CAAuBS,YAAvB,GAAqCV,YAArC;AACF;;AACDZ,QAAAA,QAAQ,CAACgB,mBAAmB,CAACH,CAAD,CAApB,EAAwBT,UAAxB,CAAR;AACH;AACJ;AACJ;;AACDa,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,SAAO,IAAP;AACH","sourcesContent":["import {getUnvisitedNeighborsforAstar,findCost } from \"./AlgoTools\";\r\nexport function aStar(grid, startNode, finishNode)\r\n{   startNode.distance = 0;\r\n    startNode.cost = 0\r\n    var unvisitedNodes=[]\r\n    var visitedNodes=[] \r\n    unvisitedNodes.push(startNode)\r\n    while(unvisitedNodes.length>0)\r\n    {      var cheapestIndex=0,cheapestNode=unvisitedNodes[0]         \r\n         for(var i=0;i<unvisitedNodes.length;i++) \r\n        { \r\n            if(unvisitedNodes[i].cost<cheapestNode.cost)\r\n            {      \r\n                cheapestIndex=i\r\n            }\r\n        }\r\n        cheapestNode=unvisitedNodes[cheapestIndex]\r\n        if(cheapestNode.isFinish)\r\n        { \r\n            return(visitedNodes)\r\n        }  \r\n        unvisitedNodes.splice(cheapestIndex,1)  \r\n        visitedNodes.push(cheapestNode)\r\n        var unvisitedNeighbours=getUnvisitedNeighborsforAstar(cheapestNode,grid) \r\n        console.log('Node')\r\n        console.log(cheapestNode)\r\n        console.log('Neighbours') \r\n        console.log(unvisitedNeighbours)\r\n        for(var i=0;i<unvisitedNeighbours.length;i++) \r\n        {          \r\n            if(!visitedNodes.includes(unvisitedNeighbours[i]))\r\n            {\r\n                var tempdist=cheapestNode.distance+1\r\n                var newPath = false;\r\n                if(unvisitedNodes.includes(unvisitedNeighbours[i]))\r\n                {\r\n                    if(tempdist<unvisitedNeighbours[i].distance)\r\n                    {\r\n                        unvisitedNeighbours[i].distance=tempdist\r\n                        newPath=true\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    unvisitedNeighbours[i].distance=tempdist\r\n                    newPath=true\r\n                    unvisitedNodes.push(unvisitedNeighbours[i])\r\n                }\r\n                if(newPath){\r\n                   findCost(unvisitedNeighbours[i],finishNode)\r\n                   unvisitedNeighbours[i].previousNode= cheapestNode\r\n                }\r\n                findCost(unvisitedNeighbours[i],finishNode)\r\n            } \r\n        }      \r\n    }\r\n    console.log('no solution');\r\n    return null\r\n}"]},"metadata":{},"sourceType":"module"}