{"ast":null,"code":"var _jsxFileName = \"E:\\\\Pathfinding-Algorithm-Visualiser - Copy\\\\Minor_project\\\\src\\\\Grid.jsx\";\nimport React from 'react';\nimport { Component } from 'react';\nimport Node from './Node.jsx';\nimport './grid.css';\nimport { getAllNodes, getNodesInShortestPathOrder } from './Algorithms/AlgoTools';\nimport { dijkstra } from './Algorithms/Dijkstras';\nimport { aStar } from './Algorithms/Astar';\nimport { generateWall1, generateWall2, generateWall3 } from './obstacles/RandomWalls';\nimport { createMaze } from './obstacles/Maze';\nimport { unweightedSearchAlgorithm } from './Algorithms/BFS';\nimport { dfs } from './Algorithms/DFS';\nimport Table from 'react-bootstrap/Table';\nexport default class Grid extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      currentAlgorithm: [],\n      performance: [],\n      numberOfAlgos: 0,\n      disabledStart: true\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    getAllNodes(grid);\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  clearGrid() {\n    const {\n      grid\n    } = this.state;\n\n    for (var i = 0; i < grid.length; i++) {\n      for (var j = 0; j < grid[i].length; j++) {\n        grid[i][j].isVisited = false;\n        if (!grid[i][j].isStart && !grid[i][j].isFinish && !grid[i][j].isWall) document.getElementById(`node-${grid[i][j].row}-${grid[i][j].col}`).className = 'node ';\n      }\n    }\n  }\n\n  clearWalls() {\n    const {\n      grid\n    } = this.state;\n\n    for (var i = 0; i < grid.length; i++) {\n      for (var j = 0; j < grid[i].length; j++) {\n        grid[i][j].isVisited = false;\n        grid[i][j].isWall = false;\n        if (!grid[i][j].isStart && !grid[i][j].isFinish) document.getElementById(`node-${grid[i][j].row}-${grid[i][j].col}`).className = 'node ';\n      }\n    }\n  }\n\n  recordPerofrmence(algo, time, numberOfVisited, lengthOfSHortestPath) {\n    const {\n      performance\n    } = this.state;\n    var tempPerformance = new Object();\n    tempPerformance.algorithm = algo;\n    tempPerformance.time = time;\n    tempPerformance.shortestPathLength = lengthOfSHortestPath;\n    tempPerformance.numberOfVisitedNodes = numberOfVisited;\n    performance.push(tempPerformance);\n  } // displayPerformance(){\n  //   const {performance} = this.state;\n  //   const {numberOfAlgos}= this.state\n  //   var colName=document.getElementById('algorithm')\n  //   var colTime=document.getElementById('time')\n  //   var colShortestDistance = document.getElementById('distance')\n  //   var colNumberOfVisited= document.getElementById('visitedNodes')\n  //   colName.innerHTML= 'algorithm' ;\n  //   colTime.innerHTML= 'time';\n  //   colShortestDistance.innerHTML = 'Shortest Path Length'\n  //   colNumberOfVisited.innerHTML='Number Of Visited Nodes'\n  //   var name=[],time=[],shrotestDistance=[],numberOfNodes=[];\n  //   if(numberOfAlgos==4){\n  //     this.setState({\n  //       numberOfAlgos:1\n  //     })\n  //     console.log('number of algos');\n  //     console.log(numberOfAlgos);\n  //   }\n  //   for(let i=0;i<numberOfAlgos;i++){\n  //     console.log('i')\n  //     console.log(i)\n  //     name[i]=document.getElementById('name'+i)\n  //     console.log('name')\n  //     console.log(name[i])\n  //     time[i]=document.getElementById('time'+i)\n  //     shrotestDistance[i]= document.getElementById('distance'+i)\n  //     numberOfNodes[i]=document.getElementById('visitedNodes'+i)\n  //     name[i].innerHTML= performance[i].algorithm;;\n  //     time[i].innerHTML= performance[i].time.toString() +' ms';\n  //     shrotestDistance[i].innerHTML =  performance[i].shortestPathLength.toString();\n  //     numberOfNodes[i].innerHTML=performance[i].numberOfVisitedNodes.toString()\n  //   }\n  //   this.showComparison();\n  // }\n  // showComparison(){\n  //   const {performance} = this.state;\n  //   const {numberOfAlgos} = this.state;\n  //   var tempPerformance=performance;\n  //   tempPerformance.sort((a,b)=>{\n  //     return(a.time>b.time) ? 1:-1\n  //   })\n  //   document.getElementById('timelist').innerHTML='Algorithms ordered based on time' \n  //   for(let i=0;i<numberOfAlgos;i++){\n  //    document.getElementById('timerow'+i).innerHTML=tempPerformance[i].algorithm;    \n  //   }\n  //   tempPerformance.sort((a,b)=>{\n  //     return(a.numberOfVisitedNodes>b.numberOfVisitedNodes) ? 1:-1\n  //   })\n  //   document.getElementById('spacelist').innerHTML='Algorithms ordered based on space';\n  //   for(let i=0;i<numberOfAlgos;i++){\n  //     document.getElementById('spacerow'+i).innerHTML=tempPerformance[i].algorithm;     \n  //   }   \n  // }\n\n\n  animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\n    const {\n      grid\n    } = this.state;\n\n    if (!visitedNodesInOrder.includes(grid[10][35])) {\n      alert('No path avilable. Please try again');\n      window.location.reload();\n    }\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 0 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n\n        if (!(visitedNodesInOrder[i].isStart || visitedNodesInOrder[i].isFinish)) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n        }\n      }, 0 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    let j = 0;\n\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n\n        if (!(nodesInShortestPathOrder[i].isStart || nodesInShortestPathOrder[i].isFinish)) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n        }\n      }, 0 * i);\n      j++;\n    }\n\n    setTimeout(() => {\n      this.clearGrid();\n    }, 0 * j * 2);\n    setTimeout(() => {\n      this.startVisualization();\n    }, 0 * j * 2);\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[10][15];\n    const finishNode = grid[10][35];\n    var t0 = performance.now();\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    var t1 = performance.now();\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    this.recordPerofrmence('dijkstras', t1 - t0, visitedNodesInOrder.length, nodesInShortestPathOrder.length);\n  }\n\n  visualizeAstar() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[10][15];\n    const finishNode = grid[10][35];\n    var t0 = performance.now();\n    const visitedNodesInOrder = aStar(grid, startNode, finishNode);\n    var t1 = performance.now();\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    this.recordPerofrmence('astar', t1 - t0, visitedNodesInOrder.length, nodesInShortestPathOrder.length);\n  }\n\n  visualizeBfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[10][15];\n    const finishNode = grid[10][35];\n    var t0 = performance.now();\n    const visitedNodesInOrder = unweightedSearchAlgorithm(grid, startNode, finishNode);\n    var t1 = performance.now();\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    this.recordPerofrmence('bfs', t1 - t0, visitedNodesInOrder.length, nodesInShortestPathOrder.length);\n  }\n\n  visualizeDfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[10][15];\n    const finishNode = grid[10][35];\n    var t0 = performance.now();\n    const visitedNodesInOrder = dfs(grid, startNode, finishNode);\n    var t1 = performance.now();\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    this.recordPerofrmence('dfs', t1 - t0, visitedNodesInOrder.length, nodesInShortestPathOrder.length);\n  }\n\n  selectionfunction(algo) {\n    const {\n      currentAlgorithm\n    } = this.state;\n    const {\n      numberOfAlgos\n    } = this.state;\n\n    if (!currentAlgorithm.includes(algo)) {\n      currentAlgorithm.push(algo);\n      this.setState({\n        numberOfAlgos: numberOfAlgos + 1\n      });\n      this.setState({\n        disabledStart: false\n      });\n    }\n  }\n\n  startVisualization() {\n    const {\n      currentAlgorithm\n    } = this.state;\n    const {\n      numberOfAlgos\n    } = this.state;\n    var algo = currentAlgorithm.pop();\n    this.setState({\n      disabledStart: true\n    });\n    var currentAlgo = document.getElementById('currentAlgo');\n\n    if (algo != undefined) {\n      currentAlgo.innerHTML = 'Current Algorithm: ' + ' ' + algo;\n    } else {\n      currentAlgo.innerHTML = '';\n    }\n\n    if (algo == 'dijsktras') {\n      this.visualizeDijkstra();\n    }\n\n    if (algo == 'astar') {\n      this.visualizeAstar();\n    }\n\n    if (algo == 'bfs') {\n      this.visualizeBfs();\n    }\n\n    if (algo == 'dfs') {\n      this.visualizeDfs();\n    } // if(currentAlgorithm.length === 0){\n    //   document.getElementById('table').style.display = 'inline-table';\n    //   document.getElementById('timeList').style.display = 'block';\n    //   document.getElementById('spaceList').style.display = 'block';\n    //   // this.displayPerformance();\n    // }\n\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"navBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"http://localhost:3000/\",\n      className: \"onlyLeft\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }\n    }, \"  \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 65\n      }\n    }, \" Pathfinding Visualizer \")), /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }\n    }, \"  \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.startVisualization(),\n      className: \"newTools\",\n      disabled: this.state.disabledStart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 14\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 120\n      }\n    }, \"Visualize!\"), \" \")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dropDown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"dropBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 38\n      }\n    }, \" Algorithms \")), /*#__PURE__*/React.createElement(\"select\", {\n      className: \"dropdown-algo\",\n      id: \"dropdown-algo\",\n      multiple: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      onClick: () => this.selectionfunction('dijsktras'),\n      id: \"dijsktras\",\n      className: \"algoBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 11\n      }\n    }, \" Dijkstra's algorithm \"), /*#__PURE__*/React.createElement(\"option\", {\n      onClick: () => this.selectionfunction('astar'),\n      id: \"astar\",\n      className: \"algoBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 11\n      }\n    }, \"  Astar algorithm  \"), /*#__PURE__*/React.createElement(\"option\", {\n      onClick: () => this.selectionfunction('bfs'),\n      id: \"bfs\",\n      className: \"algoBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 11\n      }\n    }, \"  Bfs algorithm  \"), /*#__PURE__*/React.createElement(\"option\", {\n      onClick: () => this.selectionfunction('dfs'),\n      id: \"dfs\",\n      className: \"algoBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 11\n      }\n    }, \"  Dfs algorithm   \"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"wall\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"dropWall\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 35\n      }\n    }, \" Wall \"), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dropdown-wall\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => {\n        const {\n          grid\n        } = this.state;\n        const newGrid = generateWall1(grid);\n        this.setState({\n          grid: newGrid\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 13\n      }\n    }, \"  \", /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 16\n      }\n    }, \" Level 1\"), \" \"), /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => {\n        const {\n          grid\n        } = this.state;\n        const newGrid = generateWall2(grid);\n        this.setState({\n          grid: newGrid\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 12\n      }\n    }, \"  \", /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 16\n      }\n    }, \" Level 2\"), \" \"), /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => {\n        const {\n          grid\n        } = this.state;\n        const newGrid = generateWall3(grid);\n        this.setState({\n          grid: newGrid\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 12\n      }\n    }, \"  \", /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 16\n      }\n    }, \" Level 3\"), \" \"), /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => {\n        const {\n          grid\n        } = this.state;\n        const newGrid = createMaze(grid);\n        this.setState({\n          grid: newGrid\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 13\n      }\n    }, \"  \", /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 16\n      }\n    }, \" Generate Maze\"), \" \"))), /*#__PURE__*/React.createElement(\"a\", {\n      href: \"http://localhost:3000/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 8\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 42\n      }\n    }, \" Reset\"))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"currentAlgo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 7\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 13\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isFinish,\n          isStart,\n          isWall\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 19\n          }\n        });\n      }));\n    })));\n  }\n\n}\n;\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const temp = [];\n\n    for (let col = 0; col < 50; col++) {\n      temp.push(createNode(col, row));\n    }\n\n    grid.push(temp);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === 10 && col === 15,\n    isFinish: row === 10 && col === 35,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["E:/Pathfinding-Algorithm-Visualiser - Copy/Minor_project/src/Grid.jsx"],"names":["React","Component","Node","getAllNodes","getNodesInShortestPathOrder","dijkstra","aStar","generateWall1","generateWall2","generateWall3","createMaze","unweightedSearchAlgorithm","dfs","Table","Grid","constructor","state","grid","mouseIsPressed","currentAlgorithm","performance","numberOfAlgos","disabledStart","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","clearGrid","i","length","j","isVisited","isStart","isFinish","isWall","document","getElementById","className","clearWalls","recordPerofrmence","algo","time","numberOfVisited","lengthOfSHortestPath","tempPerformance","Object","algorithm","shortestPathLength","numberOfVisitedNodes","push","animateAlgorithm","visitedNodesInOrder","nodesInShortestPathOrder","includes","alert","window","location","reload","setTimeout","animateShortestPath","node","startVisualization","visualizeDijkstra","startNode","finishNode","t0","now","t1","visualizeAstar","visualizeBfs","visualizeDfs","selectionfunction","pop","currentAlgo","undefined","innerHTML","render","map","rowIdx","nodeIdx","temp","createNode","distance","Infinity","previousNode","slice","newNode"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAO,YAAP;AACA,SAAQC,WAAR,EAAqBC,2BAArB,QAAuD,wBAAvD;AACA,SAAQC,QAAR,QAAuB,wBAAvB;AACA,SAAQC,KAAR,QAAoB,oBAApB;AACA,SAAQC,aAAR,EAAsBC,aAAtB,EAAoCC,aAApC,QAAwD,yBAAxD;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAAQC,yBAAR,QAAwC,kBAAxC;AACA,SAAQC,GAAR,QAAkB,kBAAlB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AAEA,eAAe,MAAMC,IAAN,SAAmBb,SAAnB,CACf;AACEc,EAAAA,WAAW,GACT;AACI;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,cAAc,EAAE,KAFL;AAGXC,MAAAA,gBAAgB,EAAE,EAHP;AAIXC,MAAAA,WAAW,EAAC,EAJD;AAKXC,MAAAA,aAAa,EAAC,CALH;AAMXC,MAAAA,aAAa,EAAC;AANH,KAAb;AAQH;;AAGHC,EAAAA,iBAAiB,GAAG;AAClB,UAAMN,IAAI,GAAGO,cAAc,EAA3B;AACArB,IAAAA,WAAW,CAACc,IAAD,CAAX;AACA,SAAKQ,QAAL,CAAc;AAACR,MAAAA;AAAD,KAAd;AACD;;AAGDS,EAAAA,eAAe,CAACC,GAAD,EAAMC,GAAN,EAAW;AACxB,UAAMC,OAAO,GAAGC,yBAAyB,CAAC,KAAKd,KAAL,CAAWC,IAAZ,EAAkBU,GAAlB,EAAuBC,GAAvB,CAAzC;AACA,SAAKH,QAAL,CAAc;AAACR,MAAAA,IAAI,EAAEY,OAAP;AAAgBX,MAAAA,cAAc,EAAE;AAAhC,KAAd;AACD;;AAEDa,EAAAA,gBAAgB,CAACJ,GAAD,EAAMC,GAAN,EAAW;AACzB,QAAI,CAAC,KAAKZ,KAAL,CAAWE,cAAhB,EAAgC;AAChC,UAAMW,OAAO,GAAGC,yBAAyB,CAAC,KAAKd,KAAL,CAAWC,IAAZ,EAAkBU,GAAlB,EAAuBC,GAAvB,CAAzC;AACA,SAAKH,QAAL,CAAc;AAACR,MAAAA,IAAI,EAAEY;AAAP,KAAd;AACD;;AAEDG,EAAAA,aAAa,GAAG;AACd,SAAKP,QAAL,CAAc;AAACP,MAAAA,cAAc,EAAE;AAAjB,KAAd;AACD;;AAEDe,EAAAA,SAAS,GAAE;AACT,UAAM;AAAChB,MAAAA;AAAD,QAAO,KAAKD,KAAlB;;AACA,SAAI,IAAIkB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACjB,IAAI,CAACkB,MAAnB,EAA0BD,CAAC,EAA3B,EAA8B;AAC5B,WAAI,IAAIE,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACnB,IAAI,CAACiB,CAAD,CAAJ,CAAQC,MAAtB,EAA6BC,CAAC,EAA9B,EAAiC;AAE/BnB,QAAAA,IAAI,CAACiB,CAAD,CAAJ,CAAQE,CAAR,EAAWC,SAAX,GAAqB,KAArB;AACA,YAAI,CAACpB,IAAI,CAACiB,CAAD,CAAJ,CAAQE,CAAR,EAAWE,OAAb,IAAwB,CAACrB,IAAI,CAACiB,CAAD,CAAJ,CAAQE,CAAR,EAAWG,QAApC,IAAgD,CAACtB,IAAI,CAACiB,CAAD,CAAJ,CAAQE,CAAR,EAAWI,MAA/D,EACAC,QAAQ,CAACC,cAAT,CAAyB,QAAOzB,IAAI,CAACiB,CAAD,CAAJ,CAAQE,CAAR,EAAWT,GAAI,IAAGV,IAAI,CAACiB,CAAD,CAAJ,CAAQE,CAAR,EAAWR,GAAI,EAAjE,EAAoEe,SAApE,GACA,OADA;AAED;AACF;AACF;;AAEDC,EAAAA,UAAU,GAAE;AACV,UAAM;AAAC3B,MAAAA;AAAD,QAAO,KAAKD,KAAlB;;AACA,SAAI,IAAIkB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACjB,IAAI,CAACkB,MAAnB,EAA0BD,CAAC,EAA3B,EAA8B;AAC5B,WAAI,IAAIE,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACnB,IAAI,CAACiB,CAAD,CAAJ,CAAQC,MAAtB,EAA6BC,CAAC,EAA9B,EAAiC;AAE/BnB,QAAAA,IAAI,CAACiB,CAAD,CAAJ,CAAQE,CAAR,EAAWC,SAAX,GAAqB,KAArB;AACApB,QAAAA,IAAI,CAACiB,CAAD,CAAJ,CAAQE,CAAR,EAAWI,MAAX,GAAkB,KAAlB;AACA,YAAI,CAACvB,IAAI,CAACiB,CAAD,CAAJ,CAAQE,CAAR,EAAWE,OAAb,IAAwB,CAACrB,IAAI,CAACiB,CAAD,CAAJ,CAAQE,CAAR,EAAWG,QAAvC,EACAE,QAAQ,CAACC,cAAT,CAAyB,QAAOzB,IAAI,CAACiB,CAAD,CAAJ,CAAQE,CAAR,EAAWT,GAAI,IAAGV,IAAI,CAACiB,CAAD,CAAJ,CAAQE,CAAR,EAAWR,GAAI,EAAjE,EAAoEe,SAApE,GACA,OADA;AAED;AACF;AACF;;AAEDE,EAAAA,iBAAiB,CAACC,IAAD,EAAMC,IAAN,EAAWC,eAAX,EAA2BC,oBAA3B,EAAgD;AAC/D,UAAM;AAAC7B,MAAAA;AAAD,QAAc,KAAKJ,KAAzB;AACA,QAAIkC,eAAe,GAAG,IAAIC,MAAJ,EAAtB;AACAD,IAAAA,eAAe,CAACE,SAAhB,GAA0BN,IAA1B;AACAI,IAAAA,eAAe,CAACH,IAAhB,GAAqBA,IAArB;AACAG,IAAAA,eAAe,CAACG,kBAAhB,GAAmCJ,oBAAnC;AACAC,IAAAA,eAAe,CAACI,oBAAhB,GAAqCN,eAArC;AACA5B,IAAAA,WAAW,CAACmC,IAAZ,CAAiBL,eAAjB;AAED,GAzEH,CA2EE;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;;AAEAM,EAAAA,gBAAgB,CAACC,mBAAD,EAAsBC,wBAAtB,EAAgD;AAC9D,UAAM;AAACzC,MAAAA;AAAD,QAAS,KAAKD,KAApB;;AACA,QAAG,CAACyC,mBAAmB,CAACE,QAApB,CAA6B1C,IAAI,CAAC,EAAD,CAAJ,CAAS,EAAT,CAA7B,CAAJ,EAA+C;AAC7C2C,MAAAA,KAAK,CAAC,oCAAD,CAAL;AACDC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACA;;AACD,SAAK,IAAI7B,CAAC,GAAC,CAAX,EAAcA,CAAC,IAAIuB,mBAAmB,CAACtB,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAClD,UAAIA,CAAC,KAAKuB,mBAAmB,CAACtB,MAA9B,EAAsC;AACpC6B,QAAAA,UAAU,CAAC,MAAM;AACf,eAAKC,mBAAL,CAAyBP,wBAAzB;AACD,SAFS,EAEP,IAAIxB,CAFG,CAAV;AAGA;AACD;;AACD8B,MAAAA,UAAU,CAAC,MAAM;AACf,cAAME,IAAI,GAAGT,mBAAmB,CAACvB,CAAD,CAAhC;;AACA,YAAG,EAAEuB,mBAAmB,CAACvB,CAAD,CAAnB,CAAuBI,OAAvB,IAAgCmB,mBAAmB,CAACvB,CAAD,CAAnB,CAAuBK,QAAzD,CAAH,EACA;AACAE,UAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOwB,IAAI,CAACvC,GAAI,IAAGuC,IAAI,CAACtC,GAAI,EAArD,EAAwDe,SAAxD,GACE,mBADF;AAEC;AACF,OAPS,EAOP,IAAIT,CAPG,CAAV;AAQD;AACF;;AAED+B,EAAAA,mBAAmB,CAACP,wBAAD,EAA2B;AAC5C,QAAItB,CAAC,GAAG,CAAR;;AACA,SAAK,IAAIF,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGwB,wBAAwB,CAACvB,MAA3C,EAAmDD,CAAC,EAApD,EACA;AACE8B,MAAAA,UAAU,CAAC,MAAM;AACf,cAAME,IAAI,GAAGR,wBAAwB,CAACxB,CAAD,CAArC;;AACA,YAAG,EAAEwB,wBAAwB,CAACxB,CAAD,CAAxB,CAA4BI,OAA5B,IAAqCoB,wBAAwB,CAACxB,CAAD,CAAxB,CAA4BK,QAAnE,CAAH,EACA;AACAE,UAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOwB,IAAI,CAACvC,GAAI,IAAGuC,IAAI,CAACtC,GAAI,EAArD,EAAwDe,SAAxD,GACE,yBADF;AAEC;AACF,OAPS,EAOP,IAAIT,CAPG,CAAV;AAQAE,MAAAA,CAAC;AACF;;AACD4B,IAAAA,UAAU,CAAC,MAAM;AAChB,WAAK/B,SAAL;AACA,KAFS,EAEP,IAAIG,CAAJ,GAAM,CAFC,CAAV;AAGA4B,IAAAA,UAAU,CAAC,MAAM;AACf,WAAKG,kBAAL;AACG,KAFK,EAEH,IAAI/B,CAAJ,GAAM,CAFH,CAAV;AAID;;AAEDgC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAACnD,MAAAA;AAAD,QAAS,KAAKD,KAApB;AACA,UAAMqD,SAAS,GAAGpD,IAAI,CAAC,EAAD,CAAJ,CAAS,EAAT,CAAlB;AACA,UAAMqD,UAAU,GAAGrD,IAAI,CAAC,EAAD,CAAJ,CAAS,EAAT,CAAnB;AACA,QAAIsD,EAAE,GAACnD,WAAW,CAACoD,GAAZ,EAAP;AACA,UAAMf,mBAAmB,GAAGpD,QAAQ,CAACY,IAAD,EAAOoD,SAAP,EAAkBC,UAAlB,CAApC;AACA,QAAIG,EAAE,GAACrD,WAAW,CAACoD,GAAZ,EAAP;AACA,UAAMd,wBAAwB,GAAGtD,2BAA2B,CAACkE,UAAD,CAA5D;AACA,SAAKd,gBAAL,CAAsBC,mBAAtB,EAA2CC,wBAA3C;AACA,SAAKb,iBAAL,CAAuB,WAAvB,EAAmC4B,EAAE,GAACF,EAAtC,EAAyCd,mBAAmB,CAACtB,MAA7D,EAAoEuB,wBAAwB,CAACvB,MAA7F;AACD;;AACDuC,EAAAA,cAAc,GAAG;AACf,UAAM;AAACzD,MAAAA;AAAD,QAAS,KAAKD,KAApB;AACA,UAAMqD,SAAS,GAAGpD,IAAI,CAAC,EAAD,CAAJ,CAAS,EAAT,CAAlB;AACA,UAAMqD,UAAU,GAAGrD,IAAI,CAAC,EAAD,CAAJ,CAAS,EAAT,CAAnB;AACA,QAAIsD,EAAE,GAACnD,WAAW,CAACoD,GAAZ,EAAP;AACA,UAAMf,mBAAmB,GAAGnD,KAAK,CAACW,IAAD,EAAOoD,SAAP,EAAkBC,UAAlB,CAAjC;AACA,QAAIG,EAAE,GAACrD,WAAW,CAACoD,GAAZ,EAAP;AACA,UAAMd,wBAAwB,GAAGtD,2BAA2B,CAACkE,UAAD,CAA5D;AACA,SAAKd,gBAAL,CAAsBC,mBAAtB,EAA2CC,wBAA3C;AACA,SAAKb,iBAAL,CAAuB,OAAvB,EAA+B4B,EAAE,GAACF,EAAlC,EAAqCd,mBAAmB,CAACtB,MAAzD,EAAgEuB,wBAAwB,CAACvB,MAAzF;AACD;;AAGDwC,EAAAA,YAAY,GAAG;AACb,UAAM;AAAC1D,MAAAA;AAAD,QAAS,KAAKD,KAApB;AACA,UAAMqD,SAAS,GAAGpD,IAAI,CAAC,EAAD,CAAJ,CAAS,EAAT,CAAlB;AACA,UAAMqD,UAAU,GAAGrD,IAAI,CAAC,EAAD,CAAJ,CAAS,EAAT,CAAnB;AACA,QAAIsD,EAAE,GAACnD,WAAW,CAACoD,GAAZ,EAAP;AACA,UAAMf,mBAAmB,GAAI9C,yBAAyB,CAACM,IAAD,EAAOoD,SAAP,EAAkBC,UAAlB,CAAtD;AACA,QAAIG,EAAE,GAACrD,WAAW,CAACoD,GAAZ,EAAP;AACA,UAAMd,wBAAwB,GAAGtD,2BAA2B,CAACkE,UAAD,CAA5D;AACA,SAAKd,gBAAL,CAAsBC,mBAAtB,EAA2CC,wBAA3C;AACA,SAAKb,iBAAL,CAAuB,KAAvB,EAA6B4B,EAAE,GAACF,EAAhC,EAAmCd,mBAAmB,CAACtB,MAAvD,EAA8DuB,wBAAwB,CAACvB,MAAvF;AACD;;AAEDyC,EAAAA,YAAY,GAAG;AACb,UAAM;AAAC3D,MAAAA;AAAD,QAAS,KAAKD,KAApB;AACA,UAAMqD,SAAS,GAAGpD,IAAI,CAAC,EAAD,CAAJ,CAAS,EAAT,CAAlB;AACA,UAAMqD,UAAU,GAAGrD,IAAI,CAAC,EAAD,CAAJ,CAAS,EAAT,CAAnB;AACA,QAAIsD,EAAE,GAACnD,WAAW,CAACoD,GAAZ,EAAP;AACA,UAAMf,mBAAmB,GAAI7C,GAAG,CAACK,IAAD,EAAOoD,SAAP,EAAkBC,UAAlB,CAAhC;AACA,QAAIG,EAAE,GAACrD,WAAW,CAACoD,GAAZ,EAAP;AACA,UAAMd,wBAAwB,GAAGtD,2BAA2B,CAACkE,UAAD,CAA5D;AACA,SAAKd,gBAAL,CAAsBC,mBAAtB,EAA2CC,wBAA3C;AACA,SAAKb,iBAAL,CAAuB,KAAvB,EAA6B4B,EAAE,GAACF,EAAhC,EAAmCd,mBAAmB,CAACtB,MAAvD,EAA8DuB,wBAAwB,CAACvB,MAAvF;AACD;;AAED0C,EAAAA,iBAAiB,CAAC/B,IAAD,EAAM;AACrB,UAAM;AAAC3B,MAAAA;AAAD,QAAoB,KAAKH,KAA/B;AACA,UAAM;AAACK,MAAAA;AAAD,QAAiB,KAAKL,KAA5B;;AACA,QAAG,CAACG,gBAAgB,CAACwC,QAAjB,CAA0Bb,IAA1B,CAAJ,EAAoC;AACpC3B,MAAAA,gBAAgB,CAACoC,IAAjB,CAAsBT,IAAtB;AACA,WAAKrB,QAAL,CAAc;AACZJ,QAAAA,aAAa,EAACA,aAAa,GAAC;AADhB,OAAd;AAGA,WAAKI,QAAL,CAAc;AACZH,QAAAA,aAAa,EAAC;AADF,OAAd;AAGA;AACD;;AAED6C,EAAAA,kBAAkB,GAAE;AAChB,UAAM;AAAChD,MAAAA;AAAD,QAAoB,KAAKH,KAA/B;AACA,UAAM;AAACK,MAAAA;AAAD,QAAiB,KAAKL,KAA5B;AACA,QAAI8B,IAAI,GAAC3B,gBAAgB,CAAC2D,GAAjB,EAAT;AACA,SAAKrD,QAAL,CAAc;AACZH,MAAAA,aAAa,EAAC;AADF,KAAd;AAGD,QAAIyD,WAAW,GAAEtC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAjB;;AACA,QAAGI,IAAI,IAAEkC,SAAT,EAAmB;AACnBD,MAAAA,WAAW,CAACE,SAAZ,GAAuB,wBAAuB,GAAvB,GAA6BnC,IAApD;AACC,KAFD,MAGI;AACHiC,MAAAA,WAAW,CAACE,SAAZ,GAAsB,EAAtB;AACA;;AACA,QAAGnC,IAAI,IAAE,WAAT,EAAqB;AAEnB,WAAKsB,iBAAL;AACD;;AACD,QAAGtB,IAAI,IAAE,OAAT,EAAiB;AAEf,WAAK4B,cAAL;AACD;;AACD,QAAG5B,IAAI,IAAE,KAAT,EAAe;AACb,WAAK6B,YAAL;AACD;;AAED,QAAG7B,IAAI,IAAE,KAAT,EAAe;AACb,WAAK8B,YAAL;AACD,KA5Be,CA6BhB;AAEA;AACA;AACA;AAEA;AACA;;AACH;;AAEDM,EAAAA,MAAM,GAAG;AAEP,UAAM;AAACjE,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAyB,KAAKF,KAApC;AAEA,wBACE,uDACA;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAG,MAAA,IAAI,EAAC,wBAAR;AAAiC,MAAA,SAAS,EAAC,UAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAxD,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAK;AAAS,MAAA,OAAO,EAAE,MAAI,KAAKmD,kBAAL,EAAtB;AAAgD,MAAA,SAAS,EAAC,UAA1D;AAAqE,MAAA,QAAQ,EAAE,KAAKnD,KAAL,CAAWM,aAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA0G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA1G,MAAL,CAFF,eAGC;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG;AAAO,MAAA,SAAS,EAAC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA3B,CADH,eAEG;AAAQ,MAAA,SAAS,EAAC,eAAlB;AAAkC,MAAA,EAAE,EAAC,eAArC;AAAqD,MAAA,QAAQ,MAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAQ,MAAA,OAAO,EAAE,MAAI,KAAKuD,iBAAL,CAAuB,WAAvB,CAArB;AAA0D,MAAA,EAAE,EAAC,WAA7D;AAAyE,MAAA,SAAS,EAAC,SAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADA,eAEA;AAAS,MAAA,OAAO,EAAE,MAAI,KAAKA,iBAAL,CAAuB,OAAvB,CAAtB;AAAuD,MAAA,EAAE,EAAC,OAA1D;AAAkE,MAAA,SAAS,EAAC,SAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAFA,eAGA;AAAS,MAAA,OAAO,EAAE,MAAI,KAAKA,iBAAL,CAAuB,KAAvB,CAAtB;AAAqD,MAAA,EAAE,EAAC,KAAxD;AAA8D,MAAA,SAAS,EAAC,SAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAHA,eAIA;AAAS,MAAA,OAAO,EAAE,MAAI,KAAKA,iBAAL,CAAuB,KAAvB,CAAtB;AAAqD,MAAA,EAAE,EAAC,KAAxD;AAA6D,MAAA,SAAS,EAAC,SAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAJA,CAFH,CAHD,eAaE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAxB,MADF,eAEE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAG,MAAA,OAAO,EACG,MACK;AAAE,cAAM;AAAC5D,UAAAA;AAAD,YAAS,KAAKD,KAApB;AACA,cAAMa,OAAO,GAACtB,aAAa,CAACU,IAAD,CAA3B;AACA,aAAKQ,QAAL,CAAc;AAACR,UAAAA,IAAI,EAAEY;AAAP,SAAd;AACD,OALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAOG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPH,MADF,eASC;AAAG,MAAA,OAAO,EACI,MACK;AACE,cAAM;AAACZ,UAAAA;AAAD,YAAS,KAAKD,KAApB;AACA,cAAMa,OAAO,GAACrB,aAAa,CAACS,IAAD,CAA3B;AACA,aAAKQ,QAAL,CAAc;AAACR,UAAAA,IAAI,EAAEY;AAAP,SAAd;AACD,OANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBARJ,MATD,eAkBC;AAAG,MAAA,OAAO,EACI,MACK;AACE,cAAM;AAACZ,UAAAA;AAAD,YAAS,KAAKD,KAApB;AACA,cAAMa,OAAO,GAACpB,aAAa,CAACQ,IAAD,CAA3B;AACA,aAAKQ,QAAL,CAAc;AAACR,UAAAA,IAAI,EAAEY;AAAP,SAAd;AACD,OANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBARJ,MAlBD,eA2BE;AAAG,MAAA,OAAO,EACP,MACG;AAAC,cAAM;AAACZ,UAAAA;AAAD,YAAS,KAAKD,KAApB;AACD,cAAMa,OAAO,GAACnB,UAAU,CAACO,IAAD,CAAxB;AACA,aAAKQ,QAAL,CAAc;AAACR,UAAAA,IAAI,EAAEY;AAAP,SAAd;AAEC,OANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAQG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBARH,MA3BF,CAFF,CAbF,eAqDC;AAAG,MAAA,IAAI,EAAC,wBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAlC,CArDD,CADA,eAuHA;AAAK,MAAA,EAAE,EAAC,aAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvHA,eA0HA;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGZ,IAAI,CAACkE,GAAL,CAAS,CAACxD,GAAD,EAAMyD,MAAN,KAAiB;AACzB,0BACE;AAAK,QAAA,GAAG,EAAEA,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGzD,GAAG,CAACwD,GAAJ,CAAQ,CAACjB,IAAD,EAAOmB,OAAP,KAAmB;AAC1B,cAAM;AAAC1D,UAAAA,GAAD;AAAMC,UAAAA,GAAN;AAAWW,UAAAA,QAAX;AAAqBD,UAAAA,OAArB;AAA8BE,UAAAA;AAA9B,YAAwC0B,IAA9C;AACA,4BACE,oBAAC,IAAD;AACE,UAAA,GAAG,EAAEmB,OADP;AAEE,UAAA,GAAG,EAAEzD,GAFP;AAGE,UAAA,QAAQ,EAAEW,QAHZ;AAIE,UAAA,OAAO,EAAED,OAJX;AAKE,UAAA,MAAM,EAAEE,MALV;AAME,UAAA,cAAc,EAAEtB,cANlB;AAOE,UAAA,WAAW,EAAE,CAACS,GAAD,EAAMC,GAAN,KAAc,KAAKF,eAAL,CAAqBC,GAArB,EAA0BC,GAA1B,CAP7B;AAQE,UAAA,YAAY,EAAE,CAACD,GAAD,EAAMC,GAAN,KACZ,KAAKG,gBAAL,CAAsBJ,GAAtB,EAA2BC,GAA3B,CATJ;AAWE,UAAA,SAAS,EAAE,MAAM,KAAKI,aAAL,EAXnB;AAYE,UAAA,GAAG,EAAEL,GAZP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,OAjBA,CADH,CADF;AAsBD,KAvBA,CADH,CA1HA,CADF;AAuJD;;AA9bH;AA+bC;;AAED,MAAMH,cAAc,GAAG,MAAM;AAE3B,QAAMP,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIU,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AACjC,UAAM2D,IAAI,GAAG,EAAb;;AACA,SAAK,IAAI1D,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AACjC0D,MAAAA,IAAI,CAAC/B,IAAL,CAAUgC,UAAU,CAAC3D,GAAD,EAAMD,GAAN,CAApB;AACD;;AACDV,IAAAA,IAAI,CAACsC,IAAL,CAAU+B,IAAV;AACD;;AACD,SAAOrE,IAAP;AACD,CAXD;;AAaA,MAAMsE,UAAU,GAAG,CAAC3D,GAAD,EAAMD,GAAN,KAAc;AAC/B,SAAO;AACLC,IAAAA,GADK;AAELD,IAAAA,GAFK;AAGLW,IAAAA,OAAO,EAAEX,GAAG,KAAK,EAAR,IAAcC,GAAG,KAAK,EAH1B;AAILW,IAAAA,QAAQ,EAAEZ,GAAG,KAAK,EAAR,IAAaC,GAAG,KAAK,EAJ1B;AAKL4D,IAAAA,QAAQ,EAAEC,QALL;AAMLpD,IAAAA,SAAS,EAAE,KANN;AAOLG,IAAAA,MAAM,EAAE,KAPH;AAQLkD,IAAAA,YAAY,EAAE;AART,GAAP;AAUD,CAXD;;AAaA,MAAM5D,yBAAyB,GAAG,CAACb,IAAD,EAAOU,GAAP,EAAYC,GAAZ,KAAoB;AACpD,QAAMC,OAAO,GAAGZ,IAAI,CAAC0E,KAAL,EAAhB;AACA,QAAMzB,IAAI,GAAGrC,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,CAAb;AACA,QAAMgE,OAAO,GAAG,EACd,GAAG1B,IADW;AAEd1B,IAAAA,MAAM,EAAE,CAAC0B,IAAI,CAAC1B;AAFA,GAAhB;AAIAX,EAAAA,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,IAAoBgE,OAApB;AACA,SAAO/D,OAAP;AACD,CATD","sourcesContent":["import React from 'react'\r\nimport { Component } from 'react'\r\nimport Node from './Node.jsx'\r\nimport './grid.css'\r\nimport {getAllNodes, getNodesInShortestPathOrder} from './Algorithms/AlgoTools'\r\nimport {dijkstra} from './Algorithms/Dijkstras';\r\nimport {aStar} from './Algorithms/Astar';\r\nimport {generateWall1,generateWall2,generateWall3} from './obstacles/RandomWalls'\r\nimport {createMaze} from './obstacles/Maze'\r\nimport {unweightedSearchAlgorithm} from './Algorithms/BFS';\r\nimport {dfs} from './Algorithms/DFS';\r\nimport Table from 'react-bootstrap/Table'\r\n\r\nexport default class Grid extends Component\r\n{\r\n  constructor() \r\n    {\r\n        super();\r\n        this.state = {\r\n          grid: [],\r\n          mouseIsPressed: false,\r\n          currentAlgorithm: [],\r\n          performance:[],\r\n          numberOfAlgos:0,\r\n          disabledStart:true,\r\n        };\r\n    } \r\n   \r\n   \r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    getAllNodes(grid)\r\n    this.setState({grid});\r\n  }\r\n    \r\n  \r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n\r\n  clearGrid(){ \r\n    const {grid}=this.state    \r\n    for(var i=0;i<grid.length;i++){\r\n      for(var j=0;j<grid[i].length;j++){\r\n            \r\n        grid[i][j].isVisited=false\r\n        if((!grid[i][j].isStart)&&(!grid[i][j].isFinish)&&(!grid[i][j].isWall))\r\n        document.getElementById(`node-${grid[i][j].row}-${grid[i][j].col}`).className =\r\n        'node ';\r\n      }\r\n    }\r\n  }\r\n\r\n  clearWalls(){ \r\n    const {grid}=this.state    \r\n    for(var i=0;i<grid.length;i++){\r\n      for(var j=0;j<grid[i].length;j++){\r\n            \r\n        grid[i][j].isVisited=false\r\n        grid[i][j].isWall=false\r\n        if((!grid[i][j].isStart)&&(!grid[i][j].isFinish))\r\n        document.getElementById(`node-${grid[i][j].row}-${grid[i][j].col}`).className =\r\n        'node ';\r\n      }\r\n    }\r\n  }\r\n\r\n  recordPerofrmence(algo,time,numberOfVisited,lengthOfSHortestPath){\r\n    const {performance}=this.state;\r\n    var tempPerformance = new Object();\r\n    tempPerformance.algorithm=algo;\r\n    tempPerformance.time=time;\r\n    tempPerformance.shortestPathLength=lengthOfSHortestPath;\r\n    tempPerformance.numberOfVisitedNodes=numberOfVisited;\r\n    performance.push(tempPerformance);\r\n   \r\n  }\r\n\r\n  // displayPerformance(){\r\n    \r\n  //   const {performance} = this.state;\r\n  //   const {numberOfAlgos}= this.state\r\n  //   var colName=document.getElementById('algorithm')\r\n  //   var colTime=document.getElementById('time')\r\n  //   var colShortestDistance = document.getElementById('distance')\r\n  //   var colNumberOfVisited= document.getElementById('visitedNodes')\r\n  //   colName.innerHTML= 'algorithm' ;\r\n  //   colTime.innerHTML= 'time';\r\n  //   colShortestDistance.innerHTML = 'Shortest Path Length'\r\n  //   colNumberOfVisited.innerHTML='Number Of Visited Nodes'\r\n  //   var name=[],time=[],shrotestDistance=[],numberOfNodes=[];\r\n    \r\n  //   if(numberOfAlgos==4){\r\n  //     this.setState({\r\n  //       numberOfAlgos:1\r\n  //     })\r\n  //     console.log('number of algos');\r\n  //     console.log(numberOfAlgos);\r\n  //   }\r\n    \r\n  //   for(let i=0;i<numberOfAlgos;i++){\r\n  //     console.log('i')\r\n  //     console.log(i)\r\n     \r\n     \r\n  //     name[i]=document.getElementById('name'+i)\r\n  //     console.log('name')\r\n  //     console.log(name[i])\r\n  //     time[i]=document.getElementById('time'+i)\r\n  //     shrotestDistance[i]= document.getElementById('distance'+i)\r\n  //     numberOfNodes[i]=document.getElementById('visitedNodes'+i)\r\n  //     name[i].innerHTML= performance[i].algorithm;;\r\n  //     time[i].innerHTML= performance[i].time.toString() +' ms';\r\n  //     shrotestDistance[i].innerHTML =  performance[i].shortestPathLength.toString();\r\n  //     numberOfNodes[i].innerHTML=performance[i].numberOfVisitedNodes.toString()\r\n  //   }\r\n\r\n  //   this.showComparison();\r\n\r\n  // }\r\n\r\n  // showComparison(){\r\n  //   const {performance} = this.state;\r\n  //   const {numberOfAlgos} = this.state;\r\n  //   var tempPerformance=performance;\r\n  //   tempPerformance.sort((a,b)=>{\r\n  //     return(a.time>b.time) ? 1:-1\r\n  //   })\r\n\r\n  //   document.getElementById('timelist').innerHTML='Algorithms ordered based on time' \r\n\r\n  //   for(let i=0;i<numberOfAlgos;i++){\r\n  //    document.getElementById('timerow'+i).innerHTML=tempPerformance[i].algorithm;    \r\n  //   }\r\n    \r\n  //   tempPerformance.sort((a,b)=>{\r\n  //     return(a.numberOfVisitedNodes>b.numberOfVisitedNodes) ? 1:-1\r\n  //   })\r\n    \r\n  //   document.getElementById('spacelist').innerHTML='Algorithms ordered based on space';\r\n\r\n  //   for(let i=0;i<numberOfAlgos;i++){\r\n  //     document.getElementById('spacerow'+i).innerHTML=tempPerformance[i].algorithm;     \r\n  //   }   \r\n  // }\r\n \r\n  animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    const {grid} = this.state\r\n    if(!visitedNodesInOrder.includes(grid[10][35])){\r\n      alert('No path avilable. Please try again')\r\n     window.location.reload()\r\n    }\r\n    for (let i=0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 0 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        if(!(visitedNodesInOrder[i].isStart||visitedNodesInOrder[i].isFinish))\r\n        {\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n        }\r\n      }, 0 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    let j = 0\r\n    for (let i=0; i < nodesInShortestPathOrder.length; i++) \r\n    {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        if(!(nodesInShortestPathOrder[i].isStart||nodesInShortestPathOrder[i].isFinish))\r\n        {\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n        } \r\n      }, 0 * i);\r\n      j++;\r\n    }\r\n    setTimeout(() => {\r\n     this.clearGrid()\r\n    }, 0 * j*2);\r\n    setTimeout(() => {\r\n      this.startVisualization()\r\n        }, 0 * j*2);\r\n    \r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[10][15];\r\n    const finishNode = grid[10][35];\r\n    var t0=performance.now()\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    var t1=performance.now()\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    this.recordPerofrmence('dijkstras',t1-t0,visitedNodesInOrder.length,nodesInShortestPathOrder.length)\r\n  }\r\n  visualizeAstar() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[10][15];\r\n    const finishNode = grid[10][35];\r\n    var t0=performance.now()\r\n    const visitedNodesInOrder = aStar(grid, startNode, finishNode);\r\n    var t1=performance.now()\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    this.recordPerofrmence('astar',t1-t0,visitedNodesInOrder.length,nodesInShortestPathOrder.length)\r\n  }\r\n\r\n\r\n  visualizeBfs() { \r\n    const {grid} = this.state;\r\n    const startNode = grid[10][15];\r\n    const finishNode = grid[10][35];\r\n    var t0=performance.now()\r\n    const visitedNodesInOrder =  unweightedSearchAlgorithm(grid, startNode, finishNode);\r\n    var t1=performance.now()\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);  \r\n    this.recordPerofrmence('bfs',t1-t0,visitedNodesInOrder.length,nodesInShortestPathOrder.length)\r\n  }\r\n\r\n  visualizeDfs() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[10][15];\r\n    const finishNode = grid[10][35];\r\n    var t0=performance.now()\r\n    const visitedNodesInOrder =  dfs(grid, startNode, finishNode);\r\n    var t1=performance.now()\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);  \r\n    this.recordPerofrmence('dfs',t1-t0,visitedNodesInOrder.length,nodesInShortestPathOrder.length)\r\n  }\r\n\r\n  selectionfunction(algo){\r\n    const {currentAlgorithm}= this.state\r\n    const {numberOfAlgos}= this.state\r\n    if(!currentAlgorithm.includes(algo)){\r\n    currentAlgorithm.push(algo)\r\n    this.setState({\r\n      numberOfAlgos:numberOfAlgos+1\r\n    })\r\n    this.setState({\r\n      disabledStart:false\r\n    })\r\n   }\r\n  }\r\n\r\n  startVisualization(){\r\n      const {currentAlgorithm}= this.state\r\n      const {numberOfAlgos}= this.state\r\n      var algo=currentAlgorithm.pop()\r\n      this.setState({\r\n        disabledStart:true\r\n      })\r\n     var currentAlgo= document.getElementById('currentAlgo');\r\n     if(algo!=undefined){\r\n     currentAlgo.innerHTML= 'Current Algorithm: '+ ' ' + algo;\r\n     }\r\n     else{\r\n      currentAlgo.innerHTML=''\r\n     }\r\n      if(algo=='dijsktras'){\r\n        \r\n        this.visualizeDijkstra()        \r\n      }\r\n      if(algo=='astar'){\r\n       \r\n        this.visualizeAstar()\r\n      }\r\n      if(algo=='bfs'){\r\n        this.visualizeBfs()\r\n      }\r\n\r\n      if(algo=='dfs'){\r\n        this.visualizeDfs()\r\n      }\r\n      // if(currentAlgorithm.length === 0){\r\n\r\n      //   document.getElementById('table').style.display = 'inline-table';\r\n      //   document.getElementById('timeList').style.display = 'block';\r\n      //   document.getElementById('spaceList').style.display = 'block';\r\n\r\n      //   // this.displayPerformance();\r\n      // }\r\n  }\r\n\r\n  render() {\r\n    \r\n    const {grid, mouseIsPressed} = this.state;\r\n    \r\n    return (\r\n      <>\r\n      <div className=\"navBar\">\r\n        <a href=\"http://localhost:3000/\" className='onlyLeft'>  <b> Pathfinding Visualizer </b></a>\r\n        <a>  <button  onClick={()=>this.startVisualization()}className=\"newTools\" disabled={this.state.disabledStart}> <b>Visualize!</b> </button></a>\r\n\t      <div className=\"dropDown\"> \r\n          <label className=\"dropBtn\"><b> Algorithms </b></label>\r\n          <select className=\"dropdown-algo\" id=\"dropdown-algo\" multiple >\r\n          <option onClick={()=>this.selectionfunction('dijsktras')} id='dijsktras' className=\"algoBar\"> Dijkstra's algorithm </option> \r\n          <option  onClick={()=>this.selectionfunction('astar')} id='astar' className=\"algoBar\">  Astar algorithm  </option>\r\n          <option  onClick={()=>this.selectionfunction('bfs') }id='bfs' className=\"algoBar\">  Bfs algorithm  </option>\r\n          <option  onClick={()=>this.selectionfunction('dfs')} id='dfs'className=\"algoBar\" >  Dfs algorithm   </option>\r\n          </select> \r\n        </div>\r\n\r\n        <div className=\"wall\"> \r\n          <a className=\"dropWall\"><b> Wall </b> </a>\r\n          <div className=\"dropdown-wall\">\r\n            <a onClick=\r\n                        {() => \r\n                              { const {grid} = this.state;\r\n                                const newGrid=generateWall1(grid)\r\n                                this.setState({grid: newGrid})\r\n                              }\r\n                        }\r\n            >  <a> Level 1</a> </a> \r\n           <a onClick=\r\n                        {() => \r\n                              {\r\n                                const {grid} = this.state;\r\n                                const newGrid=generateWall2(grid)\r\n                                this.setState({grid: newGrid})\r\n                              }\r\n                        }\r\n            >  <a> Level 2</a> </a> \r\n           <a onClick=\r\n                        {() => \r\n                              {\r\n                                const {grid} = this.state;\r\n                                const newGrid=generateWall3(grid)\r\n                                this.setState({grid: newGrid})\r\n                              }\r\n                        }\r\n            >  <a> Level 3</a> </a> \r\n            <a onClick=\r\n              {()=>\r\n                  {const {grid} = this.state;\r\n                  const newGrid=createMaze(grid)\r\n                  this.setState({grid: newGrid})\r\n                  \r\n                  }\r\n              }\r\n            >  <a> Generate Maze</a> </a>\r\n          </div> \r\n        </div>\r\n       <a href=\"http://localhost:3000/\"> <b> Reset</b></a>\r\n      </div>\r\n\r\n      {/* <div id='analysisContainer'>\r\n        <div id='tableContainer'>\r\n          <Table id='table'>\r\n              <thead>\r\n                <tr>\r\n                  <th id='algorithm'></th>\r\n                  <th id='time'></th>\r\n                  <th id='distance'></th>\r\n                  <th id='visitedNodes'></th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td id='name0'></td>\r\n                  <td id='time0'></td>\r\n                  <td id='distance0'></td>\r\n                  <td id='visitedNodes0'></td>\r\n                </tr>\r\n                <tr>\r\n                  <td id='name1'></td>\r\n                  <td id='time1'></td>\r\n                  <td id='distance1'></td>\r\n                  <td id='visitedNodes1'></td>\r\n                </tr>\r\n                <tr>\r\n                  <td id='name2'></td>\r\n                  <td id='time2'></td>\r\n                  <td id='distance2'></td>\r\n                  <td id='visitedNodes2'></td>\r\n                </tr>\r\n                <tr>\r\n                  <td id='name3'></td>\r\n                  <td id='time3'></td>\r\n                  <td id='distance3'></td>\r\n                  <td id='visitedNodes3'></td>\r\n                </tr>\r\n              </tbody>\r\n            </Table>\r\n        </div>\r\n            \r\n        <div id='listContainer1'>\r\n            <ul id='timeList' > \r\n            <a  id='timelist'></a>\r\n            <li id='timerow0'></li>\r\n            <li id='timerow1'></li>\r\n            <li id='timerow2'></li>\r\n            <li id='timerow3'></li>\r\n            </ul> \r\n        </div>\r\n          \r\n        <div id='listContainer2'>\r\n          <ul id='spaceList'> \r\n          <a  id='spacelist'></a>\r\n          <li id='spacerow0'></li>\r\n          <li id='spacerow1'></li>\r\n          <li id='spacerow2'></li>\r\n          <li id='spacerow3'></li>\r\n          </ul> \r\n        </div>\r\n     \r\n      </div>  */}\r\n\r\n      <div id='currentAlgo'></div>\r\n\r\n\r\n      <div className=\"grid\"> \r\n        {grid.map((row, rowIdx) => { \r\n          return (\r\n            <div key={rowIdx}>\r\n              {row.map((node, nodeIdx) => {\r\n                const {row, col, isFinish, isStart, isWall} = node;\r\n                return (\r\n                  <Node\r\n                    key={nodeIdx}\r\n                    col={col}\r\n                    isFinish={isFinish}\r\n                    isStart={isStart}\r\n                    isWall={isWall}\r\n                    mouseIsPressed={mouseIsPressed}\r\n                    onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                    onMouseEnter={(row, col) =>\r\n                      this.handleMouseEnter(row, col)\r\n                    }\r\n                    onMouseUp={() => this.handleMouseUp()}\r\n                    row={row}></Node>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </> \r\n    );     \r\n  }\r\n};\r\n\r\nconst getInitialGrid = () => {\r\n  \r\n  const grid = []\r\n  for (let row = 0; row < 20; row++) {\r\n    const temp = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      temp.push(createNode(col, row));\r\n    }\r\n    grid.push(temp);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === 10 && col === 15,\r\n    isFinish: row === 10&& col === 35,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}