{"ast":null,"code":"// import {getAllNodes} from './AlgoTools';\nexport function unweightedSearchAlgorithm(grid, startNode, finishNode, name) {\n  console.log(name);\n  const queue = [];\n  startNode.isVisited = true;\n  queue.push(startNode);\n\n  while (queue.length > 0) {\n    let currentNode = queue.shift();\n    queue.push(currentNode);\n    currentNode.isVisited = true;\n\n    if (currentNode == finishNode) {\n      return queue;\n    }\n\n    let edges = getUnvisitedNeighbors(currentNode, grid, name);\n\n    for (let i = 0; i < edges.length; i++) {\n      let neighbor = edges[i];\n\n      if (!neighbor.isVisited) {\n        neighbor.isVisited = true;\n        neighbor.previousNode = current;\n        queue.push(neighbor);\n      }\n    }\n  }\n\n  return queue;\n} // export function unweightedSearchAlgorithm(grid, startNode, finishNode, name) {\n//   console.log('bfs was touched')\n//   const visitedNodesInOrder = [];\n//   let structure = [startNode];\n//   let exploredNodes = {startNode: true};\n//   console.log(visitedNodesInOrder);\n//   while (structure.length) {\n//     let currentNode = name === \"bfs\" ? structure.shift() : structure.pop();\n//     visitedNodesInOrder.push(currentNode);\n//     if (name === \"dfs\") exploredNodes[currentNode.id]= true;\n//     currentNode.isVisited = true;\n//     if (currentNode === finishNode) {\n//       return visitedNodesInOrder;\n//     }\n//     let currentNeighbors = getUnvisitedNeighbors(currentNode, grid, name);\n//     // currentNeighbors.forEach(neighbor => {\n//     //   if (!exploredNodes[neighbor]) {\n//     //     if (name === \"bfs\") exploredNodes[neighbor] = true;\n//     //     neighbor.previousNode = currentNode.id;\n//     //     structure.push(neighbor);\n//     //   }\n//     // });\n//     for (let i=0;i<currentNeighbors.length;i++) {\n//       if (!exploredNodes[currentNeighbors[i]]) {\n//         if (name === \"bfs\") exploredNodes[currentNeighbors[i]] = true;\n//         currentNeighbors[i].previousNode = currentNode.id;\n//         structure.push(currentNeighbors[i]);\n//       }\n//     }  \n//   }\n//   return visitedNodesInOrder;\n// }\n\nfunction getUnvisitedNeighbors(node, grid, name) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n\n  if (row > 0) {\n    if (name === \"bfs\") {\n      neighbors.push(grid[row - 1][col]);\n    } else {\n      neighbors.unshift(grid[row - 1][col]);\n    }\n  }\n\n  if (row < grid.length - 1) {\n    if (name === \"bfs\") {\n      neighbors.push(grid[row + 1][col]);\n    } else {\n      neighbors.unshift(grid[row + 1][col]);\n    }\n  }\n\n  if (col > 0) {\n    if (name === \"bfs\") {\n      neighbors.push(grid[row][col - 1]);\n    } else {\n      neighbors.unshift(grid[row][col - 1]);\n    }\n  }\n\n  if (col < grid[0].length - 1) {\n    if (name === \"bfs\") {\n      neighbors.push(grid[row][col + 1]);\n    } else {\n      neighbors.unshift(grid[row][col + 1]);\n    }\n  }\n\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n} // function updateUnvisitedNeighbors(node, grid) {\n//   const unvisitedNeighbors = getUnvisitedNeighbors(node, grid, 'bfs');\n//   for (const neighbor of unvisitedNeighbors) {\n//     neighbor.distance = node.distance + 1;\n//     neighbor.previousNode = node;\n//   }\n// }\n// function getNeighbors(id, boardArray, name) {\n//   let coordinates = id.split(\"-\");\n//   let x = parseInt(coordinates[0]);\n//   let y = parseInt(coordinates[1]);\n//   let neighbors = [];\n//   let potentialNeighbor;\n//   if (boardArray[x - 1] && boardArray[x - 1][y]) {\n//     potentialNeighbor = `${(x - 1).toString()}-${y.toString()}`\n//     if (potentialNeighbor.isWall = false) {\n//       if (name === \"bfs\") {\n//         neighbors.push(potentialNeighbor);\n//       } else {\n//         neighbors.unshift(potentialNeighbor);\n//       }\n//     }\n//   }\n//   if (boardArray[x][y + 1]) {\n//     potentialNeighbor = `${x.toString()}-${(y + 1).toString()}`\n//     if (potentialNeighbor.isWall = false) {\n//       if (name === \"bfs\") {\n//         neighbors.push(potentialNeighbor);\n//       } else {\n//         neighbors.unshift(potentialNeighbor);\n//       }\n//     }\n//   }\n//   if (boardArray[x + 1] && boardArray[x + 1][y]) {\n//     potentialNeighbor = `${(x + 1).toString()}-${y.toString()}`\n//     if (potentialNeighbor.isWall = false) {\n//       if (name === \"bfs\") {\n//         neighbors.push(potentialNeighbor);\n//       } else {\n//         neighbors.unshift(potentialNeighbor);\n//       }\n//     }\n//   }\n//   if (boardArray[x][y - 1]) {\n//     potentialNeighbor = `${x.toString()}-${(y - 1).toString()}`\n//     if (potentialNeighbor.isWall = false) {\n//       if (name === \"bfs\") {\n//         neighbors.push(potentialNeighbor);\n//       } else {\n//         neighbors.unshift(potentialNeighbor);\n//       }\n//     }\n//   }\n//   return neighbors;\n// }","map":{"version":3,"sources":["E:/minor project/Pathfinding-Algorithm-visualiser/Minor_project/src/Algorithms/BFS.jsx"],"names":["unweightedSearchAlgorithm","grid","startNode","finishNode","name","console","log","queue","isVisited","push","length","currentNode","shift","edges","getUnvisitedNeighbors","i","neighbor","previousNode","current","node","neighbors","col","row","unshift","filter"],"mappings":"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","sourcesContent":["// import {getAllNodes} from './AlgoTools';\r\n\r\n\r\nexport function unweightedSearchAlgorithm(grid,startNode,finishNode,name) {\r\n  console.log(name);\r\n  const queue = [];\r\n  startNode.isVisited = true;\r\n  queue.push(startNode);\r\n\r\n  while(queue.length > 0) {\r\n    let currentNode = queue.shift();\r\n    queue.push(currentNode);\r\n    currentNode.isVisited = true;\r\n    if(currentNode == finishNode) {\r\n      return queue;\r\n    }\r\n    \r\n    let edges = getUnvisitedNeighbors(currentNode, grid, name);\r\n    for (let i = 0; i < edges.length; i++){\r\n      let neighbor = edges[i];\r\n      if(!neighbor.isVisited) {\r\n        neighbor.isVisited = true;\r\n        neighbor.previousNode = current;\r\n        queue.push(neighbor);\r\n      }\r\n    }\r\n    \r\n  }\r\n  return queue;\r\n}\r\n\r\n// export function unweightedSearchAlgorithm(grid, startNode, finishNode, name) {\r\n//   console.log('bfs was touched')\r\n//   const visitedNodesInOrder = [];\r\n//   let structure = [startNode];\r\n  \r\n//   let exploredNodes = {startNode: true};\r\n//   console.log(visitedNodesInOrder);\r\n//   while (structure.length) {\r\n//     let currentNode = name === \"bfs\" ? structure.shift() : structure.pop();\r\n//     visitedNodesInOrder.push(currentNode);\r\n//     if (name === \"dfs\") exploredNodes[currentNode.id]= true;\r\n//     currentNode.isVisited = true;\r\n//     if (currentNode === finishNode) {\r\n//       return visitedNodesInOrder;\r\n//     }\r\n//     let currentNeighbors = getUnvisitedNeighbors(currentNode, grid, name);\r\n//     // currentNeighbors.forEach(neighbor => {\r\n//     //   if (!exploredNodes[neighbor]) {\r\n//     //     if (name === \"bfs\") exploredNodes[neighbor] = true;\r\n//     //     neighbor.previousNode = currentNode.id;\r\n//     //     structure.push(neighbor);\r\n//     //   }\r\n//     // });\r\n\r\n//     for (let i=0;i<currentNeighbors.length;i++) {\r\n//       if (!exploredNodes[currentNeighbors[i]]) {\r\n//         if (name === \"bfs\") exploredNodes[currentNeighbors[i]] = true;\r\n//         currentNeighbors[i].previousNode = currentNode.id;\r\n//         structure.push(currentNeighbors[i]);\r\n//       }\r\n//     }  \r\n//   }\r\n//   return visitedNodesInOrder;\r\n// }\r\n\r\nfunction getUnvisitedNeighbors(node, grid, name) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n\r\n  if (row > 0) {\r\n    if (name === \"bfs\") {\r\n      neighbors.push(grid[row - 1][col]);\r\n    } else {\r\n      neighbors.unshift(grid[row - 1][col]);\r\n    }\r\n  }\r\n\r\n  if (row < grid.length - 1) {\r\n    if (name === \"bfs\") {\r\n      neighbors.push(grid[row + 1][col]);\r\n    } else {\r\n      neighbors.unshift(grid[row + 1][col]);\r\n    }\r\n  } \r\n\r\n  if (col > 0) {\r\n    if (name === \"bfs\") {\r\n      neighbors.push(grid[row][col - 1]);\r\n    } else {\r\n      neighbors.unshift(grid[row][col - 1 ]);\r\n    }\r\n  } \r\n  if (col < grid[0].length - 1) {\r\n    if (name === \"bfs\") {\r\n      neighbors.push(grid[row][col + 1]);\r\n    } else {\r\n      neighbors.unshift(grid[row][col + 1]);\r\n    }\r\n  } \r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\n// function updateUnvisitedNeighbors(node, grid) {\r\n//   const unvisitedNeighbors = getUnvisitedNeighbors(node, grid, 'bfs');\r\n//   for (const neighbor of unvisitedNeighbors) {\r\n//     neighbor.distance = node.distance + 1;\r\n//     neighbor.previousNode = node;\r\n//   }\r\n// }\r\n\r\n// function getNeighbors(id, boardArray, name) {\r\n//   let coordinates = id.split(\"-\");\r\n//   let x = parseInt(coordinates[0]);\r\n//   let y = parseInt(coordinates[1]);\r\n//   let neighbors = [];\r\n//   let potentialNeighbor;\r\n//   if (boardArray[x - 1] && boardArray[x - 1][y]) {\r\n//     potentialNeighbor = `${(x - 1).toString()}-${y.toString()}`\r\n//     if (potentialNeighbor.isWall = false) {\r\n//       if (name === \"bfs\") {\r\n//         neighbors.push(potentialNeighbor);\r\n//       } else {\r\n//         neighbors.unshift(potentialNeighbor);\r\n//       }\r\n//     }\r\n//   }\r\n//   if (boardArray[x][y + 1]) {\r\n//     potentialNeighbor = `${x.toString()}-${(y + 1).toString()}`\r\n//     if (potentialNeighbor.isWall = false) {\r\n//       if (name === \"bfs\") {\r\n//         neighbors.push(potentialNeighbor);\r\n//       } else {\r\n//         neighbors.unshift(potentialNeighbor);\r\n//       }\r\n//     }\r\n//   }\r\n//   if (boardArray[x + 1] && boardArray[x + 1][y]) {\r\n//     potentialNeighbor = `${(x + 1).toString()}-${y.toString()}`\r\n//     if (potentialNeighbor.isWall = false) {\r\n//       if (name === \"bfs\") {\r\n//         neighbors.push(potentialNeighbor);\r\n//       } else {\r\n//         neighbors.unshift(potentialNeighbor);\r\n//       }\r\n//     }\r\n//   }\r\n//   if (boardArray[x][y - 1]) {\r\n//     potentialNeighbor = `${x.toString()}-${(y - 1).toString()}`\r\n//     if (potentialNeighbor.isWall = false) {\r\n//       if (name === \"bfs\") {\r\n//         neighbors.push(potentialNeighbor);\r\n//       } else {\r\n//         neighbors.unshift(potentialNeighbor);\r\n//       }\r\n//     }\r\n//   }\r\n//   return neighbors;\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}