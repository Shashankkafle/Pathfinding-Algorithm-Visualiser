{"ast":null,"code":"export function unweightedSearchAlgorithm(nodes, startNode, finishNode, nodesToAnimate, boardArray, name) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n\n  let structure = [nodes[start]];\n  let exploredNodes = {\n    start: true\n  };\n\n  while (structure.length) {\n    let currentNode = name === \"bfs\" ? structure.shift() : structure.pop();\n    nodesToAnimate.push(currentNode);\n    if (name === \"dfs\") exploredNodes[currentNode.id] = true;\n    currentNode.status = \"visited\";\n\n    if (currentNode.id === target) {\n      return \"success\";\n    }\n\n    let currentNeighbors = getNeighbors(currentNode.id, nodes, boardArray, name);\n    currentNeighbors.forEach(neighbor => {\n      if (!exploredNodes[neighbor]) {\n        if (name === \"bfs\") exploredNodes[neighbor] = true;\n        nodes[neighbor].previousNode = currentNode.id;\n        structure.push(nodes[neighbor]);\n      }\n    });\n  }\n\n  return false;\n}\n\nfunction getNeighbors(id, nodes, boardArray, name) {\n  let coordinates = id.split(\"-\");\n  let x = parseInt(coordinates[0]);\n  let y = parseInt(coordinates[1]);\n  let neighbors = [];\n  let potentialNeighbor;\n\n  if (boardArray[x - 1] && boardArray[x - 1][y]) {\n    potentialNeighbor = `${(x - 1).toString()}-${y.toString()}`;\n\n    if (nodes[potentialNeighbor].status !== \"wall\") {\n      if (name === \"bfs\") {\n        neighbors.push(potentialNeighbor);\n      } else {\n        neighbors.unshift(potentialNeighbor);\n      }\n    }\n  }\n\n  if (boardArray[x][y + 1]) {\n    potentialNeighbor = `${x.toString()}-${(y + 1).toString()}`;\n\n    if (nodes[potentialNeighbor].status !== \"wall\") {\n      if (name === \"bfs\") {\n        neighbors.push(potentialNeighbor);\n      } else {\n        neighbors.unshift(potentialNeighbor);\n      }\n    }\n  }\n\n  if (boardArray[x + 1] && boardArray[x + 1][y]) {\n    potentialNeighbor = `${(x + 1).toString()}-${y.toString()}`;\n\n    if (nodes[potentialNeighbor].status !== \"wall\") {\n      if (name === \"bfs\") {\n        neighbors.push(potentialNeighbor);\n      } else {\n        neighbors.unshift(potentialNeighbor);\n      }\n    }\n  }\n\n  if (boardArray[x][y - 1]) {\n    potentialNeighbor = `${x.toString()}-${(y - 1).toString()}`;\n\n    if (nodes[potentialNeighbor].status !== \"wall\") {\n      if (name === \"bfs\") {\n        neighbors.push(potentialNeighbor);\n      } else {\n        neighbors.unshift(potentialNeighbor);\n      }\n    }\n  }\n\n  return neighbors;\n}","map":{"version":3,"sources":["E:/minor project/Pathfinding-Algorithm-visualiser/Minor_project/src/Algorithms/BFS.jsx"],"names":["unweightedSearchAlgorithm","nodes","startNode","finishNode","nodesToAnimate","boardArray","name","structure","start","exploredNodes","length","currentNode","shift","pop","push","id","status","target","currentNeighbors","getNeighbors","forEach","neighbor","previousNode","coordinates","split","x","parseInt","y","neighbors","potentialNeighbor","toString","unshift"],"mappings":"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","sourcesContent":["export function unweightedSearchAlgorithm(nodes, startNode, finishNode, nodesToAnimate, boardArray, name) {\r\n    if (!startNode || !finishNode || startNode === finishNode) {\r\n      return false;\r\n    }\r\n    let structure = [nodes[start]];\r\n    let exploredNodes = {start: true};\r\n    while (structure.length) {\r\n      let currentNode = name === \"bfs\" ? structure.shift() : structure.pop();\r\n      nodesToAnimate.push(currentNode);\r\n      if (name === \"dfs\") exploredNodes[currentNode.id] = true;\r\n      currentNode.status = \"visited\";\r\n      if (currentNode.id === target) {\r\n        return \"success\";\r\n      }\r\n      let currentNeighbors = getNeighbors(currentNode.id, nodes, boardArray, name);\r\n      currentNeighbors.forEach(neighbor => {\r\n        if (!exploredNodes[neighbor]) {\r\n          if (name === \"bfs\") exploredNodes[neighbor] = true;\r\n          nodes[neighbor].previousNode = currentNode.id;\r\n          structure.push(nodes[neighbor]);\r\n        }\r\n      });\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  function getNeighbors(id, nodes, boardArray, name) {\r\n    let coordinates = id.split(\"-\");\r\n    let x = parseInt(coordinates[0]);\r\n    let y = parseInt(coordinates[1]);\r\n    let neighbors = [];\r\n    let potentialNeighbor;\r\n    if (boardArray[x - 1] && boardArray[x - 1][y]) {\r\n      potentialNeighbor = `${(x - 1).toString()}-${y.toString()}`\r\n      if (nodes[potentialNeighbor].status !== \"wall\") {\r\n        if (name === \"bfs\") {\r\n          neighbors.push(potentialNeighbor);\r\n        } else {\r\n          neighbors.unshift(potentialNeighbor);\r\n        }\r\n      }\r\n    }\r\n    if (boardArray[x][y + 1]) {\r\n      potentialNeighbor = `${x.toString()}-${(y + 1).toString()}`\r\n      if (nodes[potentialNeighbor].status !== \"wall\") {\r\n        if (name === \"bfs\") {\r\n          neighbors.push(potentialNeighbor);\r\n        } else {\r\n          neighbors.unshift(potentialNeighbor);\r\n        }\r\n      }\r\n    }\r\n    if (boardArray[x + 1] && boardArray[x + 1][y]) {\r\n      potentialNeighbor = `${(x + 1).toString()}-${y.toString()}`\r\n      if (nodes[potentialNeighbor].status !== \"wall\") {\r\n        if (name === \"bfs\") {\r\n          neighbors.push(potentialNeighbor);\r\n        } else {\r\n          neighbors.unshift(potentialNeighbor);\r\n        }\r\n      }\r\n    }\r\n    if (boardArray[x][y - 1]) {\r\n      potentialNeighbor = `${x.toString()}-${(y - 1).toString()}`\r\n      if (nodes[potentialNeighbor].status !== \"wall\") {\r\n        if (name === \"bfs\") {\r\n          neighbors.push(potentialNeighbor);\r\n        } else {\r\n          neighbors.unshift(potentialNeighbor);\r\n        }\r\n      }\r\n    }\r\n    return neighbors;\r\n  }\r\n  "]},"metadata":{},"sourceType":"module"}