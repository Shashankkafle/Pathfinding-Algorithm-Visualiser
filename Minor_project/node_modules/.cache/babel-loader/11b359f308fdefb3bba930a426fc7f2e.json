{"ast":null,"code":"export function createMaze(grid) {\n  const newGrid = grid;\n\n  for (var i = 0; i < newGrid.length; i = i + 2) {\n    for (var j = 0; j < newGrid[i].length; j++) {\n      newGrid.isWall = true;\n      alert('asdasd');\n    }\n\n    const rand = Math.floor(Math.random() * newGrid[i].length); //generate random num betn 0 and newGrid[i].length\n\n    newGrid[i][rand].isWall = false;\n    console.log(newGrid[i][rand + 1]);\n    console.log(newGrid[i][rand + 1].isWall);\n  }\n\n  return newGrid;\n}","map":{"version":3,"sources":["C:/Users/Acer/Pathfinding-Algorithm-Visualiser/Minor_project/src/obstacles/Maze.jsx"],"names":["createMaze","grid","newGrid","i","length","j","isWall","alert","rand","Math","floor","random","console","log"],"mappings":"AAAA,OAAO,SAASA,UAAT,CAAoBC,IAApB,EACH;AACI,QAAMC,OAAO,GAACD,IAAd;;AACA,OAAI,IAAIE,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACD,OAAO,CAACE,MAAtB,EAA8BD,CAAC,GAACA,CAAC,GAAC,CAAlC,EACA;AACI,SAAI,IAAIE,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACH,OAAO,CAACC,CAAD,CAAP,CAAWC,MAAzB,EAAgCC,CAAC,EAAjC,EACA;AAGQH,MAAAA,OAAO,CAACI,MAAR,GAAe,IAAf;AACAC,MAAAA,KAAK,CAAC,QAAD,CAAL;AAGP;;AACD,UAAMC,IAAI,GAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcT,OAAO,CAACC,CAAD,CAAP,CAAWC,MAApC,CAAX,CAVJ,CAU2D;;AACvDF,IAAAA,OAAO,CAACC,CAAD,CAAP,CAAWK,IAAX,EAAiBF,MAAjB,GAAwB,KAAxB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAaX,OAAO,CAACC,CAAD,CAAP,CAAWK,IAAI,GAAC,CAAhB,CAAb;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYX,OAAO,CAACC,CAAD,CAAP,CAAWK,IAAI,GAAC,CAAhB,EAAmBF,MAA/B;AAGH;;AACD,SAAOJ,OAAP;AACH","sourcesContent":["export function createMaze(grid)\r\n    {\r\n        const newGrid=grid\r\n        for(var i=0;i<newGrid.length;(i=i+2))\r\n        {\r\n            for(var j=0;j<newGrid[i].length;j++)\r\n            {\r\n                \r\n                \r\n                    newGrid.isWall=true\r\n                    alert('asdasd')\r\n            \r\n                \r\n            }\r\n            const rand=Math.floor(Math.random()*newGrid[i].length) //generate random num betn 0 and newGrid[i].length\r\n            newGrid[i][rand].isWall=false\r\n            console.log( newGrid[i][rand+1])\r\n            console.log(newGrid[i][rand+1].isWall)\r\n\r\n            \r\n        }\r\n        return newGrid\r\n    }"]},"metadata":{},"sourceType":"module"}