{"ast":null,"code":"import { getAllNodes, sortNodesByDistance, updateUnvisitedNeighbors } from './AlgoTools';\nexport function bfs(grid, startNode, finishNode) {\n  const queue = [];\n  startNode.isVisited = true;\n  queue.push(startNode);\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (queue.length > 0) {\n    let currentNode = queue.shift();\n    queue.push(currentNode);\n    currentNode.isVisited = true;\n\n    if (currentNode == finishNode) {\n      return queue;\n    }\n\n    sortNodesByDistance(unvisitedNodes);\n    let edges = unvisitedNodes.shift();\n\n    for (let i = 0; i < edges.length; i++) {\n      let neighbor = edges[i];\n\n      if (!neighbor.isVisited) {\n        neighbor.isVisited = true;\n        neighbor.previousNode = current;\n        queue.push(neighbor);\n      }\n    }\n\n    updateUnvisitedNeighbors(edges, grid);\n  }\n}","map":{"version":3,"sources":["E:/minor project/Pathfinding-Algorithm-visualiser/Minor_project/src/Algorithms/BFS.jsx"],"names":["getAllNodes","sortNodesByDistance","updateUnvisitedNeighbors","bfs","grid","startNode","finishNode","queue","isVisited","push","unvisitedNodes","length","currentNode","shift","edges","i","neighbor","previousNode","current"],"mappings":"AAAA,SAAQA,WAAR,EAAoBC,mBAApB,EAAwCC,wBAAxC,QAAuE,aAAvE;AAEA,OAAO,SAASC,GAAT,CAAaC,IAAb,EAAkBC,SAAlB,EAA4BC,UAA5B,EAAwC;AAE7C,QAAMC,KAAK,GAAG,EAAd;AACAF,EAAAA,SAAS,CAACG,SAAV,GAAsB,IAAtB;AACAD,EAAAA,KAAK,CAACE,IAAN,CAAWJ,SAAX;AACA,QAAMK,cAAc,GAAGV,WAAW,CAACI,IAAD,CAAlC;;AAEA,SAAMG,KAAK,CAACI,MAAN,GAAe,CAArB,EAAwB;AACtB,QAAIC,WAAW,GAAGL,KAAK,CAACM,KAAN,EAAlB;AACAN,IAAAA,KAAK,CAACE,IAAN,CAAWG,WAAX;AACAA,IAAAA,WAAW,CAACJ,SAAZ,GAAwB,IAAxB;;AACA,QAAGI,WAAW,IAAIN,UAAlB,EAA8B;AAC5B,aAAOC,KAAP;AACD;;AACDN,IAAAA,mBAAmB,CAACS,cAAD,CAAnB;AACA,QAAII,KAAK,GAAGJ,cAAc,CAACG,KAAf,EAAZ;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACH,MAA1B,EAAkCI,CAAC,EAAnC,EAAsC;AACpC,UAAIC,QAAQ,GAAGF,KAAK,CAACC,CAAD,CAApB;;AACA,UAAG,CAACC,QAAQ,CAACR,SAAb,EAAwB;AACtBQ,QAAAA,QAAQ,CAACR,SAAT,GAAqB,IAArB;AACAQ,QAAAA,QAAQ,CAACC,YAAT,GAAwBC,OAAxB;AACAX,QAAAA,KAAK,CAACE,IAAN,CAAWO,QAAX;AACD;AACF;;AACDd,IAAAA,wBAAwB,CAACY,KAAD,EAAQV,IAAR,CAAxB;AACD;AACF","sourcesContent":["import {getAllNodes,sortNodesByDistance,updateUnvisitedNeighbors} from './AlgoTools';\r\n\r\nexport function bfs(grid,startNode,finishNode) {\r\n\r\n  const queue = [];\r\n  startNode.isVisited = true;\r\n  queue.push(startNode);\r\n  const unvisitedNodes = getAllNodes(grid);\r\n\r\n  while(queue.length > 0) {\r\n    let currentNode = queue.shift();\r\n    queue.push(currentNode);\r\n    currentNode.isVisited = true;\r\n    if(currentNode == finishNode) {\r\n      return queue;\r\n    }\r\n    sortNodesByDistance(unvisitedNodes);\r\n    let edges = unvisitedNodes.shift();\r\n    for (let i = 0; i < edges.length; i++){\r\n      let neighbor = edges[i];\r\n      if(!neighbor.isVisited) {\r\n        neighbor.isVisited = true;\r\n        neighbor.previousNode = current;\r\n        queue.push(neighbor);\r\n      }\r\n    }\r\n    updateUnvisitedNeighbors(edges, grid);\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}