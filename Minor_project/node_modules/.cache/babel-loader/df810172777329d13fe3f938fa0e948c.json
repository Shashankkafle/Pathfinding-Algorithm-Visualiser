{"ast":null,"code":"var _jsxFileName = \"E:\\\\minor project\\\\Pathfinding-Algorithm-Visualiser\\\\Minor_project\\\\src\\\\Grid.jsx\";\nimport React from 'react';\nimport { Component } from 'react';\nimport Node from './Node';\nimport './grid.css';\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const temp = [];\n\n    for (let col = 0; col < 50; col++) {\n      temp[col] = this.createNode(col, row);\n    }\n\n    grid[row] = temp;\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === 10 && col === 15,\n    isFinish: row === 10 && col === 35,\n    //distance: Infinity,\n    //isVisited: false,\n    isWall: false //previousNode: null,\n\n  };\n};\n\nexport default class Grid extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = this.getInitialGrid();\n    this.setState({\n      grid\n    });\n  } // getInitialGrid = () => {\n  //   const grid = []\n  //   for (let row = 0; row < 20; row++) {\n  //     const temp = [];\n  //     for (let col = 0; col < 50; col++) {\n  //       temp[col]=this.createNode(col,row)\n  //     }\n  //     grid[row]=temp\n  //   }\n  //   return grid;\n  // };\n  // createNode = (col, row) => {\n  //   return {\n  //     col,\n  //     row,\n  //     isStart: false,\n  //     isFinish:  false,\n  //     //distance: Infinity,\n  //     //isVisited: false,\n  //     isWall: false,\n  //     //previousNode: null,\n  //   };\n  // };\n\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeDijkstra(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, \"Visualize Dijkstra's Algorithm(currently not working)\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 19\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isFinish,\n          isStart,\n          isWall\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }\n        });\n      }));\n    })));\n  }\n\n}\nGrid.getInitialGrid = getInitialGrid;\nGrid.createNode = createNode;\n;","map":{"version":3,"sources":["E:/minor project/Pathfinding-Algorithm-Visualiser/Minor_project/src/Grid.jsx"],"names":["React","Component","Node","getInitialGrid","grid","row","temp","col","createNode","isStart","isFinish","isWall","Grid","constructor","state","mouseIsPressed","componentDidMount","setState","render","visualizeDijkstra","map","rowIdx","node","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Component } from 'react'\r\nimport Node from './Node'\r\nimport './grid.css'\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = []\r\n  for (let row = 0; row < 20; row++) {\r\n    const temp = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      temp[col]=this.createNode(col,row)\r\n    }\r\n    grid[row]=temp\r\n  }\r\n  return grid;\r\n};\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === 10 && col === 15,\r\n    isFinish: row === 10 && col === 35,\r\n    //distance: Infinity,\r\n    //isVisited: false,\r\n    isWall: false,\r\n    //previousNode: null,\r\n  };\r\n};\r\n\r\n\r\nexport default class Grid extends Component\r\n{\r\n    static getInitialGrid = getInitialGrid;\r\n    static createNode = createNode;\r\n    constructor() \r\n    {\r\n        super();\r\n        this.state = {\r\n          grid: [],\r\n          mouseIsPressed: false,\r\n        };\r\n    } \r\n    componentDidMount() {\r\n      const grid = this.getInitialGrid();\r\n      this.setState({grid});\r\n    }\r\n    // getInitialGrid = () => {\r\n    //   const grid = []\r\n    //   for (let row = 0; row < 20; row++) {\r\n    //     const temp = [];\r\n    //     for (let col = 0; col < 50; col++) {\r\n    //       temp[col]=this.createNode(col,row)\r\n    //     }\r\n    //     grid[row]=temp\r\n    //   }\r\n    //   return grid;\r\n    // };\r\n    // createNode = (col, row) => {\r\n    //   return {\r\n    //     col,\r\n    //     row,\r\n    //     isStart: false,\r\n    //     isFinish:  false,\r\n    //     //distance: Infinity,\r\n    //     //isVisited: false,\r\n    //     isWall: false,\r\n    //     //previousNode: null,\r\n    //   };\r\n    // };\r\n    \r\n\r\n    render() {\r\n        const {grid, mouseIsPressed} = this.state;\r\n        \r\n    \r\n        return (\r\n          <>\r\n            <button onClick={() => this.visualizeDijkstra()}>\r\n              Visualize Dijkstra's Algorithm(currently not working)\r\n            </button>\r\n            <div className=\"grid\"> \r\n              {grid.map((row, rowIdx) => { \r\n                return (\r\n                  <div key={rowIdx}>\r\n                    {row.map((node, nodeIdx) => {\r\n                      const {row, col, isFinish, isStart, isWall} = node;\r\n                      return (\r\n                        <Node\r\n                          key={nodeIdx}\r\n                          col={col}\r\n                          isFinish={isFinish}\r\n                          isStart={isStart}\r\n                          isWall={isWall}\r\n                          mouseIsPressed={mouseIsPressed}\r\n                          onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                          onMouseEnter={(row, col) =>\r\n                            this.handleMouseEnter(row, col)\r\n                          }\r\n                          onMouseUp={() => this.handleMouseUp()}\r\n                          row={row}></Node>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </>\r\n        );\r\n      }\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}