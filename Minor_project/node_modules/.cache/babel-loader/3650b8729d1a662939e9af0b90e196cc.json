{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Pathfinding-Algorithm-Visualiser\\\\Minor_project\\\\src\\\\Grid.jsx\";\nimport React from 'react';\nimport { Component } from 'react';\nimport Node from './Node';\nimport './grid.css';\nexport default class Grid extends Component {\n  constructor() {\n    super();\n\n    this.getNewGridWithWallToggled = (grid, row, col) => {\n      grid[col][row].isWall = true;\n      return newGrid;\n    };\n\n    this.getInitialGrid = () => {\n      var grid = [];\n\n      for (let row = 0; row < 20; row++) {\n        var temp = [];\n\n        for (let col = 0; col < 50; col++) {\n          temp[col] = this.createNode(col, row);\n        }\n\n        grid[row] = temp;\n      }\n\n      return grid;\n    };\n\n    this.createNode = (col, row) => {\n      return {\n        col,\n        row,\n        isStart: false,\n        isFinish: false,\n        //distance: Infinity,\n        //isVisited: false,\n        isWall: false //previousNode: null,\n\n      };\n    };\n\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = this.getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeDijkstra(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, \"Visualize Dijkstra's Algorithm(currently not working)\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 19\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isFinish,\n          isStart,\n          isWall\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }\n        });\n      }));\n    })));\n  }\n\n}\n;","map":{"version":3,"sources":["C:/Users/Acer/Pathfinding-Algorithm-Visualiser/Minor_project/src/Grid.jsx"],"names":["React","Component","Node","Grid","constructor","getNewGridWithWallToggled","grid","row","col","isWall","newGrid","getInitialGrid","temp","createNode","isStart","isFinish","state","mouseIsPressed","componentDidMount","setState","handleMouseDown","render","visualizeDijkstra","map","rowIdx","node","nodeIdx","handleMouseEnter","handleMouseUp"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Component } from 'react'\r\nimport Node from './Node'\r\nimport './grid.css'\r\n\r\nexport default class Grid extends Component\r\n{\r\n    constructor() \r\n    {\r\n        super();\r\n        this.state = {\r\n          grid: [],\r\n          mouseIsPressed: false,\r\n        };\r\n    } \r\n    componentDidMount() {\r\n      const grid = this.getInitialGrid();\r\n      this.setState({grid});\r\n    }\r\n    handleMouseDown(row, col) {\r\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n      this.setState({grid: newGrid, mouseIsPressed: true});\r\n    }\r\n    getNewGridWithWallToggled = (grid, row, col) => {\r\n      grid[col][row].isWall=true\r\n      return newGrid;\r\n    };\r\n    getInitialGrid = () => {\r\n      var grid = []\r\n      for (let row = 0; row < 20; row++) {\r\n        var temp = [];\r\n        for (let col = 0; col < 50; col++) {\r\n          temp[col]=this.createNode(col,row)\r\n        }\r\n        grid[row]=temp\r\n      }\r\n      return grid;\r\n    };\r\n    createNode = (col, row) => {\r\n      return {\r\n        col,\r\n        row,\r\n        isStart: false,\r\n        isFinish:  false,\r\n        //distance: Infinity,\r\n        //isVisited: false,\r\n        isWall: false,\r\n        //previousNode: null,\r\n      };\r\n    };\r\n    \r\n\r\n    render() {\r\n        const {grid, mouseIsPressed} = this.state;\r\n        \r\n    \r\n        return (\r\n          <>\r\n            <button onClick={() => this.visualizeDijkstra()}>\r\n              Visualize Dijkstra's Algorithm(currently not working)\r\n            </button>\r\n            <div className=\"grid\"> \r\n              {grid.map((row, rowIdx) => { \r\n                return (\r\n                  <div key={rowIdx}>\r\n                    {row.map((node, nodeIdx) => {\r\n                      const {row, col, isFinish, isStart, isWall} = node;\r\n                      return (\r\n                        <Node\r\n                          key={nodeIdx}\r\n                          col={col}\r\n                          isFinish={isFinish}\r\n                          isStart={isStart}\r\n                          isWall={isWall}\r\n                          mouseIsPressed={mouseIsPressed}\r\n                          onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                          onMouseEnter={(row, col) =>\r\n                            this.handleMouseEnter(row, col)\r\n                          }\r\n                          onMouseUp={() => this.handleMouseUp()}\r\n                          row={row}></Node>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </>\r\n        );\r\n      }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}