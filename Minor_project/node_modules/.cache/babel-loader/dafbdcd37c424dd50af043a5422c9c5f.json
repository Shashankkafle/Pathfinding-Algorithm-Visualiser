{"ast":null,"code":"import { updateUnvisitedNeighbors, getUnvisitedNeighbors } from './AlgoTools'; // export function bfs(grid,startNode,finishNode) {\n//   const queue = [];\n//   startNode.isVisited = true;\n//   queue.push(startNode);\n//   const unvisitedNodes = getAllNodes(grid);\n//   while(queue.length > 0) {\n//     let currentNode = queue.shift();\n//     queue.push(currentNode);\n//     currentNode.isVisited = true;\n//     if(currentNode == finishNode) {\n//       return queue;\n//     }\n//     sortNodesByDistance(unvisitedNodes);\n//     let edges = unvisitedNodes.shift();\n//     for (let i = 0; i < edges.length; i++){\n//       let neighbor = edges[i];\n//       if(!neighbor.isVisited) {\n//         neighbor.isVisited = true;\n//         neighbor.previousNode = current;\n//         queue.push(neighbor);\n//       }\n//     }\n//     updateUnvisitedNeighbors(edges, grid);\n//   }\n// }\n\nexport function unweightedSearchAlgorithm(grid, startNode, finishNode, queue, name) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n\n  let structure = startNode;\n  let exploredNodes = {\n    startNode: true\n  };\n\n  while (structure.length) {\n    let currentNode = name === \"bfs\" ? structure.shift() : structure.pop();\n    queue.push(currentNode);\n    if (name === \"dfs\") exploredNodes[currentNode.id] = true;\n    currentNode.isVisited = true;\n\n    if (currentNode.id === finishNode) {\n      return queue;\n    }\n\n    let currentNeighbors = getUnvisitedNeighbors(currentNode.id, grid);\n    currentNeighbors.forEach(neighbor => {\n      if (!exploredNodes[neighbor]) {\n        if (name === \"bfs\") exploredNodes[neighbor] = true;\n        currentNeighbors.previousNode = currentNode.id;\n        structure.push(currentNeighbors);\n      }\n    });\n  }\n\n  return false;\n} // function getNeighbors(id, nodes, boardArray, name) {\n//   let coordinates = id.split(\"-\");\n//   let x = parseInt(coordinates[0]);\n//   let y = parseInt(coordinates[1]);\n//   let neighbors = [];\n//   let potentialNeighbor;\n//   if (boardArray[x - 1] && boardArray[x - 1][y]) {\n//     potentialNeighbor = `${(x - 1).toString()}-${y.toString()}`\n//     if (nodes[potentialNeighbor].status !== \"wall\") {\n//       if (name === \"bfs\") {\n//         neighbors.push(potentialNeighbor);\n//       } else {\n//         neighbors.unshift(potentialNeighbor);\n//       }\n//     }\n//   }\n//   if (boardArray[x][y + 1]) {\n//     potentialNeighbor = `${x.toString()}-${(y + 1).toString()}`\n//     if (nodes[potentialNeighbor].status !== \"wall\") {\n//       if (name === \"bfs\") {\n//         neighbors.push(potentialNeighbor);\n//       } else {\n//         neighbors.unshift(potentialNeighbor);\n//       }\n//     }\n//   }\n//   if (boardArray[x + 1] && boardArray[x + 1][y]) {\n//     potentialNeighbor = `${(x + 1).toString()}-${y.toString()}`\n//     if (nodes[potentialNeighbor].status !== \"wall\") {\n//       if (name === \"bfs\") {\n//         neighbors.push(potentialNeighbor);\n//       } else {\n//         neighbors.unshift(potentialNeighbor);\n//       }\n//     }\n//   }\n//   if (boardArray[x][y - 1]) {\n//     potentialNeighbor = `${x.toString()}-${(y - 1).toString()}`\n//     if (nodes[potentialNeighbor].status !== \"wall\") {\n//       if (name === \"bfs\") {\n//         neighbors.push(potentialNeighbor);\n//       } else {\n//         neighbors.unshift(potentialNeighbor);\n//       }\n//     }\n//   }\n//   return neighbors;\n// }","map":{"version":3,"sources":["E:/minor project/Pathfinding-Algorithm-visualiser/Minor_project/src/Algorithms/BFS.jsx"],"names":["updateUnvisitedNeighbors","getUnvisitedNeighbors","unweightedSearchAlgorithm","grid","startNode","finishNode","queue","name","structure","exploredNodes","length","currentNode","shift","pop","push","id","isVisited","currentNeighbors","forEach","neighbor","previousNode"],"mappings":"AAAA,SAAQA,wBAAR,EAAiCC,qBAAjC,QAA6D,aAA7D,C,CAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,yBAAT,CAAmCC,IAAnC,EAAyCC,SAAzC,EAAoDC,UAApD,EAAgEC,KAAhE,EAAuEC,IAAvE,EAA6E;AAClF,MAAI,CAACH,SAAD,IAAc,CAACC,UAAf,IAA6BD,SAAS,KAAKC,UAA/C,EAA2D;AACzD,WAAO,KAAP;AACD;;AACD,MAAIG,SAAS,GAAGJ,SAAhB;AACA,MAAIK,aAAa,GAAG;AAACL,IAAAA,SAAS,EAAE;AAAZ,GAApB;;AACA,SAAOI,SAAS,CAACE,MAAjB,EAAyB;AACvB,QAAIC,WAAW,GAAGJ,IAAI,KAAK,KAAT,GAAiBC,SAAS,CAACI,KAAV,EAAjB,GAAqCJ,SAAS,CAACK,GAAV,EAAvD;AACAP,IAAAA,KAAK,CAACQ,IAAN,CAAWH,WAAX;AACA,QAAIJ,IAAI,KAAK,KAAb,EAAoBE,aAAa,CAACE,WAAW,CAACI,EAAb,CAAb,GAAgC,IAAhC;AACpBJ,IAAAA,WAAW,CAACK,SAAZ,GAAwB,IAAxB;;AACA,QAAIL,WAAW,CAACI,EAAZ,KAAmBV,UAAvB,EAAmC;AACjC,aAAOC,KAAP;AACD;;AACD,QAAIW,gBAAgB,GAAGhB,qBAAqB,CAACU,WAAW,CAACI,EAAb,EAAiBZ,IAAjB,CAA5C;AACAc,IAAAA,gBAAgB,CAACC,OAAjB,CAAyBC,QAAQ,IAAI;AACnC,UAAI,CAACV,aAAa,CAACU,QAAD,CAAlB,EAA8B;AAC5B,YAAIZ,IAAI,KAAK,KAAb,EAAoBE,aAAa,CAACU,QAAD,CAAb,GAA0B,IAA1B;AACpBF,QAAAA,gBAAgB,CAACG,YAAjB,GAAgCT,WAAW,CAACI,EAA5C;AACAP,QAAAA,SAAS,CAACM,IAAV,CAAeG,gBAAf;AACD;AACF,KAND;AAOD;;AACD,SAAO,KAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {updateUnvisitedNeighbors,getUnvisitedNeighbors} from './AlgoTools';\r\n\r\n// export function bfs(grid,startNode,finishNode) {\r\n\r\n//   const queue = [];\r\n//   startNode.isVisited = true;\r\n//   queue.push(startNode);\r\n//   const unvisitedNodes = getAllNodes(grid);\r\n\r\n//   while(queue.length > 0) {\r\n//     let currentNode = queue.shift();\r\n//     queue.push(currentNode);\r\n//     currentNode.isVisited = true;\r\n//     if(currentNode == finishNode) {\r\n//       return queue;\r\n//     }\r\n//     sortNodesByDistance(unvisitedNodes);\r\n//     let edges = unvisitedNodes.shift();\r\n//     for (let i = 0; i < edges.length; i++){\r\n//       let neighbor = edges[i];\r\n//       if(!neighbor.isVisited) {\r\n//         neighbor.isVisited = true;\r\n//         neighbor.previousNode = current;\r\n//         queue.push(neighbor);\r\n//       }\r\n//     }\r\n//     updateUnvisitedNeighbors(edges, grid);\r\n//   }\r\n// }\r\n\r\nexport function unweightedSearchAlgorithm(grid, startNode, finishNode, queue, name) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let structure = startNode;\r\n  let exploredNodes = {startNode: true};\r\n  while (structure.length) {\r\n    let currentNode = name === \"bfs\" ? structure.shift() : structure.pop();\r\n    queue.push(currentNode);\r\n    if (name === \"dfs\") exploredNodes[currentNode.id] = true;\r\n    currentNode.isVisited = true;\r\n    if (currentNode.id === finishNode) {\r\n      return queue;\r\n    }\r\n    let currentNeighbors = getUnvisitedNeighbors(currentNode.id, grid);\r\n    currentNeighbors.forEach(neighbor => {\r\n      if (!exploredNodes[neighbor]) {\r\n        if (name === \"bfs\") exploredNodes[neighbor] = true;\r\n        currentNeighbors.previousNode = currentNode.id;\r\n        structure.push(currentNeighbors);\r\n      }\r\n    });\r\n  }\r\n  return false;\r\n}\r\n\r\n// function getNeighbors(id, nodes, boardArray, name) {\r\n//   let coordinates = id.split(\"-\");\r\n//   let x = parseInt(coordinates[0]);\r\n//   let y = parseInt(coordinates[1]);\r\n//   let neighbors = [];\r\n//   let potentialNeighbor;\r\n//   if (boardArray[x - 1] && boardArray[x - 1][y]) {\r\n//     potentialNeighbor = `${(x - 1).toString()}-${y.toString()}`\r\n//     if (nodes[potentialNeighbor].status !== \"wall\") {\r\n//       if (name === \"bfs\") {\r\n//         neighbors.push(potentialNeighbor);\r\n//       } else {\r\n//         neighbors.unshift(potentialNeighbor);\r\n//       }\r\n//     }\r\n//   }\r\n//   if (boardArray[x][y + 1]) {\r\n//     potentialNeighbor = `${x.toString()}-${(y + 1).toString()}`\r\n//     if (nodes[potentialNeighbor].status !== \"wall\") {\r\n//       if (name === \"bfs\") {\r\n//         neighbors.push(potentialNeighbor);\r\n//       } else {\r\n//         neighbors.unshift(potentialNeighbor);\r\n//       }\r\n//     }\r\n//   }\r\n//   if (boardArray[x + 1] && boardArray[x + 1][y]) {\r\n//     potentialNeighbor = `${(x + 1).toString()}-${y.toString()}`\r\n//     if (nodes[potentialNeighbor].status !== \"wall\") {\r\n//       if (name === \"bfs\") {\r\n//         neighbors.push(potentialNeighbor);\r\n//       } else {\r\n//         neighbors.unshift(potentialNeighbor);\r\n//       }\r\n//     }\r\n//   }\r\n//   if (boardArray[x][y - 1]) {\r\n//     potentialNeighbor = `${x.toString()}-${(y - 1).toString()}`\r\n//     if (nodes[potentialNeighbor].status !== \"wall\") {\r\n//       if (name === \"bfs\") {\r\n//         neighbors.push(potentialNeighbor);\r\n//       } else {\r\n//         neighbors.unshift(potentialNeighbor);\r\n//       }\r\n//     }\r\n//   }\r\n//   return neighbors;\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}