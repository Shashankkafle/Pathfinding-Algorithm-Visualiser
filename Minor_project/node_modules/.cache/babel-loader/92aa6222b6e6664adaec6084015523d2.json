{"ast":null,"code":"import _createForOfIteratorHelper from\"C:\\\\Users\\\\Acer\\\\Pathfinding-Algorithm-Visualiser\\\\Minor_project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";export function getAllNodes(grid){var nodes=[];for(var i=0;i<grid.length;i++){for(var j=0;j<grid[i].length;j++){nodes.push(grid[i][j]);}}return nodes;}export function getUnvisitedNeighbors(node,grid){var neighbors=[];var col=node.col,row=node.row;if(row>0){neighbors.push(grid[row-1][col]);}if(row<grid.length-1)neighbors.push(grid[row+1][col]);if(col>0)neighbors.push(grid[row][col-1]);if(col<grid[0].length-1)neighbors.push(grid[row][col+1]);return neighbors.filter(function(neighbor){return!neighbor.isVisited;});}export function getUnvisitedNeighborsforAstar(node,grid){var neighbors=[];var col=node.col,row=node.row;if(row>0){neighbors.push(grid[row-1][col]);}if(row<grid.length-1)neighbors.push(grid[row+1][col]);if(col>0)neighbors.push(grid[row][col-1]);if(col<grid[0].length-1)neighbors.push(grid[row][col+1]);return neighbors.filter(function(neighbor){return!neighbor.isWall;});}export function updateUnvisitedNeighbors(node,grid){var unvisitedNeighbors=getUnvisitedNeighbors(node,grid);var _iterator=_createForOfIteratorHelper(unvisitedNeighbors),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var neighbor=_step.value;neighbor.distance=node.distance+1;neighbor.previousNode=node;}}catch(err){_iterator.e(err);}finally{_iterator.f();}}export function updateUnvisitedNeighborsforastar(node,grid){var unvisitedNeighbors=getUnvisitedNeighborsforAstar(node,grid);var _iterator2=_createForOfIteratorHelper(unvisitedNeighbors),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var neighbor=_step2.value;neighbor.previousNode=node;}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return unvisitedNeighbors;}export function getNodesInShortestPathOrder(finishNode){var nodesInShortestPathOrder=[];var currentNode=finishNode;while(currentNode!==null){nodesInShortestPathOrder.unshift(currentNode);currentNode=currentNode.previousNode;}return nodesInShortestPathOrder;}export function sortNodesByDistance(unvisitedNodes){unvisitedNodes.sort(function(nodeA,nodeB){return nodeA.distance-nodeB.distance;});}export function findCost(node,finishNode){node.heruistic=getManhattan(node,finishNode);node.cost=node.distance+node.heruistic;}function getManhattan(node,finishNode){return Math.abs(finishNode.col-node.col)+Math.abs(finishNode.row-node.row);}","map":{"version":3,"sources":["C:/Users/Acer/Pathfinding-Algorithm-Visualiser/minor_project/src/Algorithms/AlgoTools.jsx"],"names":["getAllNodes","grid","nodes","i","length","j","push","getUnvisitedNeighbors","node","neighbors","col","row","filter","neighbor","isVisited","getUnvisitedNeighborsforAstar","isWall","updateUnvisitedNeighbors","unvisitedNeighbors","distance","previousNode","updateUnvisitedNeighborsforastar","getNodesInShortestPathOrder","finishNode","nodesInShortestPathOrder","currentNode","unshift","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","findCost","heruistic","getManhattan","cost","Math","abs"],"mappings":"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","sourcesContent":[" \r\n  export function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (var i=0;i<grid.length;i++) {\r\n      for (var j=0;j<(grid[i].length);j++) {\r\n        nodes.push(grid[i][j]);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n\r\n  export function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) {neighbors.push(grid[row - 1][col]); }\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n\r\n  export function getUnvisitedNeighborsforAstar(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) {neighbors.push(grid[row - 1][col]); }\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isWall)  \r\n  }\r\n \r\n  export function updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.previousNode = node;\r\n      \r\n\r\n    }\r\n  }\r\n\r\n  export function updateUnvisitedNeighborsforastar(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighborsforAstar(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      \r\n      \r\n      neighbor.previousNode = node;\r\n      \r\n    }\r\n    return unvisitedNeighbors\r\n  }\r\n  \r\n  export function getNodesInShortestPathOrder(finishNode) {\r\n    \r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n  return nodesInShortestPathOrder;\r\n  }\r\n\r\n  export function sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n\r\n  export function findCost(node,finishNode){\r\n\r\n    node.heruistic=getManhattan(node,finishNode)\r\n    node.cost=node.distance+ node.heruistic\r\n  }\r\n\r\n  function getManhattan(node,finishNode){\r\n    \r\n    return(Math.abs(finishNode.col-node.col)+Math.abs(finishNode.row-node.row))\r\n  }\r\n"]},"metadata":{},"sourceType":"module"}