{"ast":null,"code":"export function getAllNodes(grid) {\n  const nodes = [];\n\n  for (var i = 0; i < grid.length; i++) {\n    for (var j = 0; j < grid[i].length; j++) {\n      nodes.push(grid[i][j]);\n    }\n  }\n\n  return nodes;\n}\nexport function getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n\n  if (row > 0) {\n    neighbors.push(grid[row - 1][col]);\n  }\n\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\nexport function getUnvisitedNeighborsforAstar(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n\n  if (row > 0) {\n    neighbors.push(grid[row - 1][col]);\n  }\n\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isWall);\n}\nexport function updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\nexport function updateUnvisitedNeighborsforastar(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighborsforAstar(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.previousNode = node;\n  }\n\n  return unvisitedNeighbors;\n}\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}\nexport function sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\nexport function findCost(node, finishNode) {\n  node.heruistic = getManhattan(node, finishNode);\n  node.cost = node.distance + node.heruistic;\n}\n\nfunction getManhattan(node, finishNode) {\n  return Math.abs(finishNode.col - node.col) + Math.abs(finishNode.row - node.row);\n}","map":{"version":3,"sources":["E:/Pathfinding-Algorithm-Visualiser - Copy/Minor_project/src/Algorithms/AlgoTools.jsx"],"names":["getAllNodes","grid","nodes","i","length","j","push","getUnvisitedNeighbors","node","neighbors","col","row","filter","neighbor","isVisited","getUnvisitedNeighborsforAstar","isWall","updateUnvisitedNeighbors","unvisitedNeighbors","distance","previousNode","updateUnvisitedNeighborsforastar","getNodesInShortestPathOrder","finishNode","nodesInShortestPathOrder","currentNode","unshift","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","findCost","heruistic","getManhattan","cost","Math","abs"],"mappings":"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","sourcesContent":[" \r\n  export function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (var i=0;i<grid.length;i++) {\r\n      for (var j=0;j<(grid[i].length);j++) {\r\n        nodes.push(grid[i][j]);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n\r\n  export function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) {neighbors.push(grid[row - 1][col]); }\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n\r\n  export function getUnvisitedNeighborsforAstar(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) {neighbors.push(grid[row - 1][col]); }\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isWall)  \r\n  }\r\n \r\n  export function updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.previousNode = node;\r\n      \r\n\r\n    }\r\n  }\r\n\r\n  export function updateUnvisitedNeighborsforastar(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighborsforAstar(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      \r\n      \r\n      neighbor.previousNode = node;\r\n      \r\n    }\r\n    return unvisitedNeighbors\r\n  }\r\n  \r\n  export function getNodesInShortestPathOrder(finishNode) {\r\n    \r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n  return nodesInShortestPathOrder;\r\n  }\r\n\r\n  export function sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n\r\n  export function findCost(node,finishNode){\r\n\r\n    node.heruistic=getManhattan(node,finishNode)\r\n    node.cost=node.distance+ node.heruistic\r\n  }\r\n\r\n  function getManhattan(node,finishNode){\r\n    \r\n    return(Math.abs(finishNode.col-node.col)+Math.abs(finishNode.row-node.row))\r\n  }\r\n"]},"metadata":{},"sourceType":"module"}