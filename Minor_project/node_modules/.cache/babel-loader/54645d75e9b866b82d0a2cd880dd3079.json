{"ast":null,"code":"import{getAllNodes,updateUnvisitedNeighbors,sortNodesByDistance}from'./AlgoTools';export function dijkstra(grid,startNode,finishNode){var visitedNodesInOrder=[];startNode.distance=0;var unvisitedNodes=getAllNodes(grid);while(!!unvisitedNodes.length){sortNodesByDistance(unvisitedNodes);var closestNode=unvisitedNodes.shift();if(closestNode.isWall)continue;if(closestNode.distance===Infinity)return visitedNodesInOrder;closestNode.isVisited=true;visitedNodesInOrder.push(closestNode);if(closestNode===finishNode)return visitedNodesInOrder;updateUnvisitedNeighbors(closestNode,grid);}}","map":{"version":3,"sources":["C:/Users/Acer/Pathfinding-Algorithm-Visualiser/minor_project/src/Algorithms/Dijkstras.jsx"],"names":["getAllNodes","updateUnvisitedNeighbors","sortNodesByDistance","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","length","closestNode","shift","isWall","Infinity","isVisited","push"],"mappings":"AAAA,OAAQA,WAAR,CAAoBC,wBAApB,CAA6CC,mBAA7C,KAAwE,aAAxE,CAEA,MAAO,SAASC,CAAAA,QAAT,CAAkBC,IAAlB,CAAwBC,SAAxB,CAAmCC,UAAnC,CAA+C,CAClD,GAAMC,CAAAA,mBAAmB,CAAG,EAA5B,CACAF,SAAS,CAACG,QAAV,CAAqB,CAArB,CACA,GAAMC,CAAAA,cAAc,CAAGT,WAAW,CAACI,IAAD,CAAlC,CACA,MAAO,CAAC,CAACK,cAAc,CAACC,MAAxB,CAAgC,CAC9BR,mBAAmB,CAACO,cAAD,CAAnB,CACA,GAAME,CAAAA,WAAW,CAAGF,cAAc,CAACG,KAAf,EAApB,CACA,GAAID,WAAW,CAACE,MAAhB,CAAwB,SACxB,GAAIF,WAAW,CAACH,QAAZ,GAAyBM,QAA7B,CAAuC,MAAOP,CAAAA,mBAAP,CACvCI,WAAW,CAACI,SAAZ,CAAwB,IAAxB,CACAR,mBAAmB,CAACS,IAApB,CAAyBL,WAAzB,EACA,GAAIA,WAAW,GAAKL,UAApB,CAAgC,MAAOC,CAAAA,mBAAP,CAChCN,wBAAwB,CAACU,WAAD,CAAcP,IAAd,CAAxB,CACD,CACF","sourcesContent":["import {getAllNodes,updateUnvisitedNeighbors,sortNodesByDistance } from './AlgoTools';\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n      sortNodesByDistance(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();\r\n      if (closestNode.isWall) continue;\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  "]},"metadata":{},"sourceType":"module"}