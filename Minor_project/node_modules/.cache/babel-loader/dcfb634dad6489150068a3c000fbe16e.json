{"ast":null,"code":"export function createMaze(grid) {\n  const newGrid = grid;\n  const rand = Math.floor(Math.random() * newGrid[i].length);\n\n  for (var i = 0; i < newGrid.length; i = i + 2) {\n    for (var j = 0; j < grid[i].length; j++) {\n      if (rand < 0.5) {\n        newGrid[i][j].isWall = true;\n        console.log(newGrid.isWall + ' ' + i + ' ' + j);\n      } // newGrid[i][j].isWall=true\n      // console.log( newGrid.isWall+' '+i+' '+j)\n\n    }\n\n    const rand = Math.floor(Math.random() * newGrid[i].length); //generate random num betn 0 and newGrid[i].length\n\n    newGrid.isWall = false;\n  }\n\n  return newGrid;\n}","map":{"version":3,"sources":["E:/minor project/Pathfinding-Algorithm-visualiser/Minor_project/src/obstacles/Maze.jsx"],"names":["createMaze","grid","newGrid","rand","Math","floor","random","i","length","j","isWall","console","log"],"mappings":"AAAA,OAAO,SAASA,UAAT,CAAoBC,IAApB,EACH;AACI,QAAMC,OAAO,GAACD,IAAd;AACA,QAAME,IAAI,GAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcJ,OAAO,CAACK,CAAD,CAAP,CAAWC,MAApC,CAAX;;AACA,OAAI,IAAID,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACL,OAAO,CAACM,MAAtB,EAA8BD,CAAC,GAACA,CAAC,GAAC,CAAlC,EACA;AACI,SAAI,IAAIE,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACR,IAAI,CAACM,CAAD,CAAJ,CAAQC,MAAtB,EAA6BC,CAAC,EAA9B,EACA;AAEI,UAAGN,IAAI,GAAC,GAAR,EAAY;AACRD,QAAAA,OAAO,CAACK,CAAD,CAAP,CAAWE,CAAX,EAAcC,MAAd,GAAqB,IAArB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAaV,OAAO,CAACQ,MAAR,GAAe,GAAf,GAAmBH,CAAnB,GAAqB,GAArB,GAAyBE,CAAtC;AACH,OALL,CAMQ;AACA;;AAIP;;AACD,UAAMN,IAAI,GAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcJ,OAAO,CAACK,CAAD,CAAP,CAAWC,MAApC,CAAX,CAdJ,CAc2D;;AACvDN,IAAAA,OAAO,CAACQ,MAAR,GAAe,KAAf;AAEH;;AACD,SAAOR,OAAP;AACH","sourcesContent":["export function createMaze(grid)\r\n    {\r\n        const newGrid=grid\r\n        const rand=Math.floor(Math.random()*newGrid[i].length)\r\n        for(var i=0;i<newGrid.length;(i=i+2))\r\n        {\r\n            for(var j=0;j<grid[i].length;j++)\r\n            {\r\n                \r\n                if(rand<0.5){\r\n                    newGrid[i][j].isWall=true\r\n                    console.log( newGrid.isWall+' '+i+' '+j) \r\n                }\r\n                    // newGrid[i][j].isWall=true\r\n                    // console.log( newGrid.isWall+' '+i+' '+j)\r\n                    \r\n            \r\n                \r\n            }\r\n            const rand=Math.floor(Math.random()*newGrid[i].length) //generate random num betn 0 and newGrid[i].length\r\n            newGrid.isWall=false\r\n            \r\n        }\r\n        return newGrid;\r\n    }\r\n"]},"metadata":{},"sourceType":"module"}