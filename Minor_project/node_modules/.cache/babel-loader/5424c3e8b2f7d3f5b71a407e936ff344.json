{"ast":null,"code":"import { getAllNodes, updateUnvisitedNeighbors, sortNodesByDistance } from './AlgoTools';\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}","map":{"version":3,"sources":["W:/Pathfinding-Algorithm-Visualiser/Minor_project/src/Algorithms/Dijkstras.jsx"],"names":["getAllNodes","updateUnvisitedNeighbors","sortNodesByDistance","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","length","closestNode","shift","isWall","Infinity","isVisited","push"],"mappings":"AAAA,SAAQA,WAAR,EAAoBC,wBAApB,EAA6CC,mBAA7C,QAAwE,aAAxE;AAEA,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,SAAxB,EAAmCC,UAAnC,EAA+C;AAClD,QAAMC,mBAAmB,GAAG,EAA5B;AACAF,EAAAA,SAAS,CAACG,QAAV,GAAqB,CAArB;AACA,QAAMC,cAAc,GAAGT,WAAW,CAACI,IAAD,CAAlC;;AACA,SAAO,CAAC,CAACK,cAAc,CAACC,MAAxB,EAAgC;AAC9BR,IAAAA,mBAAmB,CAACO,cAAD,CAAnB;AACA,UAAME,WAAW,GAAGF,cAAc,CAACG,KAAf,EAApB;AACA,QAAID,WAAW,CAACE,MAAhB,EAAwB;AACxB,QAAIF,WAAW,CAACH,QAAZ,KAAyBM,QAA7B,EAAuC,OAAOP,mBAAP;AACvCI,IAAAA,WAAW,CAACI,SAAZ,GAAwB,IAAxB;AACAR,IAAAA,mBAAmB,CAACS,IAApB,CAAyBL,WAAzB;AACA,QAAIA,WAAW,KAAKL,UAApB,EAAgC,OAAOC,mBAAP;AAChCN,IAAAA,wBAAwB,CAACU,WAAD,EAAcP,IAAd,CAAxB;AACD;AACF","sourcesContent":["import {getAllNodes,updateUnvisitedNeighbors,sortNodesByDistance } from './AlgoTools';\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n      sortNodesByDistance(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();\r\n      if (closestNode.isWall) continue;\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  "]},"metadata":{},"sourceType":"module"}