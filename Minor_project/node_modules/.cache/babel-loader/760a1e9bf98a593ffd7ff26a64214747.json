{"ast":null,"code":"export function dfs(grid, startNode, finishNode) {\n  const stack = [];\n  const visitedNodesInOrder = [];\n  startNode.isVisited = true;\n  stack.push(startNode);\n\n  while (stack.length > 0) {\n    let currentNode = stack.pop();\n    currentNode.isVisited = true;\n\n    if (finishNode === currentNode) {\n      return visitedNodesInOrder;\n    }\n\n    if (currentNode.isWall) continue;\n    let neighbors = getUnvisitedNeighbors(grid, currentNode);\n\n    for (let i = 0; i < neighbors.length; i++) {\n      let neighbor = neighbors[i];\n\n      if (!neighbor.isVisited) {\n        neighbor.previousNode = currentNode;\n        visitedNodesInOrder.push(neighbor);\n        stack.push(neighbor);\n      }\n    }\n  }\n\n  return visitedNodesInOrder;\n}\n\nfunction getUnvisitedNeighbors(grid, node) {\n  const ROWS = grid.length;\n  const COLS = grid[0].length;\n  const {\n    row,\n    col\n  } = node;\n  const neighbors = [];\n\n  if (row - 1 >= 0 && row - 1 < ROWS && col >= 0 && col < COLS && !grid[row - 1][col].isWall && !grid[row - 1][col].isVisited) {\n    neighbors.unshift(grid[row - 1][col]);\n  }\n\n  if (row >= 0 && row < ROWS && col + 1 >= 0 && col + 1 < COLS && !grid[row][col + 1].isWall && !grid[row][col + 1].isVisited) {\n    neighbors.unshift(grid[row][col + 1]);\n  }\n\n  if (row + 1 >= 0 && row + 1 < ROWS && col >= 0 && col < COLS && !grid[row + 1][col].isVisited && !grid[row + 1][col].isWall) {\n    neighbors.unshift(grid[row + 1][col]);\n  }\n\n  if (row >= 0 && row < ROWS && col - 1 >= 0 && col - 1 < COLS && !grid[row][col - 1].isWall && !grid[row][col - 1].isVisited) {\n    neighbors.unshift(grid[row][col - 1]);\n  }\n\n  return neighbors;\n}","map":{"version":3,"sources":["W:/Pathfinding-Algorithm-Visualiser/Minor_project/src/Algorithms/DFS.jsx"],"names":["dfs","grid","startNode","finishNode","stack","visitedNodesInOrder","isVisited","push","length","currentNode","pop","isWall","neighbors","getUnvisitedNeighbors","i","neighbor","previousNode","node","ROWS","COLS","row","col","unshift"],"mappings":"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","sourcesContent":["\r\nexport function dfs(grid, startNode, finishNode) {\r\n  const stack = [];\r\n  const visitedNodesInOrder = [];\r\n\r\n  startNode.isVisited = true;\r\n  stack.push(startNode);\r\n\r\n  while (stack.length > 0) {\r\n      let currentNode = stack.pop();\r\n\r\n      currentNode.isVisited = true;\r\n\r\n      if (finishNode === currentNode){\r\n        return visitedNodesInOrder;\r\n      }\r\n\r\n      if (currentNode.isWall) continue;\r\n\r\n      let neighbors = getUnvisitedNeighbors(grid, currentNode);\r\n      \r\n      for (let i = 0; i < neighbors.length; i++) {\r\n        let neighbor = neighbors[i];\r\n        if(!neighbor.isVisited){\r\n          neighbor.previousNode = currentNode;\r\n          visitedNodesInOrder.push(neighbor);\r\n          stack.push(neighbor);\r\n        }\r\n      }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getUnvisitedNeighbors(grid, node) {\r\n  const ROWS = grid.length;\r\n  const COLS = grid[0].length;\r\n\r\n  const { row, col } = node;\r\n  const neighbors = [];\r\n\r\n  if (\r\n    row - 1 >= 0 &&\r\n    row - 1 < ROWS &&\r\n    col >= 0 &&\r\n    col < COLS &&\r\n    !grid[row - 1][col].isWall &&\r\n    !grid[row - 1][col].isVisited\r\n  ) {\r\n        neighbors.unshift(grid[row - 1][col]);\r\n  }\r\n  \r\n  if (\r\n    row >= 0 &&\r\n    row < ROWS &&\r\n    col + 1 >= 0 &&\r\n    col + 1 < COLS &&\r\n    !grid[row][col + 1].isWall &&\r\n    !grid[row][col + 1].isVisited\r\n  ) {\r\n    neighbors.unshift(grid[row][col + 1]);\r\n  }\r\n\r\n  if (\r\n      row + 1 >= 0 &&\r\n      row + 1 < ROWS &&\r\n      col >= 0 &&\r\n      col < COLS &&\r\n      !grid[row + 1][col].isVisited &&\r\n      !grid[row + 1][col].isWall\r\n  ) {\r\n      neighbors.unshift(grid[row + 1][col]);\r\n  }\r\n \r\n  if (\r\n      row >= 0 &&\r\n      row < ROWS &&\r\n      col - 1 >= 0 &&\r\n      col - 1 < COLS &&\r\n      !grid[row][col - 1].isWall &&\r\n      !grid[row][col - 1].isVisited\r\n  ) {\r\n      neighbors.unshift(grid[row][col - 1]);\r\n  }\r\n  \r\n\r\n  return neighbors;\r\n}\r\n                          \r\n  "]},"metadata":{},"sourceType":"module"}