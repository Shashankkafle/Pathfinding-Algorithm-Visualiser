{"ast":null,"code":"export function dfs(grid,startNode,finishNode){var stack=[];var visitedNodesInOrder=[];startNode.isVisited=true;stack.push(startNode);while(stack.length>0){var currentNode=stack.pop();currentNode.isVisited=true;if(finishNode===currentNode){return visitedNodesInOrder;}if(currentNode.isWall)continue;var neighbors=getUnvisitedNeighbors(grid,currentNode);for(var i=0;i<neighbors.length;i++){var neighbor=neighbors[i];if(!neighbor.isVisited){neighbor.previousNode=currentNode;visitedNodesInOrder.push(neighbor);stack.push(neighbor);}}}return visitedNodesInOrder;}function getUnvisitedNeighbors(grid,node){var ROWS=grid.length;var COLS=grid[0].length;var row=node.row,col=node.col;var neighbors=[];if(row-1>=0&&row-1<ROWS&&col>=0&&col<COLS&&!grid[row-1][col].isWall&&!grid[row-1][col].isVisited){neighbors.unshift(grid[row-1][col]);}if(row>=0&&row<ROWS&&col+1>=0&&col+1<COLS&&!grid[row][col+1].isWall&&!grid[row][col+1].isVisited){neighbors.unshift(grid[row][col+1]);}if(row+1>=0&&row+1<ROWS&&col>=0&&col<COLS&&!grid[row+1][col].isVisited&&!grid[row+1][col].isWall){neighbors.unshift(grid[row+1][col]);}if(row>=0&&row<ROWS&&col-1>=0&&col-1<COLS&&!grid[row][col-1].isWall&&!grid[row][col-1].isVisited){neighbors.unshift(grid[row][col-1]);}return neighbors;}","map":{"version":3,"sources":["C:/Users/Acer/Pathfinding-Algorithm-Visualiser/minor_project/src/Algorithms/DFS.jsx"],"names":["dfs","grid","startNode","finishNode","stack","visitedNodesInOrder","isVisited","push","length","currentNode","pop","isWall","neighbors","getUnvisitedNeighbors","i","neighbor","previousNode","node","ROWS","COLS","row","col","unshift"],"mappings":"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","sourcesContent":["\r\nexport function dfs(grid, startNode, finishNode) {\r\n  const stack = [];\r\n  const visitedNodesInOrder = [];\r\n\r\n  startNode.isVisited = true;\r\n  stack.push(startNode);\r\n\r\n  while (stack.length > 0) {\r\n      let currentNode = stack.pop();\r\n\r\n      currentNode.isVisited = true;\r\n\r\n      if (finishNode === currentNode){\r\n        return visitedNodesInOrder;\r\n      }\r\n\r\n      if (currentNode.isWall) continue;\r\n\r\n      let neighbors = getUnvisitedNeighbors(grid, currentNode);\r\n      \r\n      for (let i = 0; i < neighbors.length; i++) {\r\n        let neighbor = neighbors[i];\r\n        if(!neighbor.isVisited){\r\n          neighbor.previousNode = currentNode;\r\n          visitedNodesInOrder.push(neighbor);\r\n          stack.push(neighbor);\r\n        }\r\n      }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getUnvisitedNeighbors(grid, node) {\r\n  const ROWS = grid.length;\r\n  const COLS = grid[0].length;\r\n\r\n  const { row, col } = node;\r\n  const neighbors = [];\r\n\r\n  if (\r\n    row - 1 >= 0 &&\r\n    row - 1 < ROWS &&\r\n    col >= 0 &&\r\n    col < COLS &&\r\n    !grid[row - 1][col].isWall &&\r\n    !grid[row - 1][col].isVisited\r\n  ) {\r\n        neighbors.unshift(grid[row - 1][col]);\r\n  }\r\n  \r\n  if (\r\n    row >= 0 &&\r\n    row < ROWS &&\r\n    col + 1 >= 0 &&\r\n    col + 1 < COLS &&\r\n    !grid[row][col + 1].isWall &&\r\n    !grid[row][col + 1].isVisited\r\n  ) {\r\n    neighbors.unshift(grid[row][col + 1]);\r\n  }\r\n\r\n  if (\r\n      row + 1 >= 0 &&\r\n      row + 1 < ROWS &&\r\n      col >= 0 &&\r\n      col < COLS &&\r\n      !grid[row + 1][col].isVisited &&\r\n      !grid[row + 1][col].isWall\r\n  ) {\r\n      neighbors.unshift(grid[row + 1][col]);\r\n  }\r\n \r\n  if (\r\n      row >= 0 &&\r\n      row < ROWS &&\r\n      col - 1 >= 0 &&\r\n      col - 1 < COLS &&\r\n      !grid[row][col - 1].isWall &&\r\n      !grid[row][col - 1].isVisited\r\n  ) {\r\n      neighbors.unshift(grid[row][col - 1]);\r\n  }\r\n  \r\n\r\n  return neighbors;\r\n}\r\n                          \r\n  "]},"metadata":{},"sourceType":"module"}