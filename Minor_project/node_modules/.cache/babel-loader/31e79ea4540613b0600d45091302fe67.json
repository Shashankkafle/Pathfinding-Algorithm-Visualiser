{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Pathfinding-Algorithm-Visualiser\\\\Minor_project\\\\src\\\\Grid.jsx\";\nimport React from 'react';\nimport { Component } from 'react';\nimport Node from './Node';\nimport './grid.css';\nexport default class Grid extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseUp(row, col) {\n    const newGrid = toggleWall(this.state.grid, col, row);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeDijkstra(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }\n    }, \"Visualize Dijkstra's Algorithm(currently not working)\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 19\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isFinish,\n          isStart,\n          isWall\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed //onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n          ,\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }\n        });\n      }));\n    })));\n  }\n\n}\n;\n\nconst toggleWall = (grid, row, col) => {\n  const newGrid = grid.slice(); //dk how slice works\n\n  const node = newGrid[row][col]; //not defined\n\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst createNode = (col, row) => {\n  //dk why these functions are out of the class\n  return {\n    col,\n    row,\n    isStart: false,\n    isFinish: false,\n    //distance: Infinity,\n    //isVisited: false,\n    isWall: false //previousNode: null,\n\n  };\n};\n\nconst getInitialGrid = () => {\n  var grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    var temp = [];\n\n    for (let col = 0; col < 50; col++) {\n      temp[col] = createNode(col, row);\n    }\n\n    grid[row] = temp;\n  }\n\n  return grid;\n};","map":{"version":3,"sources":["C:/Users/Acer/Pathfinding-Algorithm-Visualiser/Minor_project/src/Grid.jsx"],"names":["React","Component","Node","Grid","constructor","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseUp","row","col","newGrid","toggleWall","render","visualizeDijkstra","map","rowIdx","node","nodeIdx","isFinish","isStart","isWall","handleMouseEnter","slice","newNode","createNode","temp"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Component } from 'react'\r\nimport Node from './Node'\r\nimport './grid.css'\r\n\r\nexport default class Grid extends Component\r\n{\r\n    constructor() \r\n    {\r\n        super();\r\n        this.state = {\r\n          grid: [],\r\n          mouseIsPressed: false,\r\n        };\r\n    } \r\n    componentDidMount() {\r\n      const grid = getInitialGrid();\r\n      this.setState({grid});\r\n    }\r\n    handleMouseUp(row, col) {\r\n      const newGrid=toggleWall(this.state.grid,col,row)\r\n      this.setState({grid:newGrid, mouseIsPressed:true})\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n\r\n    render() {\r\n        const {grid, mouseIsPressed} = this.state;\r\n        \r\n    \r\n        return (\r\n          <>\r\n            <button onClick={() => this.visualizeDijkstra()}>\r\n              Visualize Dijkstra's Algorithm(currently not working)\r\n            </button>\r\n            <div className=\"grid\"> \r\n              {grid.map((row, rowIdx) => { \r\n                return (\r\n                  <div key={rowIdx}>\r\n                    {row.map((node, nodeIdx) => {\r\n                      const {row, col, isFinish, isStart, isWall} = node;\r\n                      return (\r\n                        <Node\r\n                          key={nodeIdx}\r\n                          col={col}\r\n                          isFinish={isFinish}\r\n                          isStart={isStart}\r\n                          isWall={isWall}\r\n                          mouseIsPressed={mouseIsPressed}\r\n                          //onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                          onMouseEnter={(row, col) =>\r\n                            this.handleMouseEnter(row, col)\r\n                          }\r\n                          onMouseUp={() => this.handleMouseUp()}\r\n                          row={row}></Node>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </>\r\n        );\r\n      }\r\n};\r\nconst toggleWall = (grid, row, col) => {\r\n  const newGrid = grid.slice(); //dk how slice works\r\n  const node = newGrid[row][col]; //not defined\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\nconst createNode = (col, row) => { //dk why these functions are out of the class\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: false,\r\n    isFinish:  false,\r\n    //distance: Infinity,\r\n    //isVisited: false,\r\n    isWall: false,\r\n    //previousNode: null,\r\n  };\r\n};\r\nconst getInitialGrid = () => {\r\n  var grid = []\r\n  for (let row = 0; row < 20; row++) {\r\n    var temp = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      temp[col]=createNode(col,row)\r\n    }\r\n    grid[row]=temp\r\n  }\r\n  return grid;\r\n};\r\n   "]},"metadata":{},"sourceType":"module"}