{"ast":null,"code":"var _jsxFileName = \"W:\\\\Pathfinding-Algorithm-Visualiser\\\\Minor_project\\\\src\\\\Grid.jsx\";\nimport React from \"react\";\nimport { Component } from \"react\";\nimport Node from \"./Node.jsx\";\nimport \"./grid.css\";\nimport { getAllNodes, getNodesInShortestPathOrder } from \"./Algorithms/AlgoTools\";\nimport { dijkstra } from \"./Algorithms/Dijkstras\";\nimport { aStar } from \"./Algorithms/Astar\";\nimport { generateWall1, generateWall2, generateWall3 } from \"./obstacles/RandomWalls\";\nimport { createMaze } from \"./obstacles/Maze\";\nimport { unweightedSearchAlgorithm } from \"./Algorithms/BFS\";\nimport { dfs } from \"./Algorithms/DFS\";\nimport Table from \"react-bootstrap/Table\";\nexport default class Grid extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      currentAlgorithm: [],\n      performance: [],\n      numberOfAlgos: 0,\n      disabledStart: true\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    getAllNodes(grid);\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  clearGrid() {\n    const {\n      grid\n    } = this.state;\n\n    for (var i = 0; i < grid.length; i++) {\n      for (var j = 0; j < grid[i].length; j++) {\n        grid[i][j].isVisited = false;\n        if (!grid[i][j].isStart && !grid[i][j].isFinish && !grid[i][j].isWall) document.getElementById(`node-${grid[i][j].row}-${grid[i][j].col}`).className = \"node \";\n      }\n    }\n  }\n\n  clearWalls() {\n    const {\n      grid\n    } = this.state;\n\n    for (var i = 0; i < grid.length; i++) {\n      for (var j = 0; j < grid[i].length; j++) {\n        grid[i][j].isVisited = false;\n        grid[i][j].isWall = false;\n        if (!grid[i][j].isStart && !grid[i][j].isFinish) document.getElementById(`node-${grid[i][j].row}-${grid[i][j].col}`).className = \"node \";\n      }\n    }\n  }\n\n  recordPerofrmence(algo, time, numberOfVisited, lengthOfSHortestPath) {\n    const {\n      performance\n    } = this.state;\n    var tempPerformance = new Object();\n    tempPerformance.algorithm = algo;\n    tempPerformance.time = time;\n    tempPerformance.shortestPathLength = lengthOfSHortestPath;\n    tempPerformance.numberOfVisitedNodes = numberOfVisited;\n    performance.push(tempPerformance);\n  }\n\n  displayPerformance() {\n    const {\n      performance\n    } = this.state;\n    const {\n      numberOfAlgos\n    } = this.state;\n    var colName = document.getElementById(\"algorithm\");\n    var colTime = document.getElementById(\"time\");\n    var colShortestDistance = document.getElementById(\"distance\");\n    var colNumberOfVisited = document.getElementById(\"visitedNodes\");\n    colName.innerHTML = \"algorithm\";\n    colTime.innerHTML = \"time\";\n    colShortestDistance.innerHTML = \"Shortest Path Length\";\n    colNumberOfVisited.innerHTML = \"Number Of Visited Nodes\";\n    var name = [],\n        time = [],\n        shrotestDistance = [],\n        numberOfNodes = [];\n\n    for (let i = 0; i < numberOfAlgos; i++) {\n      name[i] = document.getElementById(\"name\" + i);\n      time[i] = document.getElementById(\"time\" + i);\n      shrotestDistance[i] = document.getElementById(\"distance\" + i);\n      numberOfNodes[i] = document.getElementById(\"visitedNodes\" + i);\n      name[i].innerHTML = performance[i].algorithm;\n      time[i].innerHTML = performance[i].time.toString() + \" ms\";\n      shrotestDistance[i].innerHTML = performance[i].shortestPathLength.toString();\n      numberOfNodes[i].innerHTML = performance[i].numberOfVisitedNodes.toString();\n    }\n\n    this.showComparison();\n\n    if (numberOfAlgos == 1) {\n      document.getElementById(\"table\").style.marginLeft = \"500px\";\n      document.getElementById(\"timeList\").style.display = \"none\";\n      document.getElementById(\"spaceList\").style.display = \"none\";\n    }\n\n    if (numberOfAlgos > 1) {\n      document.getElementById(\"table\").style.marginLeft = \"120px\";\n      document.getElementById(\"timeList\").style.display = \"block\";\n      document.getElementById(\"spaceList\").style.display = \"block\";\n      this.showComparison();\n    }\n\n    if (numberOfAlgos == 4) {\n      this.setState({\n        numberOfAlgos: 0\n      });\n    }\n  }\n\n  showComparison() {\n    const {\n      performance\n    } = this.state;\n    const {\n      numberOfAlgos\n    } = this.state;\n    var tempPerformance = performance;\n    tempPerformance.sort((a, b) => {\n      return a.time > b.time ? 1 : -1;\n    });\n    document.getElementById(\"timelist\").innerHTML = \"Algorithms ordered based on time\";\n\n    for (let i = 0; i < numberOfAlgos; i++) {\n      document.getElementById(\"timerow\" + i).innerHTML = tempPerformance[i].algorithm;\n    }\n\n    tempPerformance.sort((a, b) => {\n      return a.numberOfVisitedNodes > b.numberOfVisitedNodes ? 1 : -1;\n    });\n    document.getElementById(\"spacelist\").innerHTML = \"Algorithms ordered based on space\";\n\n    for (let i = 0; i < numberOfAlgos; i++) {\n      document.getElementById(\"spacerow\" + i).innerHTML = tempPerformance[i].algorithm;\n    }\n  }\n\n  animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\n    const {\n      grid\n    } = this.state;\n\n    if (!visitedNodesInOrder.includes(grid[10][35])) {\n      alert(\"No path avilable. Please try again\");\n      window.location.reload();\n    }\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 20 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n\n        if (!(visitedNodesInOrder[i].isStart || visitedNodesInOrder[i].isFinish)) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visited\";\n        }\n      }, 20 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    let j = 0;\n\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n\n        if (!(nodesInShortestPathOrder[i].isStart || nodesInShortestPathOrder[i].isFinish)) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-shortest-path\";\n        }\n      }, 30 * i);\n      j++;\n    }\n\n    setTimeout(() => {\n      this.clearGrid();\n    }, 20 * j * 2);\n    setTimeout(() => {\n      this.startVisualization();\n    }, 20 * j * 2);\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[10][15];\n    const finishNode = grid[10][35];\n    var t0 = performance.now();\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    var t1 = performance.now();\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    this.recordPerofrmence(\"dijkstras\", t1 - t0, visitedNodesInOrder.length, nodesInShortestPathOrder.length);\n  }\n\n  visualizeAstar() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[10][15];\n    const finishNode = grid[10][35];\n    var t0 = performance.now();\n    const visitedNodesInOrder = aStar(grid, startNode, finishNode);\n    var t1 = performance.now();\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    this.recordPerofrmence(\"astar\", t1 - t0, visitedNodesInOrder.length, nodesInShortestPathOrder.length);\n  }\n\n  visualizeBfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[10][15];\n    const finishNode = grid[10][35];\n    var t0 = performance.now();\n    const visitedNodesInOrder = unweightedSearchAlgorithm(grid, startNode, finishNode);\n    var t1 = performance.now();\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    this.recordPerofrmence(\"bfs\", t1 - t0, visitedNodesInOrder.length, nodesInShortestPathOrder.length);\n  }\n\n  visualizeDfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[10][15];\n    const finishNode = grid[10][35];\n    var t0 = performance.now();\n    const visitedNodesInOrder = dfs(grid, startNode, finishNode);\n    var t1 = performance.now();\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    this.recordPerofrmence(\"dfs\", t1 - t0, visitedNodesInOrder.length, nodesInShortestPathOrder.length);\n  }\n\n  selectionfunction(algo) {\n    const {\n      currentAlgorithm\n    } = this.state;\n    const {\n      numberOfAlgos\n    } = this.state;\n\n    if (!currentAlgorithm.includes(algo)) {\n      currentAlgorithm.push(algo);\n      this.setState({\n        numberOfAlgos: numberOfAlgos + 1\n      });\n      this.setState({\n        disabledStart: false\n      });\n    }\n  }\n\n  startVisualization() {\n    const {\n      currentAlgorithm\n    } = this.state;\n    const {\n      numberOfAlgos\n    } = this.state;\n    var algo = currentAlgorithm.pop();\n    this.setState({\n      disabledStart: true\n    });\n    var currentAlgo = document.getElementById(\"currentAlgo\");\n\n    if (algo != undefined) {\n      currentAlgo.innerHTML = \"Current Algorithm: \" + \" \" + algo;\n    } else {\n      currentAlgo.innerHTML = \"\";\n    }\n\n    if (algo == \"dijsktras\") {\n      this.visualizeDijkstra();\n    }\n\n    if (algo == \"astar\") {\n      this.visualizeAstar();\n    }\n\n    if (algo == \"bfs\") {\n      this.visualizeBfs();\n    }\n\n    if (algo == \"dfs\") {\n      this.visualizeDfs();\n    }\n\n    if (currentAlgorithm.length === 0) {\n      document.getElementById(\"table\").style.display = \"inline-table\";\n      document.getElementById(\"timeList\").style.display = \"block\";\n      document.getElementById(\"spaceList\").style.display = \"block\";\n      this.displayPerformance();\n    }\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"navBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"http://localhost:3000/\",\n      className: \"onlyLeft\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 11\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 13\n      }\n    }, \" Pathfinding Visualizer \")), /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 11\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.startVisualization(),\n      className: \"newTools\",\n      disabled: this.state.disabledStart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 13\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 15\n      }\n    }, \"Visualize!\"), \" \")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dropDown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"dropBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 15\n      }\n    }, \" Algorithms \")), /*#__PURE__*/React.createElement(\"select\", {\n      className: \"dropdown-algo\",\n      id: \"dropdown-algo\",\n      multiple: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      onClick: () => this.selectionfunction(\"dijsktras\"),\n      id: \"dijsktras\",\n      className: \"algoBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 15\n      }\n    }, \" \", \"Dijkstra's algorithm\", \" \"), /*#__PURE__*/React.createElement(\"option\", {\n      onClick: () => this.selectionfunction(\"astar\"),\n      id: \"astar\",\n      className: \"algoBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 15\n      }\n    }, \" \", \"Astar algorithm\", \" \"), /*#__PURE__*/React.createElement(\"option\", {\n      onClick: () => this.selectionfunction(\"bfs\"),\n      id: \"bfs\",\n      className: \"algoBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 15\n      }\n    }, \" \", \"Bfs algorithm\", \" \"), /*#__PURE__*/React.createElement(\"option\", {\n      onClick: () => this.selectionfunction(\"dfs\"),\n      id: \"dfs\",\n      className: \"algoBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 15\n      }\n    }, \" \", \"Dfs algorithm\", \" \"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"wall\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"dropWall\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 15\n      }\n    }, \" Wall \"), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dropdown-wall\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => {\n        const {\n          grid\n        } = this.state;\n        const newGrid = generateWall1(grid);\n        this.setState({\n          grid: newGrid\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 15\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 17\n      }\n    }, \" Level 1\"), \" \"), /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => {\n        const {\n          grid\n        } = this.state;\n        const newGrid = generateWall2(grid);\n        this.setState({\n          grid: newGrid\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 15\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 17\n      }\n    }, \" Level 2\"), \" \"), /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => {\n        const {\n          grid\n        } = this.state;\n        const newGrid = generateWall3(grid);\n        this.setState({\n          grid: newGrid\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 15\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 17\n      }\n    }, \" Level 3\"), \" \"), /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => {\n        const {\n          grid\n        } = this.state;\n        const newGrid = createMaze(grid);\n        this.setState({\n          grid: newGrid\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 15\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 17\n      }\n    }, \" Generate Maze\"), \" \"))), /*#__PURE__*/React.createElement(\"a\", {\n      href: \"http://localhost:3000/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 11\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 13\n      }\n    }, \" Reset\"))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"analysisContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"tableContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      id: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      id: \"algorithm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"th\", {\n      id: \"time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"th\", {\n      id: \"distance\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"th\", {\n      id: \"visitedNodes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 19\n      }\n    }))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      id: \"name0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      id: \"time0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      id: \"distance0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      id: \"visitedNodes0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      id: \"name1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      id: \"time1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      id: \"distance1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      id: \"visitedNodes1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      id: \"name2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      id: \"time2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      id: \"distance2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      id: \"visitedNodes2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      id: \"name3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      id: \"time3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      id: \"distance3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      id: \"visitedNodes3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 19\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"listContainer1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      id: \"timeList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      id: \"timelist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"li\", {\n      id: \"timerow0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"li\", {\n      id: \"timerow1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"li\", {\n      id: \"timerow2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"li\", {\n      id: \"timerow3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"listContainer2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      id: \"spaceList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      id: \"spacelist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"li\", {\n      id: \"spacerow0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"li\", {\n      id: \"spacerow1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"li\", {\n      id: \"spacerow2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"li\", {\n      id: \"spacerow3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 15\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"currentAlgo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isFinish,\n          isStart,\n          isWall\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const temp = [];\n\n    for (let col = 0; col < 50; col++) {\n      temp.push(createNode(col, row));\n    }\n\n    grid.push(temp);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === 10 && col === 15,\n    isFinish: row === 10 && col === 35,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["W:/Pathfinding-Algorithm-Visualiser/Minor_project/src/Grid.jsx"],"names":["React","Component","Node","getAllNodes","getNodesInShortestPathOrder","dijkstra","aStar","generateWall1","generateWall2","generateWall3","createMaze","unweightedSearchAlgorithm","dfs","Table","Grid","constructor","state","grid","mouseIsPressed","currentAlgorithm","performance","numberOfAlgos","disabledStart","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","clearGrid","i","length","j","isVisited","isStart","isFinish","isWall","document","getElementById","className","clearWalls","recordPerofrmence","algo","time","numberOfVisited","lengthOfSHortestPath","tempPerformance","Object","algorithm","shortestPathLength","numberOfVisitedNodes","push","displayPerformance","colName","colTime","colShortestDistance","colNumberOfVisited","innerHTML","name","shrotestDistance","numberOfNodes","toString","showComparison","style","marginLeft","display","sort","a","b","animateAlgorithm","visitedNodesInOrder","nodesInShortestPathOrder","includes","alert","window","location","reload","setTimeout","animateShortestPath","node","startVisualization","visualizeDijkstra","startNode","finishNode","t0","now","t1","visualizeAstar","visualizeBfs","visualizeDfs","selectionfunction","pop","currentAlgo","undefined","render","map","rowIdx","nodeIdx","temp","createNode","distance","Infinity","previousNode","slice","newNode"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport Node from \"./Node.jsx\";\r\nimport \"./grid.css\";\r\nimport {\r\n  getAllNodes,\r\n  getNodesInShortestPathOrder,\r\n} from \"./Algorithms/AlgoTools\";\r\nimport { dijkstra } from \"./Algorithms/Dijkstras\";\r\nimport { aStar } from \"./Algorithms/Astar\";\r\nimport {\r\n  generateWall1,\r\n  generateWall2,\r\n  generateWall3,\r\n} from \"./obstacles/RandomWalls\";\r\nimport { createMaze } from \"./obstacles/Maze\";\r\nimport { unweightedSearchAlgorithm } from \"./Algorithms/BFS\";\r\nimport { dfs } from \"./Algorithms/DFS\";\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nexport default class Grid extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      currentAlgorithm: [],\r\n      performance: [],\r\n      numberOfAlgos: 0,\r\n      disabledStart: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    getAllNodes(grid);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  clearGrid() {\r\n    const { grid } = this.state;\r\n    for (var i = 0; i < grid.length; i++) {\r\n      for (var j = 0; j < grid[i].length; j++) {\r\n        grid[i][j].isVisited = false;\r\n        if (!grid[i][j].isStart && !grid[i][j].isFinish && !grid[i][j].isWall)\r\n          document.getElementById(\r\n            `node-${grid[i][j].row}-${grid[i][j].col}`\r\n          ).className = \"node \";\r\n      }\r\n    }\r\n  }\r\n\r\n  clearWalls() {\r\n    const { grid } = this.state;\r\n    for (var i = 0; i < grid.length; i++) {\r\n      for (var j = 0; j < grid[i].length; j++) {\r\n        grid[i][j].isVisited = false;\r\n        grid[i][j].isWall = false;\r\n        if (!grid[i][j].isStart && !grid[i][j].isFinish)\r\n          document.getElementById(\r\n            `node-${grid[i][j].row}-${grid[i][j].col}`\r\n          ).className = \"node \";\r\n      }\r\n    }\r\n  }\r\n\r\n  recordPerofrmence(algo, time, numberOfVisited, lengthOfSHortestPath) {\r\n    const { performance } = this.state;\r\n    var tempPerformance = new Object();\r\n    tempPerformance.algorithm = algo;\r\n    tempPerformance.time = time;\r\n    tempPerformance.shortestPathLength = lengthOfSHortestPath;\r\n    tempPerformance.numberOfVisitedNodes = numberOfVisited;\r\n    performance.push(tempPerformance);\r\n  }\r\n\r\n  displayPerformance() {\r\n    const { performance } = this.state;\r\n    const { numberOfAlgos } = this.state;\r\n    var colName = document.getElementById(\"algorithm\");\r\n    var colTime = document.getElementById(\"time\");\r\n    var colShortestDistance = document.getElementById(\"distance\");\r\n    var colNumberOfVisited = document.getElementById(\"visitedNodes\");\r\n    colName.innerHTML = \"algorithm\";\r\n    colTime.innerHTML = \"time\";\r\n    colShortestDistance.innerHTML = \"Shortest Path Length\";\r\n    colNumberOfVisited.innerHTML = \"Number Of Visited Nodes\";\r\n    var name = [],\r\n      time = [],\r\n      shrotestDistance = [],\r\n      numberOfNodes = [];\r\n\r\n    for (let i = 0; i < numberOfAlgos; i++) {\r\n      name[i] = document.getElementById(\"name\" + i);\r\n      time[i] = document.getElementById(\"time\" + i);\r\n      shrotestDistance[i] = document.getElementById(\"distance\" + i);\r\n      numberOfNodes[i] = document.getElementById(\"visitedNodes\" + i);\r\n      name[i].innerHTML = performance[i].algorithm;\r\n      time[i].innerHTML = performance[i].time.toString() + \" ms\";\r\n      shrotestDistance[i].innerHTML =\r\n        performance[i].shortestPathLength.toString();\r\n      numberOfNodes[i].innerHTML =\r\n        performance[i].numberOfVisitedNodes.toString();\r\n    }\r\n    this.showComparison();\r\n\r\n    if (numberOfAlgos == 1) {\r\n      document.getElementById(\"table\").style.marginLeft = \"500px\";\r\n      document.getElementById(\"timeList\").style.display = \"none\";\r\n      document.getElementById(\"spaceList\").style.display = \"none\";\r\n    }\r\n\r\n    if (numberOfAlgos > 1) {\r\n      document.getElementById(\"table\").style.marginLeft = \"120px\";\r\n      document.getElementById(\"timeList\").style.display = \"block\";\r\n      document.getElementById(\"spaceList\").style.display = \"block\";\r\n      this.showComparison();\r\n    }\r\n\r\n    if (numberOfAlgos == 4) {\r\n      this.setState({\r\n        numberOfAlgos: 0,\r\n      });\r\n    }\r\n  }\r\n\r\n  showComparison() {\r\n    const { performance } = this.state;\r\n    const { numberOfAlgos } = this.state;\r\n    var tempPerformance = performance;\r\n    tempPerformance.sort((a, b) => {\r\n      return a.time > b.time ? 1 : -1;\r\n    });\r\n\r\n    document.getElementById(\"timelist\").innerHTML =\r\n      \"Algorithms ordered based on time\";\r\n\r\n    for (let i = 0; i < numberOfAlgos; i++) {\r\n      document.getElementById(\"timerow\" + i).innerHTML =\r\n        tempPerformance[i].algorithm;\r\n    }\r\n\r\n    tempPerformance.sort((a, b) => {\r\n      return a.numberOfVisitedNodes > b.numberOfVisitedNodes ? 1 : -1;\r\n    });\r\n\r\n    document.getElementById(\"spacelist\").innerHTML =\r\n      \"Algorithms ordered based on space\";\r\n\r\n    for (let i = 0; i < numberOfAlgos; i++) {\r\n      document.getElementById(\"spacerow\" + i).innerHTML =\r\n        tempPerformance[i].algorithm;\r\n    }\r\n  }\r\n\r\n  animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    const { grid } = this.state;\r\n    if (!visitedNodesInOrder.includes(grid[10][35])) {\r\n      alert(\"No path avilable. Please try again\");\r\n      window.location.reload();\r\n    }\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 20 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        if (\r\n          !(visitedNodesInOrder[i].isStart || visitedNodesInOrder[i].isFinish)\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-visited\";\r\n        }\r\n      }, 20 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    let j = 0;\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        if (\r\n          !(\r\n            nodesInShortestPathOrder[i].isStart ||\r\n            nodesInShortestPathOrder[i].isFinish\r\n          )\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-shortest-path\";\r\n        }\r\n      }, 30 * i);\r\n      j++;\r\n    }\r\n    setTimeout(() => {\r\n      this.clearGrid();\r\n    }, 20 * j * 2);\r\n    setTimeout(() => {\r\n      this.startVisualization();\r\n    }, 20 * j * 2);\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[10][15];\r\n    const finishNode = grid[10][35];\r\n    var t0 = performance.now();\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    var t1 = performance.now();\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    this.recordPerofrmence(\r\n      \"dijkstras\",\r\n      t1 - t0,\r\n      visitedNodesInOrder.length,\r\n      nodesInShortestPathOrder.length\r\n    );\r\n  }\r\n\r\n  visualizeAstar() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[10][15];\r\n    const finishNode = grid[10][35];\r\n    var t0 = performance.now();\r\n    const visitedNodesInOrder = aStar(grid, startNode, finishNode);\r\n    var t1 = performance.now();\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    this.recordPerofrmence(\r\n      \"astar\",\r\n      t1 - t0,\r\n      visitedNodesInOrder.length,\r\n      nodesInShortestPathOrder.length\r\n    );\r\n  }\r\n\r\n  visualizeBfs() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[10][15];\r\n    const finishNode = grid[10][35];\r\n    var t0 = performance.now();\r\n    const visitedNodesInOrder = unweightedSearchAlgorithm(\r\n      grid,\r\n      startNode,\r\n      finishNode\r\n    );\r\n    var t1 = performance.now();\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    this.recordPerofrmence(\r\n      \"bfs\",\r\n      t1 - t0,\r\n      visitedNodesInOrder.length,\r\n      nodesInShortestPathOrder.length\r\n    );\r\n  }\r\n\r\n  visualizeDfs() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[10][15];\r\n    const finishNode = grid[10][35];\r\n    var t0 = performance.now();\r\n    const visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n    var t1 = performance.now();\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    this.recordPerofrmence(\r\n      \"dfs\",\r\n      t1 - t0,\r\n      visitedNodesInOrder.length,\r\n      nodesInShortestPathOrder.length\r\n    );\r\n  }\r\n\r\n  selectionfunction(algo) {\r\n    const { currentAlgorithm } = this.state;\r\n    const { numberOfAlgos } = this.state;\r\n    if (!currentAlgorithm.includes(algo)) {\r\n      currentAlgorithm.push(algo);\r\n      this.setState({\r\n        numberOfAlgos: numberOfAlgos + 1,\r\n      });\r\n      this.setState({\r\n        disabledStart: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  startVisualization() {\r\n    const { currentAlgorithm } = this.state;\r\n    const { numberOfAlgos } = this.state;\r\n    var algo = currentAlgorithm.pop();\r\n    this.setState({\r\n      disabledStart: true,\r\n    });\r\n    var currentAlgo = document.getElementById(\"currentAlgo\");\r\n    if (algo != undefined) {\r\n      currentAlgo.innerHTML = \"Current Algorithm: \" + \" \" + algo;\r\n    } else {\r\n      currentAlgo.innerHTML = \"\";\r\n    }\r\n    if (algo == \"dijsktras\") {\r\n      this.visualizeDijkstra();\r\n    }\r\n    if (algo == \"astar\") {\r\n      this.visualizeAstar();\r\n    }\r\n    if (algo == \"bfs\") {\r\n      this.visualizeBfs();\r\n    }\r\n\r\n    if (algo == \"dfs\") {\r\n      this.visualizeDfs();\r\n    }\r\n    if (currentAlgorithm.length === 0) {\r\n      document.getElementById(\"table\").style.display = \"inline-table\";\r\n      document.getElementById(\"timeList\").style.display = \"block\";\r\n      document.getElementById(\"spaceList\").style.display = \"block\";\r\n\r\n      this.displayPerformance();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className=\"navBar\">\r\n          <a href=\"http://localhost:3000/\" className=\"onlyLeft\">\r\n            {\" \"}\r\n            <b> Pathfinding Visualizer </b>\r\n          </a>\r\n          <a>\r\n            {\" \"}\r\n            <button\r\n              onClick={() => this.startVisualization()}\r\n              className=\"newTools\"\r\n              disabled={this.state.disabledStart}\r\n            >\r\n              {\" \"}\r\n              <b>Visualize!</b>{\" \"}\r\n            </button>\r\n          </a>\r\n          <div className=\"dropDown\">\r\n            <label className=\"dropBtn\">\r\n              <b> Algorithms </b>\r\n            </label>\r\n            <select className=\"dropdown-algo\" id=\"dropdown-algo\" multiple>\r\n              <option\r\n                onClick={() => this.selectionfunction(\"dijsktras\")}\r\n                id=\"dijsktras\"\r\n                className=\"algoBar\"\r\n              >\r\n                {\" \"}\r\n                Dijkstra's algorithm{\" \"}\r\n              </option>\r\n              <option\r\n                onClick={() => this.selectionfunction(\"astar\")}\r\n                id=\"astar\"\r\n                className=\"algoBar\"\r\n              >\r\n                {\" \"}\r\n                Astar algorithm{\" \"}\r\n              </option>\r\n              <option\r\n                onClick={() => this.selectionfunction(\"bfs\")}\r\n                id=\"bfs\"\r\n                className=\"algoBar\"\r\n              >\r\n                {\" \"}\r\n                Bfs algorithm{\" \"}\r\n              </option>\r\n              <option\r\n                onClick={() => this.selectionfunction(\"dfs\")}\r\n                id=\"dfs\"\r\n                className=\"algoBar\"\r\n              >\r\n                {\" \"}\r\n                Dfs algorithm{\" \"}\r\n              </option>\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"wall\">\r\n            <a className=\"dropWall\">\r\n              <b> Wall </b>{\" \"}\r\n            </a>\r\n            <div className=\"dropdown-wall\">\r\n              <a\r\n                onClick={() => {\r\n                  const { grid } = this.state;\r\n                  const newGrid = generateWall1(grid);\r\n                  this.setState({ grid: newGrid });\r\n                }}\r\n              >\r\n                {\" \"}\r\n                <a> Level 1</a>{\" \"}\r\n              </a>\r\n              <a\r\n                onClick={() => {\r\n                  const { grid } = this.state;\r\n                  const newGrid = generateWall2(grid);\r\n                  this.setState({ grid: newGrid });\r\n                }}\r\n              >\r\n                {\" \"}\r\n                <a> Level 2</a>{\" \"}\r\n              </a>\r\n              <a\r\n                onClick={() => {\r\n                  const { grid } = this.state;\r\n                  const newGrid = generateWall3(grid);\r\n                  this.setState({ grid: newGrid });\r\n                }}\r\n              >\r\n                {\" \"}\r\n                <a> Level 3</a>{\" \"}\r\n              </a>\r\n              <a\r\n                onClick={() => {\r\n                  const { grid } = this.state;\r\n                  const newGrid = createMaze(grid);\r\n                  this.setState({ grid: newGrid });\r\n                }}\r\n              >\r\n                {\" \"}\r\n                <a> Generate Maze</a>{\" \"}\r\n              </a>\r\n            </div>\r\n          </div>\r\n          <a href=\"http://localhost:3000/\">\r\n            {\" \"}\r\n            <b> Reset</b>\r\n          </a>\r\n        </div>\r\n\r\n        <div id=\"analysisContainer\">\r\n          <div id=\"tableContainer\">\r\n            <Table id=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <th id=\"algorithm\"></th>\r\n                  <th id=\"time\"></th>\r\n                  <th id=\"distance\"></th>\r\n                  <th id=\"visitedNodes\"></th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td id=\"name0\"></td>\r\n                  <td id=\"time0\"></td>\r\n                  <td id=\"distance0\"></td>\r\n                  <td id=\"visitedNodes0\"></td>\r\n                </tr>\r\n                <tr>\r\n                  <td id=\"name1\"></td>\r\n                  <td id=\"time1\"></td>\r\n                  <td id=\"distance1\"></td>\r\n                  <td id=\"visitedNodes1\"></td>\r\n                </tr>\r\n                <tr>\r\n                  <td id=\"name2\"></td>\r\n                  <td id=\"time2\"></td>\r\n                  <td id=\"distance2\"></td>\r\n                  <td id=\"visitedNodes2\"></td>\r\n                </tr>\r\n                <tr>\r\n                  <td id=\"name3\"></td>\r\n                  <td id=\"time3\"></td>\r\n                  <td id=\"distance3\"></td>\r\n                  <td id=\"visitedNodes3\"></td>\r\n                </tr>\r\n              </tbody>\r\n            </Table>\r\n          </div>\r\n\r\n          <div id=\"listContainer1\">\r\n            <ul id=\"timeList\">\r\n              <a id=\"timelist\"></a>\r\n              <li id=\"timerow0\"></li>\r\n              <li id=\"timerow1\"></li>\r\n              <li id=\"timerow2\"></li>\r\n              <li id=\"timerow3\"></li>\r\n            </ul>\r\n          </div>\r\n\r\n          <div id=\"listContainer2\">\r\n            <ul id=\"spaceList\">\r\n              <a id=\"spacelist\"></a>\r\n              <li id=\"spacerow0\"></li>\r\n              <li id=\"spacerow1\"></li>\r\n              <li id=\"spacerow2\"></li>\r\n              <li id=\"spacerow3\"></li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n\r\n        <div id=\"currentAlgo\"></div>\r\n\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isFinish, isStart, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const temp = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      temp.push(createNode(col, row));\r\n    }\r\n    grid.push(temp);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === 10 && col === 15,\r\n    isFinish: row === 10 && col === 35,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}