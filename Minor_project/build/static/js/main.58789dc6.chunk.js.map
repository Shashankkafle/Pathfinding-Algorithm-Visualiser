{"version":3,"sources":["Node.jsx","Algorithms/AlgoTools.jsx","obstacles/Maze.jsx","Algorithms/BFS.jsx","Algorithms/DFS.jsx","Grid.jsx","Algorithms/Dijkstras.jsx","Algorithms/Astar.jsx","obstacles/RandomWalls.jsx","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","getAllNodes","grid","nodes","i","length","j","push","getUnvisitedNeighborsforAstar","node","neighbors","filter","neighbor","updateUnvisitedNeighbors","unvisitedNeighbors","isVisited","getUnvisitedNeighbors","distance","previousNode","getNodesInShortestPathOrder","finishNode","nodesInShortestPathOrder","currentNode","unshift","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","findCost","heruistic","Math","abs","getManhattan","cost","generateRandomNumber","max","floor","random","ROWS","COLS","Grid","state","mouseIsPressed","currentAlgorithm","performance","numberOfAlgos","disabledStart","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","document","getElementById","algo","time","numberOfVisited","lengthOfSHortestPath","tempPerformance","Object","algorithm","shortestPathLength","numberOfVisitedNodes","colName","colTime","colShortestDistance","colNumberOfVisited","innerHTML","name","shrotestDistance","numberOfNodes","toString","showComparison","style","marginLeft","display","a","b","visitedNodesInOrder","includes","alert","window","location","reload","setTimeout","animateShortestPath","clearGrid","startVisualization","startNode","t0","now","closestNode","shift","Infinity","dijkstra","t1","animateAlgorithm","recordPerofrmence","visitedNodes","cheapestIndex","cheapestNode","splice","unvisitedNeighbours","tempdist","newPath","aStar","queue","unweightedSearchAlgorithm","stack","pop","dfs","currentAlgo","undefined","visualizeDijkstra","visualizeAstar","visualizeBfs","visualizeDfs","displayPerformance","href","onClick","disabled","multiple","selectionfunction","generateWall1","generateWall2","generateWall3","createMaze","Table","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","temp","createNode","slice","newNode","ReactDOM","render"],"mappings":"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","file":"static/js/main.58789dc6.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Component } from 'react'\r\nimport'./node.css'\r\n\r\nexport default class Node extends Component {\r\n    render() {\r\n      const {\r\n        col,\r\n        isFinish,\r\n        isStart,\r\n        isWall,\r\n        onMouseDown,\r\n        onMouseEnter,\r\n        onMouseUp,\r\n        row,\r\n      } = this.props;\r\n      const extraClassName = isFinish\r\n        ? 'node-finish'\r\n        : isStart\r\n        ? 'node-start'\r\n        : isWall\r\n        ? 'node-wall'\r\n        : '';\r\n  \r\n      return (\r\n        <div\r\n          id={`node-${row}-${col}`}\r\n          className={`node ${extraClassName}`}\r\n          onMouseDown={() => onMouseDown(row, col)}\r\n          onMouseEnter={() => onMouseEnter(row, col)} \r\n          onMouseUp={() => onMouseUp()}>\r\n        </div> \r\n      );\r\n    }\r\n  }\r\n\r\n  "," \r\n  export function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (var i=0;i<grid.length;i++) {\r\n      for (var j=0;j<(grid[i].length);j++) {\r\n        nodes.push(grid[i][j]);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n\r\n  export function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) {neighbors.push(grid[row - 1][col]); }\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n\r\n  export function getUnvisitedNeighborsforAstar(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) {neighbors.push(grid[row - 1][col]); }\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isWall)  \r\n  }\r\n \r\n  export function updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.previousNode = node;\r\n      \r\n\r\n    }\r\n  }\r\n\r\n  export function updateUnvisitedNeighborsforastar(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighborsforAstar(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      \r\n      \r\n      neighbor.previousNode = node;\r\n      \r\n    }\r\n    return unvisitedNeighbors\r\n  }\r\n  \r\n  export function getNodesInShortestPathOrder(finishNode) {\r\n    \r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n  return nodesInShortestPathOrder;\r\n  }\r\n\r\n  export function sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n\r\n  export function findCost(node,finishNode){\r\n\r\n    node.heruistic=getManhattan(node,finishNode)\r\n    node.cost=node.distance+ node.heruistic\r\n  }\r\n\r\n  function getManhattan(node,finishNode){\r\n    \r\n    return(Math.abs(finishNode.col-node.col)+Math.abs(finishNode.row-node.row))\r\n  }\r\n","export function createMaze(grid)\r\n    {\r\n        const newGrid=grid\r\n        var row=0\r\n        for(var col=0;col<newGrid[0].length;col+=2)\r\n        {\r\n            for( row=0;row<newGrid.length;row++)\r\n            {\r\n                \r\n                \r\n                    newGrid[row][col].isWall=true\r\n                   \r\n                    \r\n            \r\n                \r\n            }\r\n            \r\n            newGrid[generateRandomNumber(newGrid.length)][col].isWall=false\r\n            newGrid[generateRandomNumber(newGrid.length)][col].isWall=false\r\n            \r\n        }\r\n        return newGrid\r\n    }\r\nfunction generateRandomNumber(max)\r\n{\r\n    return(Math.floor(Math.random()*max))\r\n}","\r\nexport function unweightedSearchAlgorithm(grid, startNode, finishNode) {\r\n  const queue = [];\r\n  const visitedNodesInOrder = [];\r\n\r\n  startNode.isVisited = true;\r\n  queue.push(startNode);\r\n\r\n  while (queue.length > 0) {\r\n      let node = queue.shift();\r\n\r\n      if (finishNode === node)\r\n          return visitedNodesInOrder;\r\n\r\n      if (node.isWall) continue;\r\n\r\n      const neighbors = getUnvisitedNeighbors(grid, node);\r\n\r\n      for (let i = 0; i < neighbors.length; i++) {\r\n          let neighbor = neighbors[i];\r\n          neighbor.isVisited = true;\r\n          neighbor.previousNode = node;\r\n          visitedNodesInOrder.push(neighbor);\r\n          queue.push(neighbor);\r\n      }\r\n  }\r\n\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction  getUnvisitedNeighbors(grid, node) {\r\n  const ROWS = grid.length;\r\n  const COLS = grid[0].length;\r\n\r\n  const { row, col } = node;\r\n  const neighbors = [];\r\n\r\n  if (\r\n      row + 1 >= 0 &&\r\n      row + 1 < ROWS &&\r\n      col >= 0 &&\r\n      col < COLS &&\r\n      !grid[row + 1][col].isVisited &&\r\n      !grid[row + 1][col].isWall\r\n  ) {\r\n      neighbors.push(grid[row + 1][col]);\r\n  }\r\n  if (\r\n      row - 1 >= 0 &&\r\n      row - 1 < ROWS &&\r\n      col >= 0 &&\r\n      col < COLS &&\r\n      !grid[row - 1][col].isWall &&\r\n      !grid[row - 1][col].isVisited\r\n  ) {\r\n      neighbors.push(grid[row - 1][col]);\r\n  }\r\n  if (\r\n      row >= 0 &&\r\n      row < ROWS &&\r\n      col - 1 >= 0 &&\r\n      col - 1 < COLS &&\r\n      !grid[row][col - 1].isWall &&\r\n      !grid[row][col - 1].isVisited\r\n  ) {\r\n      neighbors.push(grid[row][col - 1]);\r\n  }\r\n  if (\r\n      row >= 0 &&\r\n      row < ROWS &&\r\n      col + 1 >= 0 &&\r\n      col + 1 < COLS &&\r\n      !grid[row][col + 1].isWall &&\r\n      !grid[row][col + 1].isVisited\r\n  ) {\r\n      neighbors.push(grid[row][col + 1]);\r\n  }\r\n\r\n  return neighbors;\r\n}","\r\nexport function dfs(grid, startNode, finishNode) {\r\n  const stack = [];\r\n  const visitedNodesInOrder = [];\r\n\r\n  startNode.isVisited = true;\r\n  stack.push(startNode);\r\n\r\n  while (stack.length > 0) {\r\n      let currentNode = stack.pop();\r\n\r\n      currentNode.isVisited = true;\r\n\r\n      if (finishNode === currentNode){\r\n        return visitedNodesInOrder;\r\n      }\r\n\r\n      if (currentNode.isWall) continue;\r\n\r\n      let neighbors = getUnvisitedNeighbors(grid, currentNode);\r\n      \r\n      for (let i = 0; i < neighbors.length; i++) {\r\n        let neighbor = neighbors[i];\r\n        if(!neighbor.isVisited){\r\n          neighbor.previousNode = currentNode;\r\n          visitedNodesInOrder.push(neighbor);\r\n          stack.push(neighbor);\r\n        }\r\n      }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getUnvisitedNeighbors(grid, node) {\r\n  const ROWS = grid.length;\r\n  const COLS = grid[0].length;\r\n\r\n  const { row, col } = node;\r\n  const neighbors = [];\r\n\r\n  if (\r\n    row - 1 >= 0 &&\r\n    row - 1 < ROWS &&\r\n    col >= 0 &&\r\n    col < COLS &&\r\n    !grid[row - 1][col].isWall &&\r\n    !grid[row - 1][col].isVisited\r\n  ) {\r\n        neighbors.unshift(grid[row - 1][col]);\r\n  }\r\n  \r\n  if (\r\n    row >= 0 &&\r\n    row < ROWS &&\r\n    col + 1 >= 0 &&\r\n    col + 1 < COLS &&\r\n    !grid[row][col + 1].isWall &&\r\n    !grid[row][col + 1].isVisited\r\n  ) {\r\n    neighbors.unshift(grid[row][col + 1]);\r\n  }\r\n\r\n  if (\r\n      row + 1 >= 0 &&\r\n      row + 1 < ROWS &&\r\n      col >= 0 &&\r\n      col < COLS &&\r\n      !grid[row + 1][col].isVisited &&\r\n      !grid[row + 1][col].isWall\r\n  ) {\r\n      neighbors.unshift(grid[row + 1][col]);\r\n  }\r\n \r\n  if (\r\n      row >= 0 &&\r\n      row < ROWS &&\r\n      col - 1 >= 0 &&\r\n      col - 1 < COLS &&\r\n      !grid[row][col - 1].isWall &&\r\n      !grid[row][col - 1].isVisited\r\n  ) {\r\n      neighbors.unshift(grid[row][col - 1]);\r\n  }\r\n  \r\n\r\n  return neighbors;\r\n}\r\n                          \r\n  ","import React from 'react'\r\nimport { Component } from 'react'\r\nimport Node from './Node.jsx'\r\nimport './grid.css'\r\nimport {getAllNodes, getNodesInShortestPathOrder} from './Algorithms/AlgoTools'\r\nimport {dijkstra} from './Algorithms/Dijkstras';\r\nimport {aStar} from './Algorithms/Astar';\r\nimport {generateWall1,generateWall2,generateWall3} from './obstacles/RandomWalls'\r\nimport {createMaze} from './obstacles/Maze'\r\nimport {unweightedSearchAlgorithm} from './Algorithms/BFS';\r\nimport {dfs} from './Algorithms/DFS';\r\nimport Table from 'react-bootstrap/Table'\r\n\r\nexport default class Grid extends Component\r\n{\r\n  constructor() \r\n    {\r\n        super();\r\n        this.state = {\r\n          grid: [],\r\n          mouseIsPressed: false,\r\n          currentAlgorithm: [],\r\n          performance:[],\r\n          numberOfAlgos:0,\r\n          disabledStart:true,\r\n        };\r\n    } \r\n   \r\n   \r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    getAllNodes(grid)\r\n    this.setState({grid});\r\n  }\r\n    \r\n  \r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n\r\n  clearGrid(){ \r\n    const {grid}=this.state    \r\n    for(var i=0;i<grid.length;i++){\r\n      for(var j=0;j<grid[i].length;j++){\r\n            \r\n        grid[i][j].isVisited=false\r\n        if((!grid[i][j].isStart)&&(!grid[i][j].isFinish)&&(!grid[i][j].isWall))\r\n        document.getElementById(`node-${grid[i][j].row}-${grid[i][j].col}`).className =\r\n        'node ';\r\n      }\r\n    }\r\n  }\r\n\r\n  clearWalls(){ \r\n    const {grid}=this.state    \r\n    for(var i=0;i<grid.length;i++){\r\n      for(var j=0;j<grid[i].length;j++){\r\n            \r\n        grid[i][j].isVisited=false\r\n        grid[i][j].isWall=false\r\n        if((!grid[i][j].isStart)&&(!grid[i][j].isFinish))\r\n        document.getElementById(`node-${grid[i][j].row}-${grid[i][j].col}`).className =\r\n        'node ';\r\n      }\r\n    }\r\n  }\r\n\r\n  recordPerofrmence(algo,time,numberOfVisited,lengthOfSHortestPath){\r\n    const {performance}=this.state;\r\n    var tempPerformance = new Object();\r\n    tempPerformance.algorithm=algo;\r\n    tempPerformance.time=time;\r\n    tempPerformance.shortestPathLength=lengthOfSHortestPath;\r\n    tempPerformance.numberOfVisitedNodes=numberOfVisited;\r\n    performance.push(tempPerformance);\r\n   \r\n  }\r\n\r\n  displayPerformance(){\r\n    \r\n    const {performance} = this.state;\r\n    const {numberOfAlgos}= this.state\r\n    var colName=document.getElementById('algorithm')\r\n    var colTime=document.getElementById('time')\r\n    var colShortestDistance = document.getElementById('distance')\r\n    var colNumberOfVisited= document.getElementById('visitedNodes')\r\n    colName.innerHTML= 'algorithm' ;\r\n    colTime.innerHTML= 'time';\r\n    colShortestDistance.innerHTML = 'Shortest Path Length'\r\n    colNumberOfVisited.innerHTML='Number Of Visited Nodes'\r\n    var name=[],time=[],shrotestDistance=[],numberOfNodes=[];\r\n    \r\n    for(let i=0;i<numberOfAlgos;i++){\r\n      name[i]=document.getElementById('name'+i)\r\n      time[i]=document.getElementById('time'+i)\r\n      shrotestDistance[i]= document.getElementById('distance'+i)\r\n      numberOfNodes[i]=document.getElementById('visitedNodes'+i)\r\n      name[i].innerHTML= performance[i].algorithm;;\r\n      time[i].innerHTML= performance[i].time.toString() +' ms';\r\n      shrotestDistance[i].innerHTML =  performance[i].shortestPathLength.toString();\r\n      numberOfNodes[i].innerHTML=performance[i].numberOfVisitedNodes.toString()\r\n    }\r\n    this.showComparison();\r\n\r\n    if (numberOfAlgos==1){\r\n      document.getElementById('table').style.marginLeft = '500px';\r\n      document.getElementById('timeList').style.display = 'none';\r\n      document.getElementById('spaceList').style.display = 'none';\r\n    }\r\n\r\n    if (numberOfAlgos > 1){\r\n      document.getElementById('table').style.marginLeft = '120px';\r\n      document.getElementById('timeList').style.display = 'block';\r\n      document.getElementById('spaceList').style.display = 'block';\r\n      this.showComparison();\r\n    }\r\n    \r\n    if(numberOfAlgos==4){\r\n      \r\n      this.setState({\r\n        numberOfAlgos:0\r\n      })\r\n    }\r\n  }\r\n\r\n  showComparison(){\r\n    const {performance} = this.state;\r\n    const {numberOfAlgos} = this.state;\r\n    var tempPerformance=performance;\r\n    tempPerformance.sort((a,b)=>{\r\n      return(a.time>b.time) ? 1:-1\r\n    })\r\n\r\n    document.getElementById('timelist').innerHTML='Algorithms ordered based on time' \r\n\r\n    for(let i=0;i<numberOfAlgos;i++){\r\n     document.getElementById('timerow'+i).innerHTML=tempPerformance[i].algorithm;    \r\n    }\r\n    \r\n    tempPerformance.sort((a,b)=>{\r\n      return(a.numberOfVisitedNodes>b.numberOfVisitedNodes) ? 1:-1\r\n    })\r\n    \r\n    document.getElementById('spacelist').innerHTML='Algorithms ordered based on space';\r\n\r\n    for(let i=0;i<numberOfAlgos;i++){\r\n      document.getElementById('spacerow'+i).innerHTML=tempPerformance[i].algorithm;     \r\n    }   \r\n  }\r\n \r\n  animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    const {grid} = this.state\r\n    if(!visitedNodesInOrder.includes(grid[10][35])){\r\n      alert('No path avilable. Please try again')\r\n     window.location.reload()\r\n    }\r\n    for (let i=0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 20 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        if(!(visitedNodesInOrder[i].isStart||visitedNodesInOrder[i].isFinish))\r\n        {\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n        }\r\n      }, 20 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    let j = 0\r\n    for (let i=0; i < nodesInShortestPathOrder.length; i++) \r\n    {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        if(!(nodesInShortestPathOrder[i].isStart||nodesInShortestPathOrder[i].isFinish))\r\n        {\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n        } \r\n      }, 30 * i);\r\n      j++;\r\n    }\r\n    setTimeout(() => {\r\n     this.clearGrid()\r\n    }, 20 * j * 2);\r\n    setTimeout(() => {\r\n      this.startVisualization()\r\n        }, 20 * j * 2);\r\n    \r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[10][15];\r\n    const finishNode = grid[10][35];\r\n    var t0=performance.now()\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    var t1=performance.now()\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    this.recordPerofrmence('dijkstras',t1-t0,visitedNodesInOrder.length,nodesInShortestPathOrder.length)\r\n  }\r\n\r\n  visualizeAstar() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[10][15];\r\n    const finishNode = grid[10][35];\r\n    var t0=performance.now()\r\n    const visitedNodesInOrder = aStar(grid, startNode, finishNode);\r\n    var t1=performance.now()\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    this.recordPerofrmence('astar',t1-t0,visitedNodesInOrder.length,nodesInShortestPathOrder.length)\r\n  }\r\n\r\n\r\n  visualizeBfs() { \r\n    const {grid} = this.state;\r\n    const startNode = grid[10][15];\r\n    const finishNode = grid[10][35];\r\n    var t0=performance.now()\r\n    const visitedNodesInOrder =  unweightedSearchAlgorithm(grid, startNode, finishNode);\r\n    var t1=performance.now()\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);  \r\n    this.recordPerofrmence('bfs',t1-t0,visitedNodesInOrder.length,nodesInShortestPathOrder.length)\r\n  }\r\n\r\n  visualizeDfs() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[10][15];\r\n    const finishNode = grid[10][35];\r\n    var t0=performance.now()\r\n    const visitedNodesInOrder =  dfs(grid, startNode, finishNode);\r\n    var t1=performance.now()\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);  \r\n    this.recordPerofrmence('dfs',t1-t0,visitedNodesInOrder.length,nodesInShortestPathOrder.length)\r\n  }\r\n\r\n  selectionfunction(algo){\r\n    const {currentAlgorithm}= this.state\r\n    const {numberOfAlgos}= this.state\r\n    if(!currentAlgorithm.includes(algo)){\r\n    currentAlgorithm.push(algo)\r\n    this.setState({\r\n      numberOfAlgos:numberOfAlgos+1\r\n    })\r\n    this.setState({\r\n      disabledStart:false\r\n    })\r\n   }\r\n  }\r\n\r\n  startVisualization(){\r\n      const {currentAlgorithm}= this.state\r\n      const {numberOfAlgos}= this.state\r\n      var algo=currentAlgorithm.pop()\r\n      this.setState({\r\n        disabledStart:true\r\n      })\r\n     var currentAlgo= document.getElementById('currentAlgo');\r\n     if(algo!=undefined){\r\n     currentAlgo.innerHTML= 'Current Algorithm: '+ ' ' + algo;\r\n     }\r\n     else{\r\n      currentAlgo.innerHTML=''\r\n     }\r\n      if(algo=='dijsktras'){\r\n        \r\n        this.visualizeDijkstra()        \r\n      }\r\n      if(algo=='astar'){\r\n       \r\n        this.visualizeAstar()\r\n      }\r\n      if(algo=='bfs'){\r\n        this.visualizeBfs()\r\n      }\r\n\r\n      if(algo=='dfs'){\r\n        this.visualizeDfs()\r\n      }\r\n      if(currentAlgorithm.length === 0){\r\n\r\n        document.getElementById('table').style.display = 'inline-table';\r\n        document.getElementById('timeList').style.display = 'block';\r\n        document.getElementById('spaceList').style.display = 'block';\r\n\r\n        this.displayPerformance();\r\n      }\r\n  }\r\n\r\n  render() {\r\n    \r\n    const {grid, mouseIsPressed} = this.state;\r\n    \r\n    return (\r\n      <>\r\n      <div className=\"navBar\">\r\n        <a href=\"http://localhost:3000/\" className='onlyLeft'>  <b> Pathfinding Visualizer </b></a>\r\n        <a>  <button  onClick={()=>this.startVisualization()}className=\"newTools\" disabled={this.state.disabledStart}> <b>Visualize!</b> </button></a>\r\n\t      <div className=\"dropDown\"> \r\n          <label className=\"dropBtn\"><b> Algorithms </b></label>\r\n          <select className=\"dropdown-algo\" id=\"dropdown-algo\" multiple >\r\n          <option onClick={()=>this.selectionfunction('dijsktras')} id='dijsktras' className=\"algoBar\"> Dijkstra's algorithm </option> \r\n          <option  onClick={()=>this.selectionfunction('astar')} id='astar' className=\"algoBar\">  Astar algorithm  </option>\r\n          <option  onClick={()=>this.selectionfunction('bfs') }id='bfs' className=\"algoBar\">  Bfs algorithm  </option>\r\n          <option  onClick={()=>this.selectionfunction('dfs')} id='dfs'className=\"algoBar\" >  Dfs algorithm   </option>\r\n          </select> \r\n        </div>\r\n\r\n        <div className=\"wall\"> \r\n          <a className=\"dropWall\"><b> Wall </b> </a>\r\n          <div className=\"dropdown-wall\">\r\n            <a onClick=\r\n                        {() => \r\n                              { const {grid} = this.state;\r\n                                const newGrid=generateWall1(grid)\r\n                                this.setState({grid: newGrid})\r\n                              }\r\n                        }\r\n            >  <a> Level 1</a> </a> \r\n           <a onClick=\r\n                        {() => \r\n                              {\r\n                                const {grid} = this.state;\r\n                                const newGrid=generateWall2(grid)\r\n                                this.setState({grid: newGrid})\r\n                              }\r\n                        }\r\n            >  <a> Level 2</a> </a> \r\n           <a onClick=\r\n                        {() => \r\n                              {\r\n                                const {grid} = this.state;\r\n                                const newGrid=generateWall3(grid)\r\n                                this.setState({grid: newGrid})\r\n                              }\r\n                        }\r\n            >  <a> Level 3</a> </a> \r\n            <a onClick=\r\n              {()=>\r\n                  {const {grid} = this.state;\r\n                  const newGrid=createMaze(grid)\r\n                  this.setState({grid: newGrid})\r\n                  \r\n                  }\r\n              }\r\n            >  <a> Generate Maze</a> </a>\r\n          </div> \r\n        </div>\r\n       <a href=\"http://localhost:3000/\"> <b> Reset</b></a>\r\n      </div>\r\n\r\n      <div id='analysisContainer'>\r\n        <div id='tableContainer'>\r\n          <Table id='table'>\r\n              <thead>\r\n                <tr>\r\n                  <th id='algorithm'></th>\r\n                  <th id='time'></th>\r\n                  <th id='distance'></th>\r\n                  <th id='visitedNodes'></th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td id='name0'></td>\r\n                  <td id='time0'></td>\r\n                  <td id='distance0'></td>\r\n                  <td id='visitedNodes0'></td>\r\n                </tr>\r\n                <tr>\r\n                  <td id='name1'></td>\r\n                  <td id='time1'></td>\r\n                  <td id='distance1'></td>\r\n                  <td id='visitedNodes1'></td>\r\n                </tr>\r\n                <tr>\r\n                  <td id='name2'></td>\r\n                  <td id='time2'></td>\r\n                  <td id='distance2'></td>\r\n                  <td id='visitedNodes2'></td>\r\n                </tr>\r\n                <tr>\r\n                  <td id='name3'></td>\r\n                  <td id='time3'></td>\r\n                  <td id='distance3'></td>\r\n                  <td id='visitedNodes3'></td>\r\n                </tr>\r\n              </tbody>\r\n            </Table>\r\n        </div>\r\n            \r\n        <div id='listContainer1'>\r\n            <ul id='timeList' > \r\n            <a  id='timelist'></a>\r\n            <li id='timerow0'></li>\r\n            <li id='timerow1'></li>\r\n            <li id='timerow2'></li>\r\n            <li id='timerow3'></li>\r\n            </ul> \r\n        </div>\r\n          \r\n        <div id='listContainer2'>\r\n          <ul id='spaceList'> \r\n          <a  id='spacelist'></a>\r\n          <li id='spacerow0'></li>\r\n          <li id='spacerow1'></li>\r\n          <li id='spacerow2'></li>\r\n          <li id='spacerow3'></li>\r\n          </ul> \r\n        </div>\r\n     \r\n      </div> \r\n\r\n      <div id='currentAlgo'></div>\r\n\r\n\r\n      <div className=\"grid\"> \r\n        {grid.map((row, rowIdx) => { \r\n          return (\r\n            <div key={rowIdx}>\r\n              {row.map((node, nodeIdx) => {\r\n                const {row, col, isFinish, isStart, isWall} = node;\r\n                return (\r\n                  <Node\r\n                    key={nodeIdx}\r\n                    col={col}\r\n                    isFinish={isFinish}\r\n                    isStart={isStart}\r\n                    isWall={isWall}\r\n                    mouseIsPressed={mouseIsPressed}\r\n                    onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                    onMouseEnter={(row, col) =>\r\n                      this.handleMouseEnter(row, col)\r\n                    }\r\n                    onMouseUp={() => this.handleMouseUp()}\r\n                    row={row}></Node>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </> \r\n    );     \r\n  }\r\n};\r\n\r\nconst getInitialGrid = () => {\r\n  \r\n  const grid = []\r\n  for (let row = 0; row < 20; row++) {\r\n    const temp = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      temp.push(createNode(col, row));\r\n    }\r\n    grid.push(temp);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === 10 && col === 15,\r\n    isFinish: row === 10&& col === 35,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\n","import {getAllNodes,updateUnvisitedNeighbors,sortNodesByDistance } from './AlgoTools';\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n      sortNodesByDistance(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();\r\n      if (closestNode.isWall) continue;\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  ","import {getUnvisitedNeighborsforAstar,findCost } from \"./AlgoTools\";\r\n\r\nexport function aStar(grid, startNode, finishNode)\r\n{   startNode.distance = 0;\r\n    startNode.cost = 0\r\n    var unvisitedNodes=[]\r\n    var visitedNodes=[] \r\n    unvisitedNodes.push(startNode)\r\n    while(unvisitedNodes.length>0)\r\n    {      var cheapestIndex=0,cheapestNode=unvisitedNodes[0]         \r\n         for(var i=0;i<unvisitedNodes.length;i++) \r\n        { \r\n            if(unvisitedNodes[i].cost<cheapestNode.cost)\r\n            {      \r\n                cheapestIndex=i\r\n            }\r\n        }\r\n        cheapestNode=unvisitedNodes[cheapestIndex]\r\n        if(cheapestNode.isFinish)\r\n        { visitedNodes.push(finishNode)\r\n            return(visitedNodes)\r\n        }  \r\n        unvisitedNodes.splice(cheapestIndex,1)  \r\n        visitedNodes.push(cheapestNode)\r\n        var unvisitedNeighbours=getUnvisitedNeighborsforAstar(cheapestNode,grid) \r\n      \r\n        for(var i=0;i<unvisitedNeighbours.length;i++) \r\n        {          \r\n            if(!visitedNodes.includes(unvisitedNeighbours[i]))\r\n            {\r\n                var tempdist=cheapestNode.distance+1\r\n                var newPath = false;\r\n                if(unvisitedNodes.includes(unvisitedNeighbours[i]))\r\n                {\r\n                    if(tempdist<unvisitedNeighbours[i].distance)\r\n                    {\r\n                        unvisitedNeighbours[i].distance=tempdist\r\n                        newPath=true\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    unvisitedNeighbours[i].distance=tempdist\r\n                    newPath=true\r\n                    unvisitedNodes.push(unvisitedNeighbours[i])\r\n                }\r\n                if(newPath){\r\n                   findCost(unvisitedNeighbours[i],finishNode)\r\n                   unvisitedNeighbours[i].previousNode= cheapestNode\r\n                }\r\n                findCost(unvisitedNeighbours[i],finishNode)\r\n            } \r\n        }      \r\n    }\r\n   \r\n    return visitedNodes\r\n    \r\n}","  export  function generateWall1(grid)\r\n  {\r\n    const newGrid=grid\r\n    for(var i=0;i<newGrid.length;i++)\r\n    {\r\n      for(var j=0;j<newGrid[i].length;j++)\r\n      {\r\n        if((Math.random())<0.1)\r\n        {\r\n          newGrid[i][j].isWall= true\r\n        }\r\n        \r\n      }\r\n    }\r\n   return newGrid\r\n  }\r\n  \r\n  export  function generateWall2(grid)\r\n  {\r\n    const newGrid=grid\r\n    for(var i=0;i<grid.length;i++)\r\n    {\r\n      for(var j=0;j<newGrid[i].length;j++)\r\n      {\r\n        if((Math.random())<0.2)\r\n        {\r\n          newGrid[i][j].isWall= true\r\n        }\r\n      }\r\n    }\r\n   return newGrid\r\n  }\r\n\r\n  export  function generateWall3(grid)\r\n  {\r\n    const newGrid=grid\r\n    for(var i=0;i<newGrid.length;i++)\r\n    {\r\n      for(var j=0;j<grid[i].length;j++)\r\n      {\r\n        if((Math.random())<0.3)\r\n        {\r\n          newGrid[i][j].isWall= true\r\n        }\r\n      }\r\n    }\r\n   return newGrid\r\n  }","\r\nimport ReactDOM from 'react-dom'\r\nimport React from 'react'\r\nimport Grid from './Grid'\r\nimport './index.css';\r\n\r\nReactDOM.render(<Grid/>,document.getElementById('root'));\r\n\r\n\r\n"],"sourceRoot":""}